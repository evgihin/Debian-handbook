<?xml version="1.0"?>
<chapter id="packaging-system">
  <chapterinfo>
    <mediaobject condition="pdf">
      <imageobject>
        <imagedata fileref="images/chap-packaging-system.png" scalefit="1"/>
      </imageobject>
    </mediaobject>
    <keywordset>
      <keyword>Binary package</keyword>
      <keyword>Source package</keyword>
      <keyword>package</keyword>
      <keyword>dpkg</keyword>
      <keyword>deb</keyword>
      <keyword>dependencies</keyword>
      <keyword>conflict</keyword>
    </keywordset>
  </chapterinfo>
  <title>Packaging System: Tools and Fundamental Principles</title>
  <highlights>
    <para>As a Debian system administrator, you will routinely handle
    <filename>.deb</filename> packages, since they contain consistent
    functional units (applications, documentation, etc.), whose
    installation and maintenance they facilitate. It is therefore a good
    idea to know what they are and how to use them.</para>
  </highlights>

  <para>This chapter describes the structure and contents of “binary”
  and “source” packages. The former are files directly usable by
  <command>dpkg</command>, while the latter contain the source code,
  as well as instructions for building binary packages.</para>

  <section id="sect.binary-package-structure">
    <title>Structure of a Binary Package</title>
    <indexterm><primary>package</primary><secondary>binary package</secondary><seealso><filename>.deb</filename></seealso></indexterm>
    <indexterm><primary><command>ar</command></primary></indexterm>
    <indexterm><primary><command>dpkg</command></primary></indexterm>

    <para>The Debian package format is designed so that its content may be
    extracted on any Unix system that has the classic commands
    <command>ar</command>, <command>tar</command>, and
    <command>xz</command> or sometimes
    <command>gzip</command> or <command>bzip2</command>. This seemingly
    trivial property is important for portability and disaster
    recovery.</para>

    <para>Imagine, for example, that you mistakenly deleted the
    <command>dpkg</command> program, and that you could thus no longer install
    Debian packages. <command>dpkg</command> being a Debian package itself, it
    would seem your system would be done for... Fortunately, you know the
    format of a package and can therefore <ulink
    url="https://www.debian.org/distrib/packages#search_packages">download</ulink>
    the <filename>.deb</filename> file of the <emphasis
    role="pkg">dpkg</emphasis> package and install it manually (see sidebar
    <xref linkend="sidebar.dpkg-apt-ar"/>). If by some misfortune one or more
    of the programs <command>ar</command>, <command>tar</command> or
    <command>gzip</command>/<command>xz</command>/<command>bzip2</command> have
    disappeared, you will only need to copy the missing program from another
    system (since each of these operates in a completely autonomous manner,
    without dependencies, a simple copy will suffice).  If your system suffered
    some even more outrageous fortune, and even these don't work (maybe the
    deepest system libraries are missing?), you should try the static version
    of <command>busybox</command> (provided in the <emphasis
    role="pkg">busybox-static</emphasis> package), which is even more
    self-contained, and provides subcommands such as <command>busybox
    ar</command>, <command>busybox tar</command> and <command>busybox
    xz</command>.</para>

    <para><emphasis>In case of a misfortune you better also have a backup
    of your system (see <xref linkend="sect.backup"/>).</emphasis></para>

    <sidebar id="sidebar.dpkg-apt-ar">
      <title><emphasis>TOOLS</emphasis> <command>dpkg</command>, <command>APT</command> and <command>ar</command></title>
      <indexterm><primary><command>dpkg</command></primary></indexterm>
      <indexterm><primary><command>ar</command></primary></indexterm>
      <indexterm><primary><command>apt</command></primary></indexterm>
      <indexterm><primary>APT</primary><secondary><command>apt</command>, command</secondary><see><command>apt</command></see></indexterm>
      <indexterm><primary>Advanced Packaging Tool</primary><seealso>APT</seealso></indexterm>

      <para><command>dpkg</command> is the program that handles
      <filename>.deb</filename> files (binary packages), notably extracting,
      analyzing, and unpacking them.</para>

      <para><acronym>APT</acronym> (the abbreviation of "Advanced Packaging
      Tool") is a group of programs that allows the execution of higher-level
      modifications to the system: installing or removing a package (while
      keeping dependencies satisfied), updating and upgrading the system,
      listing the available packages, etc.</para>

      <para>As for the <command>ar</command> program, provided by the
      <emphasis role="pkg">binutils</emphasis> package, it allows
      handling files of the same name:</para>

      <indexterm><primary>decompressing, binary package</primary></indexterm>
      <indexterm><primary>uncompressing, binary package</primary></indexterm>
      <indexterm><primary>unpacking</primary><secondary>binary package</secondary></indexterm>

      <itemizedlist>
        <listitem>
          <para><command>ar t <replaceable>archive</replaceable></command>
          displays the list of files contained in such an archive,</para>
        </listitem>
        <listitem>
          <para><command>ar x <replaceable>archive</replaceable></command>
          extracts the files from the archive into the current working
          directory,</para> 
        </listitem>
        <listitem>
          <para><command>ar d <replaceable>archive</replaceable>
          <replaceable>file</replaceable></command> deletes a file from the
          archive, etc.</para> 
        </listitem>
      </itemizedlist>

      <para>Its man page
      <citerefentry><refentrytitle>ar</refentrytitle><manvolnum>1</manvolnum></citerefentry>
      documents all its other features. <command>ar</command> is a very
      rudimentary tool that a Unix administrator would only use on rare
      occasions, but admins routinely use <command>tar</command>, a more
      evolved archive and file management program. This is why it is easy to
      restore <command>dpkg</command> in the event of an erroneous deletion.
      You would only have to download the Debian package and extract the
      content from the <filename>data.tar.xz</filename> archive in the system's
      root (<filename>/</filename>):</para>

      <!-- MAYCHANGE: dpkg version number -->
      <screen>
<computeroutput># </computeroutput><userinput>ar x dpkg_1.20.9_amd64.deb</userinput>
<computeroutput># </computeroutput><userinput>tar -C / -p -xJf data.tar.xz</userinput>
</screen>
    </sidebar>

    <sidebar>
      <title><emphasis>BACK TO BASICS</emphasis> Man page notation</title>

      <para>It can be confusing for beginners to find references to
      “<citerefentry><refentrytitle>ar</refentrytitle><manvolnum>1</manvolnum></citerefentry>”
      in the literature. This is generally a convenient means of referring
      to the man page entitled <literal>ar</literal> in section 1.</para>

      <para>Sometimes this notation is also used to remove ambiguities, for
      example to distinguish between the <command>printf</command> command
      that can also be indicated by
      <citerefentry><refentrytitle>printf</refentrytitle><manvolnum>1</manvolnum></citerefentry>
      and the <function>printf</function> function in the C programming
      language, which can also be referred to as
      <citerefentry><refentrytitle>printf</refentrytitle><manvolnum>3</manvolnum></citerefentry>.</para>

      <para><xref linkend="solving-problems"/> discusses manual pages in
      further detail (see <xref linkend="sect.manual-pages"/>).</para>
    </sidebar>

    <para>Have a look at the content of a <filename>.deb</filename>
    file:</para>

    <!-- MAYCHANGE: dpkg contents and version number -->
    <screen><computeroutput>$ </computeroutput><userinput>ar t dpkg_1.20.9_amd64.deb</userinput>
<computeroutput>debian-binary
control.tar.gz
data.tar.xz
$ </computeroutput><userinput>ar x dpkg_1.20.9_amd64.deb</userinput>
<computeroutput>$ </computeroutput><userinput>ls</userinput>
<computeroutput>control.tar.gz  data.tar.xz  debian-binary  dpkg_1.20.9_amd64.deb
$ </computeroutput><userinput>tar tJf data.tar.xz | head -n 16</userinput>
<computeroutput>./
./etc/
./etc/alternatives/
./etc/alternatives/README
./etc/cron.daily/
./etc/cron.daily/dpkg
./etc/dpkg/
./etc/dpkg/dpkg.cfg
./etc/dpkg/dpkg.cfg.d/
./etc/logrotate.d/
./etc/logrotate.d/alternatives
./etc/logrotate.d/dpkg
./sbin/
./sbin/start-stop-daemon
./usr/
./usr/bin/
$ </computeroutput><userinput>tar tJf control.tar.xz</userinput>
<computeroutput>./
./conffiles
./control
./md5sums
./postrm
$ </computeroutput><userinput>cat debian-binary</userinput>
<computeroutput>2.0</computeroutput>
</screen>

    <para>As you can see, the <command>ar</command> archive of a Debian
    package is comprised of three files:</para>

    <variablelist>
      <varlistentry>
        <term><filename>debian-binary</filename></term>
        <listitem>
          <!-- MAYCHANGE: Debian stable release name -->
          <para>This is a text file which simply indicates the version of the
          <filename>.deb</filename> file package format version. In Debian
          <emphasis role="distribution">Bullseye</emphasis> it is still
          version 2.0.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><filename>control.tar.xz</filename></term>
        <listitem>
          <para>This archive file contains all of the available
          meta-information, like the name and version of the package as well as
          some scripts to run before, during or after (un-)installation of it.
          Some of the meta-information allows package management tools to
          determine if it is possible to install or uninstall it, for example
          according to the list of packages already on the machine, and if
          files shipped have been modified locally.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><filename>data.tar.xz</filename></term>
        <term><filename>data.tar.bz2</filename></term>
        <term><filename>data.tar.gz</filename></term>
        <listitem>
          <para>This archive contains all of the files to be extracted from the
          package; this is where the executable files, libraries,
          documentation, etc., are all stored. Packages may use different
          compression formats, in which case the file will be named differently
          for <command>xz</command>, <command>bzip2</command> or
          <command>gzip</command>.</para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section id="sect.package-meta-information">
    <title>Package Meta-Information</title>
    <indexterm><primary>package meta-information</primary><seealso>meta-information</seealso></indexterm>
    <indexterm><primary>package</primary><secondary>meta-information</secondary></indexterm>
    <indexterm><primary>package</primary><secondary>maintainer scripts</secondary></indexterm>
    <indexterm><primary>package</primary><secondary>checksums</secondary></indexterm>

    <para>The Debian package is not only an archive of files intended
    for installation. It is part of a larger whole and describes
    its relationship with other Debian packages (requisites, dependencies,
    conflicts, suggestions). It also provides scripts that enable the
    execution of commands at different stages in the package's
    lifecycle (installation, upgrade, removal). These data are used
    by the package management tools, but are not part of the packaged
    software; they are, within the package, what is called its
    “meta-information” - information about other information.</para>

    <section id="sect.control">
      <title>Description: the <filename>control</filename> File</title>
      <indexterm><primary>package meta-information</primary></indexterm>
      <indexterm><primary>package</primary><secondary><filename>control</filename></secondary></indexterm>
      <indexterm><primary>package</primary><secondary>meta-information</secondary></indexterm>
      <indexterm><primary><filename>control</filename></primary></indexterm>
      <indexterm><primary><filename>control</filename></primary><seealso>package meta-information</seealso></indexterm>

      <para>This file uses a structure similar to email headers (as defined by
      <link linkend="sidebar.rfc">RFC 2822</link>) and is fully described in
      the Debian Policy and the manual pages
      <citerefentry><refentrytitle>deb-control</refentrytitle><manvolnum>5</manvolnum></citerefentry>
      and
      <citerefentry><refentrytitle>deb822</refentrytitle><manvolnum>5</manvolnum></citerefentry>.
      <ulink type="block"
      url="https://www.debian.org/doc/debian-policy/ch-controlfields.html"/></para>

      <para>For example, for <emphasis role="pkg">apt</emphasis>, the
      <filename>control</filename> file looks like the following:</para>

      <!-- MAYCHANGE: output of command -->
      <screen>
<computeroutput>$ </computeroutput><userinput>apt-cache show apt</userinput><computeroutput><![CDATA[
Package: apt
Version: 2.2.4
Installed-Size: 4337
Maintainer: APT Development Team <deity@lists.debian.org>
Architecture: amd64
Replaces: apt-transport-https (<< 1.5~alpha4~), apt-utils (<< 1.3~exp2~)
Provides: apt-transport-https (= 2.2.4)
Depends: adduser, gpgv | gpgv2 | gpgv1, libapt-pkg6.0 (>= 2.2.4), debian-archive-keyring, libc6 (>= 2.15), libgcc-s1 (>= 3.0), libgnutls30 (>= 3.7.0), libseccomp2 (>= 2.4.2), libstdc++6 (>= 9), libsystemd0
Recommends: ca-certificates
Suggests: apt-doc, aptitude | synaptic | wajig, dpkg-dev (>= 1.17.2), gnupg | gnupg2 | gnupg1, powermgmt-base
Breaks: apt-transport-https (<< 1.5~alpha4~), apt-utils (<< 1.3~exp2~), aptitude (<< 0.8.10)
Description-en: commandline package manager
 This package provides commandline tools for searching and
 managing as well as querying information about packages
 as a low-level access to all features of the libapt-pkg library.
 .
 These include:
  * apt-get for retrieval of packages and information about them
    from authenticated sources and for installation, upgrade and
    removal of packages together with their dependencies
  * apt-cache for querying available information about installed
    as well as installable packages
  * apt-cdrom to use removable media as a source for packages
  * apt-config as an interface to the configuration settings
  * apt-key as an interface to manage authentication keys
Description-md5: 9fb97a88cb7383934ef963352b53b4a7
Tag: admin::package-management, devel::lang:ruby, hardware::storage,
 hardware::storage:cd, implemented-in::c++, implemented-in::perl,
 implemented-in::ruby, interface::commandline, network::client,
 protocol::ftp, protocol::http, protocol::ipv6, role::program,
 scope::application, scope::utility, suite::debian, use::downloading,
 use::organizing, use::playing, use::searching, works-with-format::html,
 works-with::audio, works-with::software:package, works-with::text
Section: admin
Priority: required
Filename: pool/main/a/apt/apt_2.2.4_amd64.deb
Size: 1491328
MD5sum: 24d53e8dd75095640a167f40476c0442
SHA256: 75f07c4965ff0813f26623a1164e162538f5e94defba6961347527ed71bc4f3d
]]></computeroutput>
</screen>

      <para>Let us have a closer look at the purpose of some of the fields
      listed by the previous command.</para>

      <sidebar id="sidebar.rfc">
        <title><emphasis>BACK TO BASICS</emphasis> RFC — Internet standards</title>
        <indexterm><primary>RFC</primary><seealso>Request For Comments</seealso></indexterm>
        <indexterm><primary>Request For Comments</primary></indexterm>
        <indexterm><primary>IETF</primary><seealso>Internet Engineering Task Force</seealso></indexterm>
        <indexterm><primary>Internet Engineering Task Force</primary></indexterm>

        <para><acronym>RFC</acronym> is the abbreviation of “Request For Comments”.
        An RFC is generally a technical document that describes what will become
        an Internet standard. Before becoming standardized and frozen,
        these standards are submitted for public review (hence their name).
        The <acronym>IETF</acronym> (Internet Engineering Task Force) decides on
        the evolution of the status of these documents (proposed standard, draft
        standard, or standard).</para>

        <para>RFC 2026 defines the process for standardization of Internet
        protocols. <ulink type="block"
        url="http://www.faqs.org/rfcs/rfc2026.html"/></para>
      </sidebar>

      <section id="sect.control.depends">
        <title>Dependencies: the <literal>Depends</literal> Field</title>
        <indexterm><primary>dependency</primary></indexterm>
        <indexterm><primary>package</primary><secondary>dependency</secondary></indexterm>
        <indexterm><primary><filename>control</filename></primary><secondary><literal>Depends</literal>, header field</secondary></indexterm>

        <para>The dependencies are defined in the
        <literal>Depends</literal> field in the package header. It
        is a list of conditions to be met for the package to work
        correctly. This information is used by tools such as
        <command>apt</command> in order to install the required libraries,
        tools, drivers, etc., in appropriate versions fulfilling the
        dependencies of the package to be installed. For each dependency
        it is possible to restrict the range of versions that meet that
        condition. In other words, it is possible to express the fact
        that we need the package <emphasis role="pkg">libc6</emphasis>
        in a version equal to or greater than “2.15” (written
        “<command>libc6 (&gt;= 2.15)</command>”). Version comparison
        operators are as follows:</para>

        <itemizedlist>
          <listitem>
            <para><command>&lt;&lt;</command>: less than;</para>
          </listitem>
          <listitem>
            <para><command>&lt;=</command>: less than or equal to;</para>
          </listitem>
          <listitem>
            <para><command>=</command>: equal to (note that
            “<literal>2.6.1</literal>” is not equal to
            “<literal>2.6.1-1</literal>”);</para>
          </listitem>
          <listitem>
            <para><command>&gt;=</command>: greater than or equal
            to;</para>
          </listitem>
          <listitem>
            <para><command>&gt;&gt;</command>: greater than.</para>
          </listitem>
        </itemizedlist>

        <para>In a list of conditions to be met, the comma serves as a
        separator. It must be interpreted as a logical “and”.
        In conditions, the vertical bar (“|”) expresses a logical “or”
        (it is an inclusive “or”, not an exclusive
        “either/or”). Carrying greater priority than “and”, it can
        be used as many times as necessary. Thus, the dependency “(A or
        B) and C” is written <command>A | B, C</command>. In contrast,
        the expression “A or (B and C)” should be written as “(A or
        B) and (A or C)”, since the <literal>Depends</literal> field does
        not tolerate parentheses that change the order of priorities
        between the logical operators “or” and “and”. It would thus
        be written <command>A | B, A | C</command>. <ulink type="block"
        url="https://www.debian.org/doc/debian-policy/ch-relationships.html#syntax-of-relationship-fields"/></para>

        <indexterm><primary>meta-package</primary></indexterm>

        <para>The dependencies system is a good mechanism for guaranteeing
        the operation of a program, but it has another use with
        “meta-packages”. These are empty packages that only describe
        dependencies. They facilitate the installation of a consistent
        group of programs pre-selected by the meta-package maintainer; as
        such, <command>apt install
        <replaceable>meta-package</replaceable></command> will
        automatically install all of these programs using the
        meta-package's dependencies. The <emphasis
        role="pkg">gnome</emphasis>, <emphasis role="pkg">kde-full</emphasis>
        and <emphasis role="pkg">linux-image-amd64</emphasis> packages
        are examples of meta-packages.</para>

        <sidebar>
          <title><emphasis>DEBIAN POLICY</emphasis> <literal>Recommends</literal>, <literal>Suggests</literal>, and <literal>Enhances</literal> fields</title>
          <indexterm><primary>package</primary><secondary>recommendations</secondary></indexterm>
          <indexterm><primary>package</primary><secondary>suggestions</secondary></indexterm>
          <indexterm><primary><filename>control</filename></primary><secondary><literal>Recommends</literal>, header field</secondary></indexterm>
          <indexterm><primary><filename>control</filename></primary><secondary><literal>Suggests</literal>, header field</secondary></indexterm>

          <para>The <literal>Recommends</literal> and
          <literal>Suggests</literal> fields describe dependencies that are
          not compulsory. The “recommended” dependencies, the most
          important, considerably improve the functionality offered by the
          package but are not indispensable to its operation. The
          “suggested” dependencies, of secondary importance, indicate
          that certain packages may complement and increase their
          respective utility, but it is perfectly reasonable to install one
          without the others.</para>

          <indexterm><primary>APT</primary><secondary><literal>APT::Install-Recommends</literal></secondary></indexterm>
          <indexterm><primary>APT</primary><secondary><literal>APT::Install-Suggests</literal></secondary></indexterm>
          <indexterm><primary>APT</primary><secondary><literal>Aptitude::Recommends-Important</literal></secondary></indexterm>

          <para>You should always install the “recommended” packages, unless
          you know exactly why you do not need them. This is now also the
          default for APT unless configured otherwise. Conversely, it is not
          necessary to install “suggested” packages unless you know why you
          need them (the package description or its documentation may contain
          information which extra functionality they will activate).
          The behavior of <command>apt</command> can be controlled
          by using the <literal>APT::Install-Recommends</literal> and
          <literal>APT::Install-Suggests</literal> configuration options or the
          corresponding command line options
          <literal>--[no-]install-recommends</literal> and
          <literal>--[no-]install-suggests</literal>.</para>

          <indexterm><primary>package</primary><secondary>enhancements</secondary></indexterm>
          <indexterm><primary><filename>control</filename></primary><secondary><literal>Enhances</literal>, header field</secondary></indexterm>

          <para>The <literal>Enhances</literal> field also describes a
          suggestion, but in a different context. It is indeed located in
          the suggested package, and not in the package that benefits from
          the suggestion. Its interest lies in that it is possible to add a
          suggestion without having to modify the package that is
          concerned. Thus, all add-ons, plug-ins, and other extensions of a
          program can then appear in the list of suggestions related to
          the software. Although it has existed for several years, this
          last field is still largely ignored by programs such as
          <command>apt</command> or <command>synaptic</command>. Its
          purpose is for a suggestion made by the
          <literal>Enhances</literal> field to appear to the user in
          addition to the traditional suggestions — found in the
          <literal>Suggests</literal> field.</para>
        </sidebar>

        <sidebar>
          <title><emphasis>DEBIAN POLICY</emphasis> <literal>Pre-Depends</literal>, a more demanding <literal>Depends</literal> </title>
          <indexterm><primary>package</primary><secondary>pre-dependency</secondary></indexterm>
          <indexterm><primary>pre-dependency</primary></indexterm>
          <indexterm><primary><filename>control</filename></primary><secondary><literal>Pre-Depends</literal>, header field</secondary></indexterm>

          <para>“Pre-dependencies”, which are listed in the
          “<literal>Pre-Depends</literal>” field in the package
          headers, complete the normal dependencies; their syntax is
          identical. A normal dependency indicates that the package in
          question must be unpacked and configured before configuration of the package
          declaring the dependency. A pre-dependency stipulates that the
          package in question must be unpacked and configured before
          execution of the pre-installation script of the package declaring
          the pre-dependency, that is before its installation.</para>

          <indexterm><primary>mailing lists</primary><secondary><email>debian-devel@lists.debian.org</email></secondary></indexterm>

          <para>A pre-dependency is very demanding for
          <command>apt</command>, because it adds a strict constraint on
          the ordering of the packages to install. As such,
          pre-dependencies are discouraged unless absolutely necessary. It
          is even recommended to consult other developers on
          <email>debian-devel@lists.debian.org</email> before adding a
          pre-dependency. It is generally possible to find another solution
          as a workaround.</para>
        </sidebar>
      </section>

      <section>
        <title>Conflicts: the <literal>Conflicts</literal> field</title>
        <indexterm><primary>conflicts</primary></indexterm>
        <indexterm><primary>package</primary><secondary>conflict</secondary></indexterm>
        <indexterm><primary><filename>control</filename></primary><secondary><literal>Conflicts</literal>, header field</secondary></indexterm>

        <para>The <literal>Conflicts</literal> field indicates when a
        package cannot be installed simultaneously with another. The most
        common reasons for this are that both packages include a file
        of the same name and path, or provide the same service on the same
        TCP port, or would hinder each other's operation.</para>

        <para><command>dpkg</command> will refuse to install a package if
        it triggers a conflict with an already installed package, except if
        the new package specifies that it will “replace” the installed
        package, in which case <command>dpkg</command> will choose to
        replace the old package with the new one.
        <command>apt</command> always follows your instructions: if you
        choose to install a new package, it will automatically offer to
        uninstall the package that poses a problem.</para>
      </section>

      <section>
        <title>Incompatibilities: the <literal>Breaks</literal> Field</title>
        <indexterm><primary>incompatibilities</primary></indexterm>
        <indexterm><primary>package</primary><secondary>incompatibility</secondary></indexterm>
        <indexterm><primary><filename>control</filename></primary><secondary><literal>Breaks</literal>, header field</secondary></indexterm>

        <para>The <literal>Breaks</literal> field has an effect similar to
        that of the <literal>Conflicts</literal> field, but with a special
        meaning. It signals that the installation of a package will
        “break” another package (or particular versions of it). In
        general, this incompatibility between two packages is transitory,
        and the <literal>Breaks</literal> relationship specifically refers
        to the incompatible versions.</para>

        <para><command>dpkg</command> will refuse to install a package that
        breaks an already installed package, and <command>apt</command>
        will try to resolve the problem by updating the package that would
        be broken to a newer version (which is assumed to be fixed and,
        thus, compatible again).</para>

        <para>This type of situation may occur in the case of updates
        without backwards compatibility: this is the case if the new
        version no longer functions with the older version, and causes a
        malfunction in another program without making special provisions.
        The <literal>Breaks</literal> field prevents the user from running
        into these problems.</para>
      </section>

      <section>
        <title>Provided Items: the <literal>Provides</literal> Field</title>
        <indexterm><primary><filename>control</filename></primary><secondary><literal>Provides</literal>, header field</secondary></indexterm>

        <para>This field introduces the very interesting concept of a
        “virtual package”. It has many roles, but two are of particular
        importance. The first role consists in using a virtual package to
        associate a generic service with it (the package “provides” the
        service). The second indicates that a package completely replaces
        another, and that for this purpose it can also satisfy the
        dependencies that the other would satisfy. It is thus possible to
        create a substitution package without having to use the same
        package name.</para>

        <sidebar>
          <title><emphasis>VOCABULARY</emphasis> Meta-package and virtual package</title>
          <indexterm><primary>meta-package</primary></indexterm>
          <indexterm><primary>package</primary><secondary>virtual package</secondary></indexterm>
          <indexterm><primary>package</primary><secondary>meta-package</secondary></indexterm>
          <indexterm><primary>virtual package</primary></indexterm>

          <para>It is essential to clearly distinguish meta-packages from
          virtual packages. The former are real packages (including real
          <filename>.deb</filename> files), whose only purpose is to
          express dependencies.</para>

          <para>Virtual packages, however, do not exist physically; they
          are only a means of identifying real packages based on common,
          logical criteria (service provided, compatibility with a standard
          program or a pre-existing package, etc.).</para>
        </sidebar>

        <section>
          <title>Providing a “Service”</title>

          <para>Let us discuss the first case in greater detail with
          an example: all mail servers, such as <emphasis
          role="pkg">postfix</emphasis> or <emphasis
          role="pkg">sendmail</emphasis> are said to “provide” the
          <emphasis role="pkg">mail-transport-agent</emphasis> virtual
          package. Thus, any package that needs this service to be
          functional (e.g. a mailing list manager, such as <emphasis
          role="pkg">smartlist</emphasis> or <emphasis
          role="pkg">sympa</emphasis>) simply states in its
          dependencies that it requires a <emphasis
          role="pkg">mail-transport-agent</emphasis> instead of
          specifying a large yet incomplete list of possible solutions
          (e.g. <command>postfix | sendmail | exim4 | …</command>).
          Furthermore, it is useless to install two mail
          servers on the same machine, which is why each of these
          packages declares a conflict with the <emphasis
          role="pkg">mail-transport-agent</emphasis> virtual
          package. A conflict between a package and itself is ignored
          by the system, but this technique will prohibit the
          installation of two mail servers side by side.</para>

          <sidebar>
            <title><emphasis>DEBIAN POLICY</emphasis> List of virtual packages</title>
            <indexterm><primary>package</primary><secondary>virtual package</secondary></indexterm>

            <para>For virtual packages to be useful, everyone must agree on
            their name. This is why they are standardized in the Debian
            Policy. The list includes among others <emphasis
            role="pkg">mail-transport-agent</emphasis> for mail servers,
            <emphasis role="pkg">c-compiler</emphasis> for C programming
            language compilers, <emphasis role="pkg">www-browser</emphasis>
            for web browsers, <emphasis role="pkg">httpd</emphasis> for web
            servers, <emphasis role="pkg">ftp-server</emphasis> for FTP
            servers, <emphasis role="pkg">x-terminal-emulator</emphasis>
            for terminal emulators in graphical mode
            (<command>xterm</command>), and <emphasis
            role="pkg">x-window-manager</emphasis> for window
            managers.</para>

            <para>The full list can be found on the Web.
            <ulink type="block" url="https://www.debian.org/doc/packaging-manuals/virtual-package-names-list.yaml"/>
            </para>
          </sidebar>
        </section>

        <section>
          <title>Interchangeability with Another Package</title>

          <!-- MAYCHANGE: perl version and stable release name -->
          <para>The <literal>Provides</literal> field is also interesting
          when the content of a package is included in a larger package.
          For example, the <emphasis
          role="pkg">libdigest-md5-perl</emphasis> Perl module was an
          optional module in Perl 5.6, and has been integrated as standard
          in Perl 5.8 (and later versions, such as 5.32.1 present in
          <emphasis role="distribution">Bullseye</emphasis>). As such, the
          package <emphasis role="pkg">perl</emphasis> has since version
          5.8 declared <literal>Provides: libdigest-md5-perl</literal> so
          that the dependencies on this package are met if the user has
          Perl 5.8 (or newer). The <emphasis
          role="pkg">libdigest-md5-perl</emphasis> package itself has
          eventually been deleted, since it no longer had any purpose when
          old Perl versions were removed.</para>

          <figure>
            <title>Use of a <literal>Provides</literal> field in order to not break dependencies</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="images/virtual-package.png" width="50%"/>
              </imageobject>
            </mediaobject>
          </figure>

          <para>This feature is very useful, since it is never possible to
          anticipate the vagaries of development, and it is necessary to be
          able to adjust to renaming, and other automatic replacement, of
          obsolete software.</para>

          <sidebar>
            <title><emphasis>BACK TO BASICS</emphasis> Perl, a programming language</title>
            <indexterm><primary>Perl</primary></indexterm>
            <indexterm><primary>CPAN</primary><seealso>Comprehensive Perl Archive Network</seealso></indexterm>
            <indexterm><primary>Comprehensive Perl Archive Network</primary></indexterm>

            <para>Perl (Practical Extraction and Report Language) is a very
            popular programming language. It has many ready-to-use modules that
            cover a vast spectrum of applications, and that are distributed by
            the <acronym>CPAN</acronym> (Comprehensive Perl Archive Network)
            servers, an exhaustive network of Perl packages.
            <ulink type="block" url="https://www.perl.org/"/>
            <ulink type="block" url="https://www.cpan.org/"/></para>

            <para>Since it is an interpreted language, a program written in
            Perl does not require compilation prior to execution. This is
            why they are called “Perl scripts”.</para>
          </sidebar>
        </section>

        <section>
          <title>Past Limitations</title>

          <para>Virtual packages used to suffer from some limitations,
          the most significant of which was the absence of a version
          number. To return to the previous example, a dependency such
          as <literal>Depends: libdigest-md5-perl (&gt;=
          1.6)</literal>, despite the presence of Perl 5.10, would
          have never been considered as satisfied by the packaging system —
          while in fact it most likely was satisfied. Unaware of this,
          the package system chose the least risky option, assuming
          that the versions do not match.</para>

          <!-- MAYCHANGE: Perl and libdigest-md5-perl version -->

          <para>This limitation has been lifted in <emphasis
          role="pkg">dpkg</emphasis> 1.17.11, and is no longer relevant.
          Packages, like <emphasis role="pkg">perl</emphasis> 5.32.1, can
          assign a version to the virtual packages they provide, such as
          <literal>Provides: libdigest-md5-perl (= 2.55.01)</literal>, and thus
          allow other packages to use versioned dependencies.</para>
        </section>
      </section>

      <section>
        <title>Replacing Files: The <literal>Replaces</literal> Field</title>
        <indexterm><primary>replacement</primary></indexterm>
        <indexterm><primary>package</primary><secondary>replacement</secondary></indexterm>
        <indexterm><primary><filename>control</filename></primary><secondary><literal>Replaces</literal>, header field</secondary></indexterm>

        <para>The <literal>Replaces</literal> field indicates that the
        package contains files that are also present in another
        package, but that the package is legitimately entitled to
        replace them.  Without this specification,
        <command>dpkg</command> fails to install the package, stating that it cannot
        overwrite the files of another package (technically, it is
        possible to force it to do so with the
        <literal>--force-overwrite</literal> option, but that is not
        considered standard operation). This allows identification of
        potential problems and requires the maintainer to study the
        matter prior to choosing whether to add such a field.</para>

        <para>The use of this field is justified when package names change
        or when a package is included in another. This also happens when
        the maintainer decides to distribute files differently among
        various binary packages produced from the same source package: a
        replaced file no longer belongs to the old package, but only to the
        new one.</para>

        <para>If all of the files in an installed package have been
        replaced, the package is considered to be removed. Finally, this
        field also encourages <command>dpkg</command> to remove the
        replaced package where there is a conflict.</para>

        <sidebar id="sidebar.debtags">
          <title><emphasis>GOING FURTHER</emphasis> The <literal>Tag</literal> field</title>
          <indexterm><primary><filename>control</filename></primary><secondary><literal>Tag</literal></secondary></indexterm>

          <para>In the <emphasis role="pkg">apt</emphasis> example at the
          beginning, we can see the presence of a field that we have not yet
          described, the <literal>Tag</literal> field. This field does not
          describe a relationship between packages, but is simply a way of
          categorizing a package in a thematic taxonomy. This
          classification of packages according to several criteria (type of
          interface, programming language, domain of application, etc.) has
          been available for a long time. Despite this, not all packages have
          accurate tags and it is not yet
          integrated in all Debian tools; <command>aptitude</command>
          displays these tags, and allows them to be used as search
          criteria. For those who dislike
          <command>aptitude</command>'s search criteria, the following website
          allows navigation of the tag database:
          <ulink type="block" url="https://wiki.debian.org/Debtags"/>
          </para>
        </sidebar>
      </section>
    </section>

    <section id="sect.configuration-scripts">
      <title>Configuration Scripts</title>
      <indexterm><primary><filename>postinst</filename></primary></indexterm>
      <indexterm><primary><filename>preinst</filename></primary></indexterm>
      <indexterm><primary><filename>postrm</filename></primary></indexterm>
      <indexterm><primary><filename>prerm</filename></primary></indexterm>
      <indexterm><primary><filename>control.tar.gz</filename></primary></indexterm>

      <para>In addition to the <filename>control</filename> file, the
      <filename>control.tar.gz</filename> archive for each Debian package may
      contain a number of scripts, called by <command>dpkg</command> at
      different stages in the processing of a package. The Debian Policy
      describes the possible cases in detail, specifying the scripts called and
      the arguments that they receive. These sequences may be complicated,
      since if one of the scripts fails, <command>dpkg</command> will try to
      return to a satisfactory state by canceling the installation or removal
      in progress (insofar as it is possible).  <ulink type="block"
      url="https://www.debian.org/doc/debian-policy/ch-maintainerscripts.html"/></para>

      <sidebar id="sidebar.dpkg-database">
        <title><emphasis>GOING FURTHER</emphasis> <command>dpkg</command>'s database</title>
        <indexterm><primary><filename>/var</filename></primary><secondary><filename>/var/lib/dpkg/</filename></secondary><seealso>dpkg</seealso></indexterm>
        <indexterm><primary>dpkg</primary><secondary>database</secondary></indexterm>
        <indexterm><primary>database</primary><secondary>dpkg</secondary></indexterm>

        <para>All of the configuration scripts for installed packages are
        stored in the <filename>/var/lib/dpkg/info/</filename> directory,
        in the form of a file prefixed with the package's name. This
        directory also includes a file with the <filename>.list</filename>
        extension for each package, containing the list of files that
        belong to that package.</para>

        <para>The <filename>/var/lib/dpkg/status</filename> file contains a
        series of data blocks (in the format of the famous mail headers,
        RFC 2822) describing the status of each package. The information
        from the <filename>control</filename> file of the installed
        packages is also replicated there.</para>
      </sidebar>

      <para>In general, the <filename>preinst</filename> script is executed
      prior to installation of the package, while
      <filename>postinst</filename> follows it. Likewise,
      <filename>prerm</filename> is invoked before removal of a package and
      <filename>postrm</filename> afterwards. An update of a package is
      equivalent to removal of the previous version and installation of the
      new one. It is not possible to describe in detail all the possible
      scenarios here, but we will discuss the most common two: an
      installation/update and a removal.</para>

      <sidebar>
        <title><emphasis>CAUTION</emphasis> Symbolic names of the scripts</title>

        <para>The sequences described in this section call configuration
        scripts by specific names, such as <command>old-prerm</command> or
        <command>new-postinst</command>. They are, respectively, the
        <command>prerm</command> script contained in the old version of the
        package (installed before the update) and the
        <command>postinst</command> script contained in the new version
        (installed by the update).</para>
      </sidebar>

      <sidebar>
        <title><emphasis>TIP</emphasis> State diagrams</title>

        <para>Manoj Srivastava and Margarita Manterola made the following
        diagrams explaining how the configuration scripts are called by
        <command>dpkg</command>.
        <ulink type="block"
        url="https://people.debian.org/~srivasta/MaintainerScripts.html"/>
        <ulink type="block"
        url="https://www.debian.org/doc/debian-policy/ap-flowcharts.html"/></para>
      </sidebar>

      <section>
        <title>Installation and Upgrade</title>
        <indexterm><primary><command>dpkg</command></primary><secondary>internal operation</secondary></indexterm>
        <indexterm><primary>package</primary><secondary>installation</secondary></indexterm>

        <para>During the initial installation and for each upgrade of a package,
        <command>dpkg</command> calls the so called <emphasis>maintainer scripts</emphasis> such as the
        <command>prerm</command> or <command>preinst</command> scripts. These
        scripts can perform additional actions during the different stages of
        a package's life-cycle. Script names preceded by <literal>new-</literal>
        are the scripts from the new version of a package being installed or
        upgraded to. Script names preceded by <literal>old-</literal> are
        the scripts from the old version of a package that is being upgraded
        from.</para>

        <para>During each invocation <command>dpkg</command> will pass certain
        arguments to each script such as <command>upgrade
        <replaceable>new-version</replaceable></command>. The invoked script can
        then either handle the arguments and perform a particular action, or
        ignore the arguments and return with an exit code of <literal>0</literal>,
        if nothing needs to be done during that step. In practice many packages
        will not need to perform an action during every step in the life cycle.
        Thus a typical configuration script will check for a particular argument
        and ignore all other ones, implicitly returning with exit code
        <literal>0</literal>.</para>

        <para>Here is what happens during an installation (or an update). The
        <replaceable>old-version</replaceable>,
        <replaceable>new-version</replaceable> and
        <replaceable>last-version-configured</replaceable> arguments are
        placeholders for the actual (old and new) version numbers of the
        package:</para>
        <orderedlist>
          <listitem>
            <para>For an update, <command>dpkg</command> calls the
            <command>old-prerm</command> script and passes
            <command>upgrade <replaceable>new-version</replaceable></command>
            as arguments.</para>
          </listitem>
          <listitem>
            <para>Still for an update, <command>dpkg</command> then
            executes the <command>new-preinst</command> script with the arguments
            <command>upgrade <replaceable>old-version</replaceable></command>; for the
            initial installation, it executes the <command>new-preinst</command> script
            and passes <command>install</command> as argument.
            It may add the old version in the last
            parameter, if the package has already been installed and
            removed since (but not purged, and thus configuration files have
            been retained).</para>
          </listitem>
          <listitem>
            <para>The new package files are then unpacked. If a file
            already exists, it is replaced, but a backup copy is
            temporarily made.</para>
          </listitem>
          <listitem>
            <para>For an update, <command>dpkg</command> executes the
            <command>old-postrm</command> script and passes <command>upgrade
            <replaceable>new-version</replaceable></command> as arguments.</para>
          </listitem>
          <listitem>
            <para><command>dpkg</command> updates all of the internal data
            (file list, configuration scripts, etc.) and removes the
            backups of the replaced files. This is the point of no return:
            <command>dpkg</command> no longer has access to all of the
            elements necessary to return to the previous state.</para>
          </listitem>
          <listitem>
            <para><command>dpkg</command> will update the configuration
            files, asking the user to decide if it is unable to
            automatically manage this task. The details of this procedure
            are discussed in <xref linkend="sect.conffiles"/>.</para>
          </listitem>
          <listitem>
            <para>Finally, <command>dpkg</command> configures the package
            by executing the <command>new-postinst</command> script with the arguments
            <command>configure
            <replaceable>last-version-configured</replaceable></command>.</para>
          </listitem>
        </orderedlist>
      </section>

      <section>
        <title>Package Removal</title>
        <indexterm><primary>package</primary><secondary>removal</secondary></indexterm>

        <para>The steps to remove a package are analogous to the installation steps.
        The main difference is that the removal scripts of the package are called:</para>
        <orderedlist>
          <listitem>
            <para><command>dpkg</command> calls the <command>prerm</command> script
            and passes the <command>remove</command> argument.</para>
          </listitem>
          <listitem>
            <para><command>dpkg</command> removes all of the package's
            files, with the exception of the configuration files and
            maintainer scripts.</para>
          </listitem>
          <listitem>
            <para><command>dpkg</command> executes the <command>postrm</command>
            script and passes <command>remove</command> as argument.
            Afterwards, all of the maintainer scripts, except the
            <filename>postrm</filename> script, are removed. If the user has not
            used the “purge” option, the process stops here.</para>
          </listitem>
          <listitem>
            <para>For a complete purge of the package (command issued with
            <command>dpkg --purge</command> or <command>dpkg -P</command>),
            the configuration files are also deleted, as well as a certain
            number of copies (<filename>*.dpkg-tmp</filename>,
            <filename>*.dpkg-old</filename>,
            <filename>*.dpkg-new</filename>) and temporary files;
            <command>dpkg</command> then executes the <command>postrm</command> script
            and passes <command>purge</command> as argument.</para>
          </listitem>
        </orderedlist>

        <sidebar id="sidebar.purge">
          <title><emphasis>VOCABULARY</emphasis> Purge, a complete removal</title>
          <indexterm><primary>purging a package</primary></indexterm>
          <indexterm><primary>package</primary><secondary>purge</secondary></indexterm>

          <para>When a Debian package is removed, the configuration files
          are retained in order to facilitate possible re-installation.
          Likewise, the data generated by a daemon (such as the content of
          an LDAP server directory, or the content of a database for an SQL
          server) are usually retained.</para>

          <para>To remove all data associated with a package, it is
          necessary to “purge” the package with the command,
          <command>dpkg -P <replaceable>package</replaceable></command>,
          <command>apt-get remove --purge
          <replaceable>package</replaceable></command> or <command>aptitude
          purge <replaceable>package</replaceable></command>.</para>

          <para>Given the definitive nature of such data removals, a
          purge should not be taken lightly.</para>
        </sidebar>

        <indexterm><primary><filename>config</filename>, <command>debconf</command> script</primary></indexterm>

        <para>The four scripts detailed above are complemented by a
        <filename>config</filename> script, provided by packages using
        <command>debconf</command> to acquire information from the user for
        configuration. During installation, this script defines in detail
        the questions asked by <command>debconf</command>. The responses
        are recorded in the <command>debconf</command> database for future
        reference. The script is generally executed by
        <command>apt</command> prior to installing packages one by one in
        order to group all the questions and ask them all to the user at
        the beginning of the process. The pre- and post-installation
        scripts can then use this information to operate according to the
        user's wishes.</para>

        <sidebar>
          <title><emphasis>TOOL</emphasis> <command>debconf</command></title>
          <indexterm><primary><command>debconf</command></primary></indexterm>

          <para><command>debconf</command> was created to resolve a
          recurring problem in Debian. All Debian packages unable to
          function without a minimum of configuration used to ask questions
          with calls to the <command>echo</command> and
          <command>read</command> commands in <filename>postinst</filename>
          shell scripts (and other similar scripts). But this also
          means that during a large installation or update the user must
          stay with their computer to respond to various questions that may
          arise at any time. These manual interactions have now been almost
          entirely dispensed with, thanks to the <command>debconf</command>
          tool.</para>

          <para><command>debconf</command> has many interesting features:
          it requires the developer to specify user interaction; it allows
          localization of all the strings displayed to users (all
          translations are stored in the <filename>templates</filename>
          file describing the interactions); it has different frontends
          to display the questions to the user (text mode,
          graphical mode, non-interactive); and it allows creation of a
          central database of responses to share the same configuration
          with several computers... but the most important is that it is
          now possible to present all of the questions in a row to the user,
          prior to starting a long installation or update process. The
          user can go about their business while the system handles the
          installation on its own, without having to stay there staring at
          the screen waiting for questions.</para>
        </sidebar>
      </section>
    </section>

    <section id="sect.conffiles">
      <title>Checksums, List of Configuration Files, et al.</title>
      <indexterm><primary><filename>md5sums</filename></primary></indexterm>
      <indexterm><primary><filename>conffiles</filename></primary></indexterm>
      <indexterm><primary><filename>triggers</filename></primary></indexterm>
      <indexterm><primary>checksums</primary></indexterm>
      <indexterm><primary>file</primary><secondary>configuration file</secondary><seealso><filename>/etc/</filename></seealso></indexterm>
      <indexterm><primary>configuration</primary><secondary>configuration files</secondary><seealso><filename>/etc</filename></seealso></indexterm>

      <para>In addition to the maintainer scripts and control data already
      mentioned in the previous sections, the
      <filename>control.tar.gz</filename> archive of a Debian package may
      contain other interesting files.</para>

      <para>The first, <filename>md5sums</filename>,
      contains the MD5 checksums for all of the package's files. Its main
      advantage is that it allows <command>dpkg --verify</command> (which we
      will study in <xref linkend="sect.dpkg-verify"/>) and
      <command>debsums</command> (from the package of the same name; see <xref
      linkend="sect.debsums"/>) to check if these files have been modified
      since their installation. Note that when this file doesn't exist, which
      might be the case for some older packages, <command>dpkg</command> will
      generate it dynamically at installation time (and store it in the dpkg
      database just like other control files).</para>

      <para>The file <filename>conffiles</filename> lists package files that
      must be handled as configuration files (see also
      <citerefentry><refentrytitle>deb-conffiles</refentrytitle><manvolnum>5</manvolnum></citerefentry>).
      Configuration files can be modified by the administrator, and
      <command>dpkg</command> will try to preserve those changes during a
      package update.</para>

      <para>In effect, in this situation, <command>dpkg</command> behaves
      as intelligently as possible: if the standard configuration file has
      not changed between the two versions, it does nothing. If, however,
      the file has changed, it will try to update this file. Two cases are
      possible: either the administrator has not touched this configuration
      file, in which case <command>dpkg</command> automatically installs
      the new version; or the file has been modified, in which case
      <command>dpkg</command> asks the administrator which version they
      wish to use (the old one with modifications, or the new one provided
      with the package). To assist in making this decision,
      <command>dpkg</command> offers to display a
      “<command>diff</command>” that shows the difference between the
      two versions. If the user chooses to retain the old version, the new
      one will be stored in the same location in a file with the
      <filename>.dpkg-dist</filename> suffix. If the user chooses the new
      version, the old one is retained in a file with the
      <filename>.dpkg-old</filename> suffix. Another available action
      consists of momentarily interrupting <command>dpkg</command> to edit
      the file and attempt to re-instate the relevant modifications
      (previously identified with <command>diff</command>).</para>

      <sidebar id="sidebar.questions-conffiles-bis">
        <title><emphasis>GOING FURTHER</emphasis> Force dpkg to ask configuration file questions</title>
        <indexterm><primary><command>dpkg</command></primary><secondary><command>--force-confask</command></secondary></indexterm>

        <para>The <command>--force-confask</command> option requires
        <command>dpkg</command> to display the questions about the
        configuration files, even in cases where they would not normally be
        necessary. Thus, when reinstalling a package with this option,
        <command>dpkg</command> will ask the questions again for all of the
        configuration files modified or deleted by the administrator. This is
        very convenient, especially for reinstalling the original configuration
        file if it has been deleted and no other copy is available: a normal
        re-installation won't work, because <command>dpkg</command> considers
        removal as a form of legitimate modification, and, thus, doesn't
        install the desired configuration file.</para>

        <para>See the sidebar <xref linkend="sidebar.questions-conffiles"/> for
        how to use these options with <literal>APT</literal>.</para>
      </sidebar>

      <sidebar id="sidebar.questions-conffiles">
        <title><emphasis>GOING FURTHER</emphasis> Avoiding the configuration file questions</title>
        <indexterm><primary><command>dpkg</command></primary><secondary><command>--force-confnew</command></secondary></indexterm>
        <indexterm><primary><command>dpkg</command></primary><secondary><command>--force-confold</command></secondary></indexterm>
        <indexterm><primary><command>dpkg</command></primary><secondary><command>--force-confdef</command></secondary></indexterm>

        <para><command>dpkg</command> handles configuration file updates,
        but, while doing so, regularly interrupts its work to ask for input from the
        administrator. This makes it less than enjoyable for those who wish
        to run updates in a non-interactive manner. This is why this
        program offers options that allow the system to respond
        automatically according to the same logic:
        <command>--force-confold</command> retains the old version of the
        file; <command>--force-confnew</command> will use the new version of
        the file (these choices are respected, even if the file has not
        been changed by the administrator, which only rarely has the
        desired effect). Adding the <command>--force-confdef</command>
        option tells <command>dpkg</command> to decide by itself when
        possible (in other words, when the original
        configuration file has not been touched), and only uses
        <command>--force-confnew</command> or
        <command>--force-confold</command> for other cases.</para>

        <indexterm><primary>APT</primary><secondary><literal>Dpkg::Options</literal></secondary></indexterm>

        <para>These options apply to <command>dpkg</command> and are explained
        in detail in
        <citerefentry><refentrytitle>dpkg</refentrytitle><manvolnum>1</manvolnum></citerefentry>
        or <command>dpkg --force-help</command>, but most of the time the
        administrator will work directly with the <command>aptitude</command>
        or <command>apt</command> programs.  It is, thus, necessary to know
        the syntax used to indicate the options to pass to the
        <command>dpkg</command> command (their command line interfaces are very
        similar).</para>

        <screen>
<computeroutput># </computeroutput><userinput>apt -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" full-upgrade</userinput>
</screen>

        <para>These options can also be stored directly in <command>apt</command>'s
        configuration. To do so, simply write the following lines
        in the <filename>/etc/apt/apt.conf.d/local</filename> file:</para>
        <informalexample>
          <programlisting>
Dpkg::Options {
  "--force-confdef";
  "--force-confold";
}
</programlisting>
        </informalexample>

        <para>Including this option in the configuration file means that it
        will also be used in a graphical interface such as
        <command>aptitude</command>.</para>
      </sidebar>

      <para>The control archive frequently contains other files as well, like
      <filename>triggers</filename>, <filename>shlibs</filename>, or
      <filename>symbols</filename>. These files are well described in
      <citerefentry><refentrytitle>deb-triggers</refentrytitle><manvolnum>5</manvolnum></citerefentry>,
      <citerefentry><refentrytitle>deb-shlibs</refentrytitle><manvolnum>5</manvolnum></citerefentry>,
      and
      <citerefentry><refentrytitle>deb-symbols</refentrytitle><manvolnum>5</manvolnum></citerefentry>.
      </para>

      <para>Triggers were introduced to reduce the amount of duplicated events
      during package installation, such as file registration or
      catalog/database update tasks. Packages can define their own or activate
      defined triggers. A more comprehensive documentation can be found in
      <ulink
      url="https://git.dpkg.org/cgit/dpkg/dpkg.git/tree/doc/triggers.txt"
      ><filename>/usr/share/doc/dpkg/triggers.txt.gz</filename></ulink>.</para>

      <para>The <filename>shlibs</filename> system is an older and simpler
      alternative to the <filename>symbols</filename> system for declaring
      dependencies for shared libraries. It defines the package name and
      version in which to find a specific SONAME-version of a shared library.
      The newer <filename>symbols</filename> system allows to define the
      dependency by tracking the symbols and when they have been introduced
      or changed in the library instead.</para>
    </section>
  </section>

  <section id="sect.source-package-structure">
    <title>Structure of a Source Package</title>
    <indexterm><primary>package</primary><secondary>source package</secondary></indexterm>
    <indexterm><primary>source package</primary></indexterm>

    <section>
      <title>Format</title>
      <indexterm><primary>DSC file</primary></indexterm>
      <indexterm><primary><filename>.dsc</filename></primary></indexterm>
      <indexterm><primary><filename>.diff.gz</filename></primary></indexterm>
      <indexterm><primary><filename>.debian.tar.gz</filename></primary></indexterm>
      <indexterm><primary><filename>.debian.tar.xz</filename></primary></indexterm>
      <indexterm><primary><filename>.orig.tar.bz2</filename></primary></indexterm>
      <indexterm><primary><filename>.orig.tar.gz</filename></primary></indexterm>
      <indexterm><primary><filename>.orig.tar.xz</filename></primary></indexterm>
      <indexterm><primary><filename>.dsc</filename></primary></indexterm>
      <indexterm><primary>Debian Source Control</primary><see><filename>.dsc</filename></see></indexterm>

      <para>A source package is usually comprised of three files, a
      <filename>.dsc</filename>, a <filename>.orig.tar.gz</filename>, and a
      <filename>.debian.tar.xz</filename> (or <filename>.diff.gz</filename>).
      They allow creation of binary packages (<filename>.deb</filename>
      files described above) from the source code files of the program,
      which are written in a programming language.</para>

      <para>The <filename>.dsc</filename> (Debian Source Control) file is a
      short text file containing an RFC 2822 header (just like the
      <filename>control</filename> file studied in <xref
      linkend="sect.control"/>) which describes the source package and
      indicates which other files are part thereof. It is signed by its
      maintainer, which guarantees authenticity. See <xref
      linkend="sect.package-authentication"/> for further details on this
      subject.</para>

      <example>
        <title>A <filename>.dsc</filename> file</title>

        <!-- MAYCHANGE: contents of .dsc file-->
        <programlisting><![CDATA[
-----BEGIN PGP SIGNED MESSAGE-----
Hash: SHA512

Format: 3.0 (quilt)
Source: zim
Binary: zim
Architecture: all
Version: 0.73.5-1
Maintainer: Zim Package Maintainers <zim@packages.debian.org>
Uploaders: Raphaël Hertzog <hertzog@debian.org>
Homepage: https://zim-wiki.org
Standards-Version: 4.5.1
Vcs-Browser: https://salsa.debian.org/debian/zim
Vcs-Git: https://salsa.debian.org/debian/zim.git
Build-Depends: debhelper-compat (= 13), python3, python3-gi, python3-xdg, gir1.2-gtk-3.0, dh-python
Package-List:
 zim deb x11 optional arch=all
Checksums-Sha1:
 80d43d5c1c6a47c695079eb02bc8ad36b84d6e57 2159901 zim_0.73.5.orig.tar.gz
 b1cd86dc4819a80126efbf6ee6eba17a33f451d3 10124 zim_0.73.5-1.debian.tar.xz
Checksums-Sha256:
 a36f15d92c3994c0d55b07f83253b3d8b826beb3714865edbabc14f1cc91d63a 2159901 zim_0.73.5.orig.tar.gz
 6c2db642d9ac1c2440ed08e0cd584006045b342b255f37ffe42bd5459fb5cb76 10124 zim_0.73.5-1.debian.tar.xz
Files:
 fa76ceb8ac7d7354fb0e2bc5607e9faa 2159901 zim_0.73.5.orig.tar.gz
 a0c824d979efb196cde0176d3cb9c719 10124 zim_0.73.5-1.debian.tar.xz

-----BEGIN PGP SIGNATURE-----
Comment: Signed by Raphael Hertzog

iQEzBAEBCgAdFiEE1823g1EQnhJ1LsbSA4gdq+vCmrkFAmAa3ooACgkQA4gdq+vC
mrkq1gf/cs7irmbCSDrADVqsqYBrFJ1FyprE3jiHLNs0OQLryhFj9tzDuilX35VE
HkCfxSaKkzgvQLYtpuw1VBfhOdngTdHO39U6eljkaScnfLWU8Z5n/q+YeedxItoY
X3TtzMexFmb4WJqlylfjbXeqbLdYvsILQ3NVnE48AzkaBQlCC2d9bqecZhWiKfzq
gNxIDVDDhqCXMPe7QCErCBiFPUVpGN7b+6QWN0RxOTLZdj/slRD73rT++VmY+xN1
L8BSLcjXie+ES11MhQNYaLpCv2vqImlZaxkFWvsKBo9ndRFSbE3/RNK479a4KGve
KrdpGUJXy9uLPuAMyn5WphwXJ7OZXQ==
=YFDk
-----END PGP SIGNATURE-----
]]></programlisting>
      </example>

      <indexterm><primary>package</primary><secondary>build dependencies</secondary></indexterm>
      <indexterm><primary><filename>.dsc</filename></primary><secondary><literal>Build-Depends</literal>, header field</secondary></indexterm>

      <para>Note that the source package also has dependencies
      (<literal>Build-Depends</literal>) completely distinct from those of
      binary packages, since they indicate tools required to compile the
      software in question and construct its binary package.</para>

      <sidebar>
        <title><emphasis>CAUTION</emphasis> Distinct namespaces</title>
        <indexterm><primary><filename>.dsc</filename></primary><secondary><literal>Source</literal>, header field</secondary></indexterm>
        <indexterm><primary><filename>.dsc</filename></primary><secondary><literal>Binary</literal>, header field</secondary></indexterm>
        <indexterm><primary>APT</primary><secondary><filename>.dsc</filename></secondary><see><filename>.dsc</filename></see></indexterm>

        <para>It is important to note here that there is no required
        correspondence between the name of the source package and that of
        the binary package(s) that it generates. It is easy enough to
        understand if you know that each source package may generate
        several binary packages. This is why the <filename>.dsc</filename>
        file has the <literal>Source</literal> and
        <literal>Binary</literal> fields to explicitly name the source package and
        store the list of binary packages that it generates.</para>
      </sidebar>

      <sidebar>
        <title><emphasis>CULTURE</emphasis> Why divide into several packages</title>

        <para>Quite frequently, a source package (for a given software)
        can generate several binary packages. The split is justified by
        the possibility to use (parts of) the software in different contexts.
        Consider a
        shared library, it may be installed to make an application work (for
        example, <emphasis role="pkg">libc6</emphasis>), or it can be
        installed to develop a new program (<emphasis
        role="pkg">libc6-dev</emphasis> will then be the correct package).
        We find the same logic for client/server services where we want to
        install the server part on one machine and the client part on
        others (this is the case, for example, of <emphasis
        role="pkg">openssh-server</emphasis> and <emphasis
        role="pkg">openssh-client</emphasis>).</para>

        <para>Just as frequently, the documentation is provided in a
        dedicated package: the user may install it independently from the
        software, and may at any time choose to remove it to save disk
        space. Additionally, this also saves disk space on the Debian
        mirrors, since the documentation package will be shared among all
        of the architectures (instead of having the documentation
        duplicated in the packages for each architecture).</para>
      </sidebar>

      <sidebar>
        <title><emphasis>PERSPECTIVE</emphasis> Different source package formats</title>
        <indexterm><primary>source package</primary><secondary>format</secondary></indexterm>
        <indexterm><primary><command>quilt</command></primary></indexterm>

        <para>Originally there was only one source package format. This is
        the <literal>1.0</literal> format, which associates an
        <filename>.orig.tar.gz</filename> archive to a
        <filename>.diff.gz</filename> “debianization” patch (there is
        also a variant, consisting of a single <filename>.tar.gz</filename>
        archive, which is automatically used if no
        <filename>.orig.tar.gz</filename> is available).</para>

        <para>Since Debian 6 <emphasis
        role="distribution">Squeeze</emphasis>, Debian developers have the
        option to use new formats that correct many problems of the
        historical format. Format <literal>3.0 (quilt)</literal> can
        combine multiple upstream archives in the same source package: in
        addition to the usual <filename>.orig.tar.gz</filename>,
        supplementary
        <filename>.orig-<replaceable>component</replaceable>.tar.gz</filename>
        archives can be included. This is useful with software that is distributed in
        several upstream components but for which a single source package
        is desired. These archives can also be compressed with
        <command>xz</command> rather than
        <command>gzip</command>, which saves disk space and network resources. Finally,
        the monolithic patch, <filename>.diff.gz</filename> is replaced by
        a <filename>.debian.tar.xz</filename> archive containing the
        compiling instructions and a set of upstream patches contributed by
        the package maintainer. These last are recorded in a format
        compatible with <command>quilt</command> — a tool that facilitates
        the management of a series of patches.</para>
      </sidebar>

      <para>The <filename>.orig.tar.gz</filename> file is an archive containing
      the source code as provided by the original developer.
      Debian package maintainers are asked to not modify this archive in order to be able
      to easily check the origin and integrity of the file (by simple
      comparison with a checksum) and to respect the wishes of some
      authors.</para>

      <para>The <filename>.debian.tar.xz</filename> contains all of the
      modifications made by the Debian maintainer, especially the addition
      of a <filename>debian</filename> directory containing the instructions to
      execute to construct one or more Debian binary packages.</para>

      <sidebar>
        <title><emphasis>TOOL</emphasis> Decompressing a source package</title>
        <indexterm><primary><command>dpkg-source</command></primary></indexterm>
        <indexterm><primary>decompressing, source package</primary></indexterm>
        <indexterm><primary>uncompressing, source package</primary></indexterm>
        <indexterm><primary>unpacking</primary><secondary>source package</secondary></indexterm>
        <indexterm><primary>source package</primary><secondary>unpacking</secondary></indexterm>

        <para>If you have a source package, you can use the
        <command>dpkg-source</command> command (from the
        <emphasis role="pkg">dpkg-dev</emphasis> package) to decompress it:</para>

        <informalexample>
          <screen><computeroutput>$ </computeroutput><userinput>dpkg-source -x zim_0.73.5-1.dsc</userinput>
<computeroutput>dpkg-source: info: extracting zim in zim-0.73.5
dpkg-source: info: unpacking zim_0.73.5.orig.tar.gz
dpkg-source: info: unpacking zim_0.73.5-1.debian.tar.xz</computeroutput>
</screen>
        </informalexample>

        <para>You can also use <command>apt</command> to download a
        source package and unpack it right away. It requires that the
        appropriate <literal>deb-src</literal> lines be present in the
        <filename>/etc/apt/sources.list</filename> file, however (for
        further details, see <xref linkend="sect.apt-sources.list"/>).
        These are used to list the “sources” of source packages
        (meaning the servers on which a group of source packages are
        hosted).</para>

        <screen><computeroutput>$ </computeroutput><userinput>apt source <replaceable>package</replaceable></userinput>
<computeroutput><![CDATA[
Reading package lists... Done
NOTICE: 'zim' packaging is maintained in the 'Git' version control system at:
https://salsa.debian.org/debian/zim.git
Please use:
git clone https://salsa.debian.org/debian/zim.git
to retrieve the latest (possibly unreleased) updates to the package.
Need to get 2,172 kB of source archives.
Get:1 https://deb.debian.org/debian bullseye/main zim 0.73.5-1 (dsc) [1,580 B]
Get:2 https://deb.debian.org/debian bullseye/main zim 0.73.5-1 (tar) [2,160 kB]
Get:3 https://deb.debian.org/debian bullseye/main zim 0.73.5-1 (diff) [10.1 kB]
Fetched 2,172 kB in 0s (7,176 kB/s)
dpkg-source: info: extracting zim in zim-0.73.5
dpkg-source: info: unpacking zim_0.73.5.orig.tar.gz
dpkg-source: info: unpacking zim_0.73.5-1.debian.tar.xz
]]></computeroutput></screen>
      </sidebar>
    </section>

    <section>
      <title>Usage within Debian</title>

      <para>The source package is the foundation of everything in Debian.
      All Debian packages come from a source package, and each modification
      in a Debian package is the consequence of a modification made to the
      source package. The Debian maintainers work with the source package,
      knowing, however, the consequences of their actions on the binary
      packages. The fruits of their labors are thus found in the source
      packages available from Debian: you can easily go back to them and
      everything stems from them. <xref linkend="debian-packaging"/> contains
      some examples.</para>

      <para>When a new version of a source package arrives on the Debian
      server, it will then be used by a network of machines of different
      architectures for compilation on the various architectures supported by
      Debian.
      <ulink type="block" url="https://buildd.debian.org/"/>
      </para>

      <sidebar>
        <title><emphasis>GOING FURTHER</emphasis> Source only maintainer uploads</title>

        <para>Right after the release of Debian 10 <emphasis
        role="distribution">Buster</emphasis> the <link
        linkend="srm-team">Release Team</link> announced that maintainer binary
        uploads will no longer be accepted for <literal>main</literal> and all
        binary packages in this component must be built automatically from
        mandatory source-only uploads. While binary uploads are still allowed
        for the <literal>contrib</literal> and <literal>non-free</literal>
        components, we will not focus on this possibility as it should only
        be the exception.</para>
      </sidebar>
    </section>
  </section>

  <section id="sect.manipulating-packages-with-dpkg">
    <title>Manipulating Packages with <command>dpkg</command></title>
    <indexterm><primary><command>dpkg</command></primary></indexterm>

    <para><command>dpkg</command> is the base command for handling Debian
    packages on the system. If you have <filename>.deb</filename> packages, it
    is <command>dpkg</command> that allows installation or analysis of their
    contents. But this program only has a partial view of the Debian universe:
    it knows what is installed on the system, and whatever it is given on the
    command line, but knows nothing of the other available packages. As such,
    it will fail if a dependency is not met. Tools such as
    <command>apt</command> and <command>aptitude</command>, on the contrary,
    will create a list of dependencies to install everything as automatically
    as possible.</para>

    <sidebar>
      <title><emphasis>NOTE</emphasis> <command>dpkg</command> or <command>apt</command>?</title>

      <para><command>dpkg</command> should be seen as a system tool
      (backend), and <command>apt</command> as a tool closer to the
      user, which overcomes the limitations of the former. These tools work
      together, each one with its particularities, suited to specific
      tasks.</para>
    </sidebar>

    <section>
      <title>Installing Packages</title>
      <indexterm><primary>installation</primary><secondary>package installation</secondary></indexterm>
      <indexterm><primary>package</primary><secondary>installation</secondary></indexterm>
      <indexterm><primary><command>dpkg</command></primary><secondary>--install</secondary></indexterm>

      <para><command>dpkg</command> is, above all, the tool for installing an
      already available Debian package (because it does not download
      anything). To do this, we use its <literal>-i</literal> or
      <literal>--install</literal> option.</para>

      <example>
        <title>Installation of a package with <command>dpkg</command></title>

        <!-- MAYCHANGE: man-db version -->
        <screen role="scale">
<computeroutput># </computeroutput><userinput>dpkg -i man-db_2.9.4-2_amd64.deb</userinput>
<computeroutput>(Reading database ... 227466 files and directories currently installed.)
Preparing to unpack man-db_2.9.4-2_amd64.deb ...
Unpacking man-db (2.9.4-2) over (2.8.5-2) ...
Setting up man-db (2.9.4-2) ...
Updating database of manual pages ...
man-db.service is a disabled or a static unit not running, not starting it.
Processing triggers for mailcap (3.69) ...</computeroutput>
</screen>
      </example>

      <para>We can see the different steps performed by
      <command>dpkg</command>; we know, thus, at what point any error may
      have occurred. The installation can also be effected in two stages:
      first unpacking, then configuration. <command>apt</command> takes
      advantage of this, limiting the number of calls to
      <command>dpkg</command> (since each call is costly, due to loading of
      the database in memory, especially the list of already installed
      files).</para>

      <example>
        <title>Separate unpacking and configuration</title>
        <indexterm><primary><command>dpkg</command></primary><secondary>--unpack</secondary></indexterm>
        <indexterm><primary><command>dpkg</command></primary><secondary>--configure</secondary></indexterm>

        <screen role="scale">
<computeroutput># </computeroutput><userinput>dpkg --unpack man-db_2.9.4-2_amd64.deb</userinput>
<computeroutput>(Reading database ... 227466 files and directories currently installed.)
Preparing to unpack man-db_2.9.4-2_amd64.deb ...
Unpacking man-db (2.9.4-2) over (2.9.4-2) ...
Processing triggers for mailcap (3.69) ...
# </computeroutput><userinput>dpkg --configure man-db</userinput>
<computeroutput>Setting up man-db (2.9.4-2) ...
Updating database of manual pages ...
man-db.service is a disabled or a static unit not running, not starting it.

</computeroutput>
</screen>
      </example>

      <indexterm><primary>package</primary><secondary>unpacking</secondary></indexterm>
      <indexterm><primary>unpacking</primary><secondary>binary package</secondary></indexterm>

      <para>Sometimes <command>dpkg</command> will fail to install a
      package and return an error; if the user orders it to ignore this, it
      will only issue a warning; it is for this reason that we have the
      different <literal>--force-*</literal> options. The <command>dpkg
      --force-help</command> command, or documentation of this command,
      will give a complete list of these options. The most frequent error,
      which you are bound to encounter sooner or later, is a file
      collision. When a package contains a file that is already installed
      by another package, <command>dpkg</command> will refuse to install
      it. The following messages will then appear:</para>

      <screen>
<computeroutput>Unpacking libgdm (from .../libgdm_3.8.3-2_amd64.deb) ...
dpkg: error processing /var/cache/apt/archives/libgdm_3.8.3-2_amd64.deb (--unpack):
 trying to overwrite '/usr/bin/gdmflexiserver', which is also in package gdm3 3.4.1-9</computeroutput>
</screen>

      <para>In this case, if you think that replacing this file is not a
      significant risk to the stability of your system (which is usually
      the case), you can use the option
      <literal>--force-overwrite</literal>, which tells
      <command>dpkg</command> to ignore this error and overwrite the
      file.</para>

      <para>While there are many available <literal>--force-*</literal>
      options, only <literal>--force-overwrite</literal> is likely to be used
      regularly. These options only exist for exceptional situations, rarely
      encountered in Debian <emphasis role="distribution">Stable</emphasis>. It
      is better to leave them alone as much as possible in order to respect the
      rules imposed by the packaging mechanism. Do not forget, these rules
      ensure the consistency and stability of your system.</para>

      <sidebar>
        <title><emphasis>CAUTION</emphasis> Effective use of <literal>--force-*</literal></title>
        <indexterm><primary>broken dependency</primary></indexterm>

        <para>If you are not careful, the use of an option
        <literal>--force-*</literal> can lead to a system where the APT
        family of commands will refuse to function. In effect, some of
        these options allow installation of a package when a dependency is
        not met, or when there is a conflict. The result is an inconsistent
        system from the point of view of dependencies, and the APT commands
        will refuse to execute any action except those that will bring
        the system back to a consistent state (this often consists of
        installing the missing dependency or removing a problematic
        package). This often results in a message like this one, obtained
        after installing a new version of <emphasis
        role="pkg">rdesktop</emphasis> while ignoring its dependency on a
        newer version of the <emphasis role="pkg">libc6</emphasis>:</para>

        <screen><computeroutput># </computeroutput><userinput>apt full-upgrade
</userinput><computeroutput>[...]
You might want to run 'apt-get -f install' to correct these.
The following packages have unmet dependencies:
  rdesktop: Depends: libc6 (&gt;= 2.5) but 2.3.6.ds1-13etch7 is installed
E: Unmet dependencies. Try using -f.</computeroutput></screen>

        <para>A courageous administrator who is certain of the correctness
        of their analysis may choose to ignore a dependency or conflict and
        use the corresponding <literal>--force-*</literal> option. In this
        case, if they want to be able to continue to use
        <command>apt</command> or <command>aptitude</command>, they
        must edit <filename>/var/lib/dpkg/status</filename> to
        delete/modify the dependency, or conflict, that they chose to
        override.</para>

        <para>This manipulation is an ugly hack, and should never be used,
        except in the most extreme case of necessity. Quite frequently, a
        more fitting solution is to recompile the package that is causing
        the problem (see <xref linkend="sect.rebuilding-package"/>) or use
        a new version (potentially corrected) from a repository such as
        the <literal>stable-backports</literal> one (see <xref
        linkend="sect.apt-sources.list.stable.backports"/>).</para>
      </sidebar>
    </section>

    <section>
      <title>Package Removal</title>
      <indexterm><primary>removal of a package</primary></indexterm>
      <indexterm><primary>purging a package</primary></indexterm>
      <indexterm><primary>package</primary><secondary>removal</secondary></indexterm>
      <indexterm><primary>package</primary><secondary>purge</secondary></indexterm>
      <indexterm><primary><command>dpkg</command></primary><secondary>--remove</secondary></indexterm>
      <indexterm><primary><command>dpkg</command></primary><secondary>--purge</secondary></indexterm>

      <para>Invoking <command>dpkg</command> with the <literal>-r</literal>
      or <literal>--remove</literal> option, followed by the name of a
      package, removes that package. This removal is, however, not
      complete: all of the configuration files, maintainer scripts, log files
      (system logs) and other user data handled by the package remain. That
      way disabling the program is easily done by uninstalling it,
      and it is still possible to quickly reinstall it with the same
      configuration. To completely remove everything associated with a
      package, use the <literal>-P</literal> or <literal>--purge</literal>
      option, followed by the package name.</para>

      <example>
        <title>Removal and purge of the <emphasis role="pkg">debian-cd</emphasis> package</title>

        <screen><computeroutput># </computeroutput><userinput>dpkg -r debian-cd</userinput>
<computeroutput>(Reading database ... 228705 files and directories currently installed.)
Removing debian-cd (3.1.35) ...
# </computeroutput><userinput>dpkg -P debian-cd</userinput>
<computeroutput>(Reading database ... 228049 files and directories currently installed.)
Purging configuration files for debian-cd (3.1.35) ...
</computeroutput>
</screen>
      </example>
    </section>

    <section id="sect.dpkg-list">
      <title>Querying <command>dpkg</command>'s Database and Inspecting <filename>.deb</filename> Files</title>
      <indexterm><primary>package</primary><secondary>status</secondary></indexterm>
      <indexterm><primary>package</primary><secondary>file list</secondary></indexterm>
      <indexterm><primary>package</primary><secondary>content inspection</secondary></indexterm>
      <indexterm><primary><command>dpkg</command></primary><secondary><literal>--contents</literal></secondary></indexterm>
      <indexterm><primary><command>dpkg</command></primary><secondary><literal>--info</literal></secondary></indexterm>
      <indexterm><primary><command>dpkg</command></primary><secondary><literal>--list</literal></secondary></indexterm>
      <indexterm><primary><command>dpkg</command></primary><secondary><literal>--listfiles</literal></secondary></indexterm>
      <indexterm><primary><command>dpkg</command></primary><secondary><literal>--search</literal></secondary></indexterm>
      <indexterm><primary><command>dpkg</command></primary><secondary><literal>--status</literal></secondary></indexterm>

      <sidebar>
        <title><emphasis>BACK TO BASICS</emphasis> Option syntax</title>

        <para>Most options are available in a “long” version (one or
        more relevant words, preceded by a double dash) and a “short”
        version (a single letter, often the initial of one word from the
        long version, and preceded by a single dash). This convention is so
        common that it is a POSIX standard.</para>
      </sidebar>

      <para>Before concluding this section, we will study
      <command>dpkg</command> options that query the internal database in
      order to obtain information. Giving first the long options and then
      corresponding short options (that will evidently take the same
      possible arguments) we cite</para>

      <itemizedlist>
        <listitem>
          <para><literal>--listfiles
          <replaceable>package</replaceable></literal> (or
          <literal>-L</literal>), which lists the files installed by this
          package; </para>
        </listitem>
        <listitem>
          <para><literal>--search <replaceable>file</replaceable></literal>
          (or <literal>-S</literal>), which finds the package(s) containing the
          file;</para>
        </listitem>
        <listitem>
          <para><literal>--status <replaceable>package</replaceable></literal>
          (or <literal>-s</literal>), which displays the headers of an
          installed package;</para>
        </listitem>
        <listitem>
          <para><literal>--list</literal> (or <literal>-l</literal>), which
          displays the list of packages known to the system and their
          installation status;</para>
        </listitem>
        <listitem>
          <para><literal>--contents
          <replaceable>file.deb</replaceable></literal> (or
          <literal>-c</literal>), which lists the files in the Debian package
          specified;</para>
        </listitem>
        <listitem>
          <para><literal>--info<replaceable> file.deb </replaceable></literal>
          (or <literal>-I</literal>), which displays the headers of this Debian
          package.</para>
        </listitem>
      </itemizedlist>

      <sidebar>
        <title><emphasis>CAUTION</emphasis> <command>dpkg --search</command> and merged <filename>/usr</filename></title>
        <indexterm><primary>merged <filename>/usr</filename></primary></indexterm>
        <indexterm><primary><filename>/usr</filename></primary></indexterm>

        <para>
          For <ulink url="https://www.freedesktop.org/wiki/Software/systemd/TheCaseForTheUsrMerge/">various
          reasons</ulink>, Debian now installs by default a few top-level directories
          as symlinks to their counterparts below <filename>/usr</filename>. For instance,
          <filename>/bin</filename>, <filename>/sbin</filename> and <filename>/lib</filename>
          are now symlinks to, respectively, <filename>/usr/bin</filename>,
          <filename>/usr/sbin</filename> and <filename>/usr/lib</filename>.
        </para>

        <para>
          While this does provide desirable benefits, it can also be a source
          of confusion. For example, when you query <command>dpkg</command> which
          package is owning a given file, it will only be able to answer when you
          ask for its original path:
        </para>

        <screen>
$ <userinput>dpkg --search /bin/mount</userinput>
mount: /bin/mount
$ <userinput>dpkg --search /usr/bin/mount</userinput>
dpkg-query: no path found matching pattern /usr/bin/mount
$ <userinput>dpkg --search /bin/apt</userinput>
dpkg-query: no path found matching pattern /bin/apt
$ <userinput>dpkg --search /usr/bin/apt</userinput>
apt: /usr/bin/apt
        </screen>

        <para>This issue is currently tracked as bug #858331. There is also an
        ongoing discussion if the approach used so far is counterproductive.
        <ulink type="block" url="https://bugs.debian.org/858331"/></para>
      </sidebar>

      <example>
        <title>Various queries with <command>dpkg</command></title>

        <screen role="scale" width="80">
<computeroutput>$ </computeroutput><userinput>dpkg -L base-passwd</userinput>
<computeroutput><![CDATA[/.
/usr
/usr/sbin
/usr/sbin/update-passwd
/usr/share
/usr/share/base-passwd
/usr/share/base-passwd/group.master
/usr/share/base-passwd/passwd.master
/usr/share/doc
/usr/share/doc/base-passwd
/usr/share/doc/base-passwd/README
/usr/share/doc/base-passwd/changelog.gz
/usr/share/doc/base-passwd/copyright
/usr/share/doc/base-passwd/users-and-groups.html
/usr/share/doc/base-passwd/users-and-groups.txt.gz
/usr/share/doc-base
/usr/share/doc-base/users-and-groups
/usr/share/lintian
/usr/share/lintian/overrides
/usr/share/lintian/overrides/base-passwd
/usr/share/man
/usr/share/man/de
/usr/share/man/de/man8
/usr/share/man/de/man8/update-passwd.8.gz
/usr/share/man/es
/usr/share/man/es/man8
/usr/share/man/es/man8/update-passwd.8.gz
/usr/share/man/fr
/usr/share/man/fr/man8
/usr/share/man/fr/man8/update-passwd.8.gz
/usr/share/man/ja
/usr/share/man/ja/man8
/usr/share/man/ja/man8/update-passwd.8.gz
/usr/share/man/man8
/usr/share/man/man8/update-passwd.8.gz
/usr/share/man/pl
/usr/share/man/pl/man8
/usr/share/man/pl/man8/update-passwd.8.gz
/usr/share/man/ru
/usr/share/man/ru/man8
/usr/share/man/ru/man8/update-passwd.8.gz]]>
$ </computeroutput><userinput>dpkg -S /bin/date</userinput>
<computeroutput>coreutils: /bin/date
$ </computeroutput><userinput>dpkg -s coreutils</userinput>
<computeroutput><![CDATA[Package: coreutils
Essential: yes
Status: install ok installed
Priority: required
Section: utils
Installed-Size: 17478
Maintainer: Michael Stone <mstone@debian.org>
Architecture: amd64
Multi-Arch: foreign
Source: coreutils (8.32-4)
Version: 8.32-4+b1
Pre-Depends: libacl1 (>= 2.2.23), libattr1 (>= 1:2.4.44), libc6 (>= 2.28), libgmp10, libselinux1 (>= 3.1~)
Description: GNU core utilities
 This package contains the basic file, shell and text manipulation
 utilities which are expected to exist on every operating system.
 .
 Specifically, this package includes:
 arch base64 basename cat chcon chgrp chmod chown chroot cksum comm cp
 csplit cut date dd df dir dircolors dirname du echo env expand expr
 factor false flock fmt fold groups head hostid id install join link ln
 logname ls md5sum mkdir mkfifo mknod mktemp mv nice nl nohup nproc numfmt
 od paste pathchk pinky pr printenv printf ptx pwd readlink realpath rm
 rmdir runcon sha*sum seq shred sleep sort split stat stty sum sync tac
 tail tee test timeout touch tr true truncate tsort tty uname unexpand
 uniq unlink users vdir wc who whoami yes
Homepage: http://gnu.org/software/coreutils]]>
$ </computeroutput><userinput>dpkg -l 'b*'</userinput>
<computeroutput><![CDATA[Desired=Unknown/Install/Remove/Purge/Hold
| Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig-aWait/Trig-pend
|/ Err?=(none)/Reinst-required (Status,Err: uppercase=bad)
||/ Name                       Version       Architecture Description
+++-==========================-==============-============-==================================
un  backupninja                <none>         <none>       (no description available)
un  backuppc                   <none>         <none>       (no description available)
ii  baloo-kf5                  5.78.0-3       amd64        framework for searching and manag>
un  balsa                      <none>         <none>       (no description available)
ii  baobab                     3.38.0-1       amd64        GNOME disk usage analyzer
un  base                       <none>         <none>       (no description available)
un  base-config                <none>         <none>       (no description available)
ii  base-files                 11.1           amd64        Debian base system miscellaneous >
ii  base-passwd                3.5.51         amd64        Debian base system master passwor>
ii  bash                       5.1-2+b1       amd64        GNU Bourne Again SHell
[..]]]>
$ </computeroutput><userinput>dpkg -c /var/cache/apt/archives/bash_5.1-3+b1_amd64.deb</userinput>
<computeroutput><![CDATA[drwxr-xr-x root/root         0 2021-07-25 20:43 ./
drwxr-xr-x root/root         0 2021-07-25 20:43 ./bin/
-rwxr-xr-x root/root   1234376 2021-07-25 20:43 ./bin/bash
drwxr-xr-x root/root         0 2021-07-25 20:43 ./etc/
-rw-r--r-- root/root      1994 2021-07-25 20:43 ./etc/bash.bashrc
drwxr-xr-x root/root         0 2021-07-25 20:43 ./etc/skel/
-rw-r--r-- root/root       220 2021-07-25 20:43 ./etc/skel/.bash_logout
-rw-r--r-- root/root      3526 2021-07-25 20:43 ./etc/skel/.bashrc
-rw-r--r-- root/root       807 2021-07-25 20:43 ./etc/skel/.profile
drwxr-xr-x root/root         0 2021-07-25 20:43 ./usr/
drwxr-xr-x root/root         0 2021-07-25 20:43 ./usr/bin/
-rwxr-xr-x root/root      6759 2021-07-25 20:43 ./usr/bin/bashbug
-rwxr-xr-x root/root     14648 2021-07-25 20:43 ./usr/bin/clear_console
drwxr-xr-x root/root         0 2021-07-25 20:43 ./usr/share/
drwxr-xr-x root/root         0 2021-07-25 20:43 ./usr/share/doc/
[..]]]>
$ </computeroutput><userinput>dpkg -I /var/cache/apt/archives/bash_5.1-3+b1_amd64.deb</userinput>
<computeroutput><![CDATA[ new Debian package, version 2.0.
 size 1416600 bytes: control archive=7256 bytes.
      77 bytes,     4 lines      conffiles
    1030 bytes,    27 lines      control
    4511 bytes,    64 lines      md5sums
     603 bytes,    31 lines   *  postinst             #!/bin/bash
     500 bytes,    25 lines   *  postrm               #!/bin/sh
   14536 bytes,    33 lines   *  preinst              
     289 bytes,    22 lines   *  prerm                #!/bin/bash
 Package: bash
 Source: bash (5.1-3)
 Version: 5.1-3+b1
 Architecture: amd64
 Essential: yes
 Maintainer: Matthias Klose <doko@debian.org>
 Installed-Size: 6470
 Pre-Depends: libc6 (>= 2.25), libtinfo6 (>= 6)
 Depends: base-files (>= 2.1.12), debianutils (>= 2.15)
 Recommends: bash-completion (>= 20060301-0)
 Suggests: bash-doc
 Conflicts: bash-completion (<< 20060301-0)
 Replaces: bash-completion (<< 20060301-0), bash-doc (<= 2.05-1)
 Section: shells
 Priority: required
 Multi-Arch: foreign
 Homepage: http://tiswww.case.edu/php/chet/bash/bashtop.html
 Description: GNU Bourne Again SHell
  Bash is an sh-compatible command language interpreter that executes
  commands read from the standard input or from a file.  Bash also
  incorporates useful features from the Korn and C shells (ksh and csh).
  .
  Bash is ultimately intended to be a conformant implementation of the
  IEEE POSIX Shell and Tools specification (IEEE Working Group 1003.2).
  .
  The Programmable Completion Code, by Ian Macdonald, is now found in
  the bash-completion package.]]>
</computeroutput>
        </screen>
      </example>

      <sidebar>
        <title><emphasis>GOING FURTHER</emphasis> Comparison of versions</title>
        <indexterm><primary>version, comparison</primary></indexterm>
        <indexterm><primary>comparison of versions</primary></indexterm>
        <indexterm><primary>package</primary><secondary>version, comparison</secondary></indexterm>
        <indexterm><primary><command>dpkg</command></primary><secondary><literal>--compare-versions</literal></secondary></indexterm>

        <para>Since <command>dpkg</command> is the program for handling
        Debian packages, it also provides the reference implementation of
        the logic of comparing version numbers. This is why it has a
        <literal>--compare-versions</literal> option, usable by external
        programs (especially configuration scripts executed by
        <command>dpkg</command> itself). This option requires three
        parameters: a version number, a comparison operator, and a second
        version number. The different possible operators are
        <literal>lt</literal> (strictly less than), <literal>le</literal>
        (less than or equal to), <literal>eq</literal> (equal),
        <literal>ne</literal> (not equal), <literal>ge</literal> (greater
        than or equal to), and <literal>gt</literal> (strictly greater
        than). If the comparison is correct, <command>dpkg</command> returns
        0 (success); if not, it gives a non-zero return
        value (indicating failure).</para>

        <screen>
<computeroutput>$ </computeroutput><userinput>dpkg --compare-versions 1.2-3 gt 1.1-4</userinput>
<computeroutput>$ </computeroutput><userinput>echo $?</userinput>
<computeroutput>0
$ </computeroutput><userinput>dpkg --compare-versions 1.2-3 lt 1.1-4</userinput>
<computeroutput>$ </computeroutput><userinput>echo $?</userinput>
<computeroutput>1
$ </computeroutput><userinput>dpkg --compare-versions 2.6.0pre3-1 lt 2.6.0-1</userinput>
<computeroutput>$ </computeroutput><userinput>echo $?</userinput>
<computeroutput>1</computeroutput>
</screen>

        <para>Note the unexpected failure of the last comparison: for
        <command>dpkg</command>, <literal>pre</literal>, usually denoting a
        pre-release, has no particular meaning, and this program compares
        the alphabetic characters in the same way as the numbers (a &lt; b
        &lt; c ...), in alphabetical order. This is why it considers
        “<literal>0pre3</literal>” to be greater than
        “<literal>0</literal>”. When we want a package's version number
        to indicate that it is a pre-release, we use the tilde character,
        “<literal>~</literal>”:</para>

        <indexterm><primary><literal>~</literal></primary></indexterm>
        <indexterm><primary>tilde, usage</primary><secondary>in versions</secondary></indexterm>

        <screen>
<computeroutput>$ </computeroutput><userinput>dpkg --compare-versions 2.6.0~pre3-1 lt 2.6.0-1</userinput>
<computeroutput>$ </computeroutput><userinput>echo $?</userinput>
<computeroutput>0</computeroutput>
</screen>
      </sidebar>
    </section>

    <section id="sect.dpkg-log">
      <title><command>dpkg</command>'s Log File</title>
      <indexterm><primary><command>dpkg</command></primary><secondary><filename>/var/log/dpkg.log</filename></secondary></indexterm>
      <indexterm><primary><filename>/var</filename></primary><secondary><filename>/var/log/dpkg.log</filename></secondary></indexterm>

      <para><command>dpkg</command> keeps a log of all of its actions in
      <filename>/var/log/dpkg.log</filename>. This log is extremely
      verbose, since it details every one of the stages through which
      packages handled by <command>dpkg</command> go. In addition to
      offering a way to track dpkg's behavior, it helps, above all, to keep
      a history of the development of the system: one can find the exact
      moment when each package has been installed or updated, and this
      information can be extremely useful in understanding a recent change
      in behavior. Additionally, all versions being recorded, it is easy to
      cross-check the information with the
      <filename>changelog.Debian.gz</filename> for packages in question, or
      even with online bug reports.</para>
    </section>

    <section id="sect.multi-arch">
      <title>Multi-Arch Support</title>
      <indexterm><primary>Multi-Arch</primary></indexterm>
      <indexterm><primary>architecture</primary><secondary>multi-arch support</secondary></indexterm>
      <indexterm><primary><command>dpkg</command></primary><secondary><literal>--print-architecture</literal></secondary></indexterm>
      <indexterm><primary><filename>control</filename></primary><secondary><literal>Architecture</literal></secondary></indexterm>
      <indexterm><primary><command>dpkg</command></primary><secondary>multi-arch support</secondary></indexterm>

      <para>All Debian packages have an <literal>Architecture</literal>
      field in their control information. This field can contain either
      “<literal>all</literal>” (for packages that are architecture
      independent) or the name of the architecture that it targets (like
      “amd64”, “armhf”, …). In the latter case, by default,
      <command>dpkg</command> will only accept to install the package if
      its architecture matches the host's architecture as returned by
      <command>dpkg --print-architecture</command>.</para>

      <para>This restriction ensures that users do not end up with binaries
      compiled for an incorrect architecture. Everything would be perfect
      except that (some) computers can run binaries for multiple architectures,
      either natively (an “amd64“ system can run “i386” binaries) or through
      emulators.</para>

      <section>
        <title>Enabling Multi-Arch</title>
        <para><command>dpkg</command>'s multi-arch support allows
        users to define “foreign architectures” that can be installed
        on the current system. This is simply done with
        <command>dpkg --add-architecture</command> like in the example
        below. There is a corresponding <command>dpkg --remove-architecture</command>
        to drop support of a foreign architecture, but it can only be used
        when no packages of this architecture remain.</para>

        <!-- MAYCHANGE: package name and version -->
        <screen>
<computeroutput># </computeroutput><userinput>dpkg --print-architecture</userinput>
<computeroutput>amd64
# </computeroutput><userinput>dpkg --print-foreign-architectures</userinput>
<computeroutput># </computeroutput><userinput>dpkg -i gcc-9-base_9.3.0-22_armhf.deb</userinput>
<computeroutput>dpkg: error processing archive gcc-9-base_9.3.0-22_armhf.deb (--install):
 package architecture (armhf) does not match system (amd64)
Errors were encountered while processing:
 gcc-9-base_9.3.0-22_armhf.deb
# </computeroutput><userinput>dpkg --add-architecture armhf</userinput>
<computeroutput># </computeroutput><userinput>dpkg --add-architecture armel</userinput>
<computeroutput># </computeroutput><userinput>dpkg --print-foreign-architectures</userinput>
<computeroutput>armhf
armel
# </computeroutput><userinput>dpkg -i gcc-9-base_9.3.0-22_armhf.deb</userinput>
<computeroutput>(Reading database ... 456367 files and directories currently installed.)
Preparing to unpack gcc-9-base_9.3.0-22_armhf.deb ...
Unpacking gcc-9-base:armhf (9.3.0-22) ...
Setting up gcc-9-base:armhf (9.3.0-22) ...
# </computeroutput><userinput>dpkg --remove-architecture armhf</userinput>
<computeroutput>dpkg: error: cannot remove architecture 'armhf' currently in use by the database
# </computeroutput><userinput>dpkg --remove-architecture armel</userinput>
<computeroutput># </computeroutput><userinput>dpkg --print-foreign-architectures</userinput>
<computeroutput>armhf</computeroutput>
</screen>

        <sidebar>
          <title><emphasis>NOTE</emphasis> APT's multi-arch support</title>
          <indexterm><primary>APT</primary><secondary>multi-arch support</secondary></indexterm>

          <para>APT will automatically detect when dpkg has been configured
          to support foreign architectures and will start downloading the
          corresponding <filename>Packages</filename> files during its
          update process.</para>

          <para>Foreign packages can then be installed with <command>apt
          install
          <replaceable>package</replaceable>:<replaceable>architecture</replaceable></command>.
          </para>
        </sidebar>

        <sidebar>
          <title><emphasis>IN PRACTICE</emphasis> Using proprietary i386 binaries on amd64</title>

          <para>There are multiple use cases for multi-arch, but the most
          popular ones are the possibility to execute (sometimes proprietary)
          32 bit binaries (i386) on 64 bit systems (amd64), and the possibility
          to cross-compile software for a platform or an architecture different
          from the host one.</para>
        </sidebar>
      </section>

      <section>
        <title>Multi-Arch Related Changes</title>

        <para>To make multi-arch actually useful and usable, libraries had to
        be repackaged and moved to an architecture-specific directory so that
        multiple copies (targeting different architectures) can be installed
        alongside. Such updated packages contain the “<literal>Multi-Arch:
        same</literal>” header field to tell the packaging system that the
        various architectures of the package can be safely co-installed (and
        that those packages can only satisfy dependencies of packages of the
        same architecture). The most important libraries have been converted
        since the introduction of multi-arch in Debian 7
        <emphasis role="distribution">Wheezy</emphasis>, but there are many
        libraries that will likely never be converted unless someone
        specifically requests it (through a bug report for example).
        </para>

        <!-- MAYCHANGE: package names and version -->
        <screen><computeroutput>$ </computeroutput><userinput>dpkg -s gcc-9-base
</userinput><computeroutput>dpkg-query: error: --status needs a valid package name but 'gcc-9-base' is not: ambiguous package name 'gcc-9-base' with more than one installed instance

Use --help for help about querying packages.
$ </computeroutput><userinput>dpkg -s gcc-9-base:amd64 gcc-9-base:armhf | grep ^Multi
</userinput><computeroutput>Multi-Arch: same
Multi-Arch: same
$ </computeroutput><userinput>dpkg -L libgcc-s1:amd64 |grep .so
</userinput><computeroutput>/lib/x86_64-linux-gnu/libgcc_s.so.1
$ </computeroutput><userinput>dpkg -S /usr/share/doc/gcc-9-base/copyright
</userinput><computeroutput>gcc-9-base:amd64, gcc-9-base:armhf: /usr/share/doc/gcc-9-base/copyright
</computeroutput></screen>

        <para>It is worth noting that <literal>Multi-Arch: same</literal> packages
        must have their names qualified with their architecture to be unambiguously
        identifiable. They also have the possibility to share files with other
        instances of the same package; <command>dpkg</command> ensures that all
        packages have bit-for-bit identical files when they are shared. Last but
        not least, all instances of a package must have the same version. They must
        thus be upgraded together.
        </para>

        <para>Multi-Arch support also brings some interesting challenges in
        the way dependencies are handled. Satisfying a dependency requires
        either a package marked “<literal>Multi-Arch: foreign</literal>” or a
        package whose architecture matches the one of the package declaring
        the dependency (in this dependency resolution process,
        architecture-independent packages are assumed to be of the same
        architecture than the host). A dependency can also be weakened
        to allow any architecture to fulfill it, with the
        <literal><replaceable>package</replaceable>:any</literal> syntax, but
        foreign packages can only satisfy such a dependency if they
        are marked “<literal>Multi-Arch: allowed</literal>”.</para>
      </section>
    </section>
  </section>

  <section id="sect.coexistence-with-other-packaging-systems">
    <title>Coexistence with Other Packaging Systems</title>
    <indexterm><primary>RPM</primary><seealso>RPM Package Manager</seealso></indexterm>
    <indexterm><primary>Red Hat Package Manager</primary><seealso>RPM Package Manager</seealso></indexterm>
    <indexterm><primary>RPM Package Manager</primary></indexterm>
    <indexterm><primary><command>alien</command></primary></indexterm>

    <para>Debian packages are not the only software packages used in the
    free software world. The main competitor is the RPM format of the Red Hat
    Linux distribution and its many derivatives. Red Hat is a very popular, commercial
    distribution. It is thus common for software provided by third parties to be
    offered as RPM packages rather than Debian.</para>

    <para>In this case, you should know that the program
    <command>rpm</command>, which handles RPM packages, is available as a
    Debian package, so it is possible to use this package format on Debian.
    Care should be taken, however, to limit these manipulations to extract
    the information from a package or to verify its integrity. It is, in
    truth, unreasonable to use <command>rpm</command> to install an RPM on
    a Debian system; RPM uses its own database, separate from those of
    native software (such as <command>dpkg</command>). This is why it is
    not possible to ensure a stable coexistence of two packaging
    systems.</para>

    <para>On the other hand, the <emphasis role="pkg">alien</emphasis>
    utility can convert RPM packages into Debian packages, and vice
    versa.</para>

    <sidebar>
      <title><emphasis>COMMUNITY</emphasis> Encouraging the adoption of <filename>.deb</filename></title>

      <!-- MAYCHANGE: Debian stable release name -->
      <para>If you regularly use the <command>alien</command> program to
      install RPM packages coming from one of your providers, do not
      hesitate to write to them and amicably express your strong preference
      for the <filename>.deb</filename> format. Note that the format of the
      package is not everything: a <filename>.deb</filename> package built
      with <command>alien</command> or prepared for a version of Debian
      different than that which you use, or even for a derivative distribution
      like Ubuntu, would probably not offer the same level of quality and
      integration as a package specifically developed for Debian <emphasis
      role="distribution">Bullseye</emphasis>.</para>
    </sidebar>

    <screen>
<computeroutput>$ </computeroutput><userinput>fakeroot alien --to-deb phpMyAdmin-5.1.1-2.fc35.noarch.rpm</userinput>
<computeroutput>[..]
Warning: Skipping conversion of scripts in package phpMyAdmin: postinst
Warning: Use the --scripts parameter to include the scripts.
[..]
phpmyadmin_5.1.1-3_all.deb generated
$ </computeroutput><userinput>ls -sh phpmyadmin_5.1.1-3_all.deb</userinput>
<computeroutput>  6,0M phpmyadmin_5.1.1-3_all.deb
$ </computeroutput><userinput>dpkg -c phpmyadmin_5.1.1-3_all.deb</userinput>
<computeroutput><![CDATA[drwxr-xr-x root/root         0 2021-08-09 02:02 ./
drwxr-xr-x root/root         0 2021-08-09 02:02 ./etc/
drwxr-xr-x root/root         0 2021-08-09 02:02 ./etc/httpd/
drwxr-xr-x root/root         0 2021-08-09 02:02 ./etc/httpd/conf.d/
-rw-r--r-- root/root      1181 2021-07-27 09:32 ./etc/httpd/conf.d/phpMyAdmin.conf
drwxr-xr-x root/root         0 2021-08-09 02:02 ./etc/nginx/
drwxr-xr-x root/root         0 2021-08-09 02:02 ./etc/nginx/default.d/
-rw-r--r-- root/root       430 2021-07-27 09:32 ./etc/nginx/default.d/phpMyAdmin.conf
drwxr-x--- root/root         0 2021-08-09 02:02 ./etc/phpMyAdmin/
-rw-r----- root/root      4546 2021-07-27 09:34 ./etc/phpMyAdmin/config.inc.php
drwxr-xr-x root/root         0 2021-08-09 02:02 ./usr/
drwxr-xr-x root/root         0 2021-08-09 02:02 ./usr/share/
drwxr-xr-x root/root         0 2021-08-09 02:02 ./usr/share/doc/
drwxr-xr-x root/root         0 2021-08-09 02:02 ./usr/share/doc/phpMyAdmin/
[..]]]>
$ </computeroutput><userinput>dpkg -I phpmyadmin_5.1.1-3_all.deb</userinput>
<computeroutput><![CDATA[ new Debian package, version 2.0.
 size 6195324 bytes: control archive=44444 bytes.
     102 bytes,     3 lines      conffiles
     593 bytes,    15 lines      control
  180405 bytes,  1919 lines      md5sums
     448 bytes,    11 lines   *  postinst             #!/bin/sh
 Package: phpmyadmin
 Version: 5.1.1-3
 Architecture: all
 Maintainer: Daniel Leidert <dleidert@debian.org>
 Installed-Size: 40693
 Section: alien
 Priority: extra
 Description: A web interface for MySQL and MariaDB
  phpMyAdmin is a tool written in PHP intended to handle the administration of
  MySQL over the Web. Currently it can create and drop databases,
  create/drop/alter tables, delete/edit/add fields, execute any SQL statement,
  manage keys on fields, manage privileges,export data into various formats and
  is available in 50 languages
  .
  (Converted from a rpm package by alien version 8.95.4.)]]></computeroutput>
</screen>

    <para>You will find that this process is extremely simple. You must
    know, however, that the package generated does not have any dependency
    information, since the dependencies in the two packaging formats
    don't have systematic correspondence. The administrator must thus
    manually ensure that the converted package will function correctly, and
    this is why Debian packages thus generated should be avoided as much as
    possible. Fortunately, Debian has the largest collection of software
    packages of all distributions, and it is likely that whatever you seek
    is already in there.</para>

    <para>Looking at the man page for the <command>alien</command> command,
    you will also note that this program handles other packaging
    formats, especially the one used by the Slackware distribution (it is made of a
    simple <filename>tar.gz</filename> archive).</para>

    <para>The stability of the software deployed using the
    <command>dpkg</command> tool contributes to Debian's fame. The APT
    suite of tools, described in the following chapter, preserves this
    advantage, while relieving the administrator from managing the status
    of packages, a necessary but difficult task.</para>
  </section>
</chapter>
<!-- vim: set spell spelllang=en_us ft=xml tw=79 ts=2 sw=2 ai si et: -->

<?xml version="1.0"?>
<chapter id="apt">
  <chapterinfo>
    <mediaobject condition="pdf">
      <imageobject>
        <imagedata fileref="images/chap-apt.png" scalefit="1"/>
      </imageobject>
    </mediaobject>
    <keywordset>
      <keyword>apt</keyword>
      <keyword>apt-get</keyword>
      <keyword>apt-cache</keyword>
      <keyword>aptitude</keyword>
      <keyword>synaptic</keyword>
      <keyword>sources.list</keyword>
      <keyword>apt-cdrom</keyword>
    </keywordset>
  </chapterinfo>
  <title>Maintenance and Updates: The APT Tools</title>
  <highlights>
    <para>What makes Debian so popular with administrators is how easily
    software can be installed and how easily the whole system can be
    updated. This unique advantage is largely due to the
    <emphasis>APT</emphasis> program, which Falcot Corp
    administrators studied with enthusiasm.</para>
  </highlights>

  <indexterm><primary>APT</primary></indexterm>
  <indexterm><primary>Advanced Packaging Tool</primary><seealso>APT</seealso></indexterm>

  <para><acronym>APT</acronym> is
  the abbreviation for Advanced Packaging Tool. What makes this program
  “advanced” is its approach to packages. It doesn't simply evaluate
  them individually, but it considers them as a whole and produces the best
  possible combination of packages depending on what is available and
  compatible according to dependencies.</para>

  <sidebar>
    <title><emphasis>VOCABULARY</emphasis> Package source and source package</title>
    <indexterm><primary>package</primary><secondary>source package</secondary><seealso><filename>.dsc</filename></seealso></indexterm>
    <indexterm><primary>package source</primary><seealso>repository</seealso></indexterm>

    <para>The word <emphasis>source</emphasis> can be ambiguous. A "source
    package" — a package containing the source code of a program —
    should not be confused with a "package source" — a repository (website,
    FTP server, CD-ROM, local directory, etc.) which contains
    packages.</para>
  </sidebar>

  <para>APT needs to be given a “list of package sources (repositories)”: the
  file <filename>/etc/apt/sources.list</filename> will list the different
  repositories that publish Debian packages. APT will then import the list of
  packages published by each of these sources. This operation is achieved by
  downloading <filename>Packages.xz</filename> files or a variant such as
  <filename>Packages.gz</filename> or <filename>.bz2</filename> (using a
  different compression method) in case of a source of binary packages and by
  analyzing their contents. In case of a source of source packages, APT
  downloads <filename>Sources.xz</filename> files or a variant using a
  different compression method. When an old copy of these files is already
  present, APT can update it by only downloading the differences (see sidebar
  <xref linkend="sidebar.apt-pdiff"/>).</para>

  <indexterm><primary><filename>Packages.xz</filename></primary></indexterm>
  <indexterm><primary><filename>Packages.gz</filename></primary></indexterm>
  <indexterm><primary><filename>Packages.bz2</filename></primary></indexterm>
  <indexterm><primary><filename>Sources.xz</filename></primary></indexterm>
  <indexterm><primary><filename>Sources.gz</filename></primary></indexterm>
  <indexterm><primary><filename>Sources.bz2</filename></primary></indexterm>

  <sidebar>
    <title><emphasis>BACK TO BASICS</emphasis> <command>gzip</command>, <command>bzip2</command>, <command>LZMA</command> and <command>XZ</command> Compression</title>
    <indexterm><primary><command>gzip</command></primary></indexterm>
    <indexterm><primary><command>bzip2</command></primary></indexterm>
    <indexterm><primary><command>lzma</command></primary></indexterm>
    <indexterm><primary><command>xz</command></primary></indexterm>

    <para>A <filename>.gz</filename> extension refers to a file
    compressed with the <command>gzip</command>
    utility. <command>gzip</command> is the fast and efficient
    traditional Unix utility to compress files.  Newer tools achieve
    better rates of compression but require more resources
    (computation time and memory) to compress and uncompress a
    file. Among them, and by order of appearance, there are
    <command>bzip2</command> (generating files with a
    <filename>.bz2</filename> extension), <command>lzma</command>
    (generating <filename>.lzma</filename> files) and
    <command>xz</command> (generating <filename>.xz</filename>
    files).</para>
  </sidebar>

  <section id="sect.apt-sources.list">
    <title>Filling in the <filename>sources.list</filename> File</title>
    <indexterm><primary><filename>sources.list</filename></primary></indexterm>
    <indexterm><primary>source</primary><secondary>of packages</secondary></indexterm>
    <indexterm><primary>package</primary><secondary>source of</secondary></indexterm>
    <indexterm><primary>APT</primary><secondary><filename>/etc/apt/sources.list</filename></secondary><seealso>sources.list</seealso></indexterm>

    <section>
      <title>Syntax</title>

      <para>Each active line in the
      <filename>/etc/apt/sources.list</filename> file represents a package
      source (repository) and is made of at least three parts separated by
      spaces. For a complete description of the file format and the accepted
      entry compositions see
      <citerefentry><refentrytitle>sources.list</refentrytitle><manvolnum>5</manvolnum></citerefentry>.</para>

      <example id="example.sources-list-format">
        <title>Example entry format in <filename>/etc/apt/sources.list</filename></title>
        <programlisting>deb url distribution component1 component2 component3 [..] componentX
deb-src url distribution component1 component2 component3 [..] componentX
        </programlisting>
      </example>

      <para>The first field indicates the source type:</para>
      <variablelist>
        <varlistentry>
          <term><literal>deb</literal></term>
	        <listitem>
	          <para>package source (repository) of binary packages</para>
	        </listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>deb-src</literal></term>
	        <listitem>
	          <para>package source (repository) of source packages</para>
	        </listitem>
        </varlistentry>
      </variablelist>

      <para>The second field gives the base URL of the source. Combined with
      the filenames listed in the <filename>Packages.xz</filename> files, it
      must give a full and valid URL. This can consist in a Debian mirror or
      in any other package archive set up by a third party. The URL can start
      with <literal>file://</literal> to indicate a local source installed in
      the system's file hierarchy, with <literal>http://</literal> or
      <literal>https://</literal> to indicate a source accessible from a web
      server, or with <literal>ftp://</literal> or
      <literal>ftps://</literal> for a source available on an FTP server. The
      URL can also start with <literal>cdrom:</literal> for CD-ROM/DVD/Blu-ray
      disc based installations, although this is less frequent, since
      network-based installation methods are eventually more common. More
      methods like <literal>ssh://</literal> or
      <literal>tor+http(s)://</literal> are supported and are either described
      in
      <citerefentry><refentrytitle>sources.list</refentrytitle><manvolnum>5</manvolnum></citerefentry>
      or their respective <emphasis
      role="pkg">apt-transport-<replaceable>method</replaceable></emphasis>
      package documentation.</para>

      <para>The syntax of the last field depends on the structure of the
      repository. In the simplest case, you can simply indicate a
      subdirectory (with a required trailing slash) of the desired source.
      This is often a simple “<filename>./</filename>” which refers to the
      absence of a subdirectory. The packages are then directly at the
      specified URL. But in the most common case, the repositories will be
      structured like a Debian mirror, with multiple distributions, each
      having multiple components. In those cases, name the chosen
      distribution by its “codename” — see the list in sidebar <xref
      linkend="sidebar.bruce-perens"/> — or by the corresponding “suite”
      (<literal>oldoldstable</literal>, <literal>oldstable</literal>, <literal>stable</literal>,
      <literal>testing</literal>, <literal>unstable</literal>) and then the
      components to enable. A typical Debian mirror provides the components
      <literal>main</literal>, <literal>contrib</literal>, and
      <literal>non-free</literal>.</para>

      <sidebar id="sidebar.sections">
        <title><emphasis>VOCABULARY</emphasis> The <literal>main</literal>, <literal>contrib</literal> and <literal>non-free</literal> archives</title>
        <indexterm><primary>component</primary><secondary><literal>main</literal></secondary></indexterm>
        <indexterm><primary><literal>main</literal>, component</primary></indexterm>
        <indexterm><primary>component</primary><secondary><literal>contrib</literal></secondary></indexterm>
        <indexterm><primary><literal>contrib</literal>, component</primary></indexterm>
        <indexterm><primary>component</primary><secondary><literal>non-free</literal></secondary></indexterm>
        <indexterm><primary><literal>non-free</literal>, component</primary></indexterm>
        <indexterm><primary>component (of a repository)</primary></indexterm>

        <para>Debian uses three components to differentiate packages according
        to the licenses chosen by the authors of each work.
        <literal>Main</literal> gathers all packages which fully comply with
        the <link linkend="sect.dfsg">Debian Free Software Guidelines</link>.
        </para>

        <para>The <literal>non-free</literal> component is different because it
        contains software which does not (entirely) conform to these principles
        but which can, nevertheless, be distributed without restrictions. This
        archive, which is not officially part of Debian, is a service for users
        who could need some of those programs and, nowadays, also require the
        firmware for their hardware. However, Debian always recommends giving
        priority to free software. The existence of this component represents a
        considerable problem for Richard M. Stallman and keeps the Free
        Software Foundation from recommending Debian to users.</para>

        <para><literal>Contrib</literal> (contributions) is a set of open
        source software which cannot function without some non-free elements —
        these elements can be software from the <literal>non-free</literal>
        section, or non-free files such as game ROMs, BIOS of consoles, etc. —
        or some elements, not available from the Debian <literal>main</literal>
        archive at all.  The <literal>contrib</literal> component also includes
        free software whose compilation requires proprietary elements. This was
        initially the case for the OpenOffice.org office suite, which used to
        require a proprietary Java environment.</para>
      </sidebar>

      <sidebar>
        <title><emphasis>TIP</emphasis> Files in <filename>/etc/apt/sources.list.d/</filename></title>
        <indexterm><primary>APT</primary><secondary><filename>/etc/apt/sources.list.d/</filename></secondary></indexterm>

        <para>If many package sources are referenced, it can be useful to split
        them in multiple files. Each part is then stored in
        <filename>/etc/apt/sources.list.d/<replaceable>filename</replaceable>.list</filename>
        (see sidebar <xref linkend="sidebar.directory.d"/>).</para>
      </sidebar>

      <indexterm><primary><command>apt-cdrom</command></primary></indexterm>

      <para>The <literal>cdrom</literal> entries describe the CD/DVD-ROMs you
      have. Contrary to other entries, a CD-ROM is not always available since
      it has to be inserted into the drive and since only one disc can be read
      at a time. For those reasons, these sources are managed in a slightly
      different way, and need to be added with the <command>apt-cdrom</command>
      program, usually executed with the <literal>add</literal> parameter. The
      latter will then request the disc to be inserted in the drive and will
      browse its contents looking for <filename>Packages</filename> files. It
      will use these files to update its database of available packages (this
      operation is usually done by the <command>apt update</command> command).
      From then on, APT can require the disc to be inserted if it needs one of
      its packages.</para>
    </section>

    <section id="sect.apt-sources.list.stable">
      <title>Repositories for <emphasis role="distribution">Stable</emphasis> Users</title>
      <indexterm><primary><filename>sources.list</filename></primary><secondary><literal>stable</literal></secondary></indexterm>
      <indexterm><primary><literal>stable</literal></primary></indexterm>
      <indexterm><primary><literal>stable-security</literal></primary></indexterm>
      <indexterm><primary><literal>stable-backports</literal></primary></indexterm>
      <indexterm><primary><literal>stable-updates</literal></primary></indexterm>
      <!-- MAYCHANGE: default codename -->
      <indexterm><primary><literal>bullseye</literal></primary></indexterm>
      <indexterm><primary><literal>bullseye-security</literal></primary></indexterm>
      <indexterm><primary><literal>bullseye-backports</literal></primary></indexterm>
      <indexterm><primary><literal>bullseye-updates</literal></primary></indexterm>

      <para>Here is a standard <filename>sources.list</filename> for a system running
      the <emphasis role="distribution">Stable</emphasis> version of Debian:</para>

      <!-- MAYCHANGE: default codename -->
      <example id="example.stable-sources-list">
        <title><filename>/etc/apt/sources.list</filename> file for users of Debian Stable</title>
        <indexterm><primary>APT</primary><secondary><filename>/etc/apt/sources.list</filename></secondary><tertiary><literal>stable</literal></tertiary></indexterm>
        <indexterm><primary><literal>deb.debian.org</literal></primary></indexterm>

        <!-- TODO: <programlistingco> ? -->
        <programlisting># Security updates
deb http://security.debian.org/ bullseye-security main contrib non-free
deb-src http://security.debian.org/ bullseye-security main contrib non-free

## Debian mirror

# Base repository
deb https://deb.debian.org/debian bullseye main contrib non-free
deb-src https://deb.debian.org/debian bullseye main contrib non-free

# Stable updates
deb https://deb.debian.org/debian bullseye-updates main contrib non-free
deb-src https://deb.debian.org/debian bullseye-updates main contrib non-free

# Stable backports
deb https://deb.debian.org/debian bullseye-backports main contrib non-free
deb-src https://deb.debian.org/debian bullseye-backports main contrib non-free
</programlisting>
      </example>

      <para>This file lists all sources of packages associated with the
      <emphasis role="distribution">Bullseye</emphasis> version of Debian (the
      current <emphasis role="distribution">Stable</emphasis> suite as of this
      writing). In the example above, we opted to name “bullseye” explicitly
      instead of using the corresponding “stable“ aliases
      (<literal>stable</literal>, <literal>stable-updates</literal>,
      <literal>stable-backports</literal>) because we don't want to have the
      underlying distribution changed outside of our control when the next
      stable release comes out.</para>

      <para>Most packages will come from the “base repository”, which contains
      all packages but is seldom updated (about once every 2 months for a
      “point release”). The other repositories are partial (they do not contain
      all packages) and can host updates (packages with newer version) that APT
      might install. The following sections will explain the purpose and the
      rules governing each of those repositories.</para>

      <para>Note that when the desired version of a package is available on
      several repositories, the first one listed in the
      <filename>sources.list</filename> file will be used. For this reason,
      non-official sources are usually added at the end of the file.</para>

      <para>As a side note, most of what this section says about <emphasis
      role="distribution">Stable</emphasis> applies equally well to <emphasis
      role="distribution">Oldstable</emphasis> since the latter is just an
      older <emphasis role="distribution">Stable</emphasis> that is maintained
      in parallel.</para>

      <section id="sect.security-updates">
        <title>Security Updates</title>
        <indexterm><primary><literal>security.debian.org</literal></primary></indexterm>
        <indexterm><primary>security</primary><secondary>updates</secondary></indexterm>
        <!-- MAYCHANGE: stable release name -->
        <indexterm><primary>updates</primary><secondary>security updates</secondary></indexterm>
        <indexterm><primary>updates</primary><secondary><literal>stable-security</literal></secondary></indexterm>
        <indexterm><primary>updates</primary><secondary><literal>bullseye-security</literal></secondary></indexterm>
        <indexterm><primary>updates</primary><secondary><literal>stable</literal>, security</secondary></indexterm>
        <indexterm><primary>updates</primary><secondary><literal>bullseye</literal>, security</secondary></indexterm>
        <indexterm><primary><literal>stable-security</literal></primary></indexterm>
        <indexterm><primary><literal>bullseye-security</literal></primary></indexterm>

        <indexterm><primary><acronym>CVE</acronym></primary><seealso>Common Vulnerabilities and Exposures</seealso></indexterm>
        <indexterm><primary>Common Vulnerabilities and Exposures</primary><seealso>CVE</seealso></indexterm>

        <para>Debian takes security seriously. Known software vulnerabilities
        in Debian are tracked in the <ulink
        url="https://security-tracker.debian.org">Security Bug Tracker</ulink>
        and usually get fixed in a reasonable timeframe. The security updates
        are not hosted on the usual network of Debian mirrors but on
        <literal>security.debian.org</literal>, a small set of machines
        maintained by the <link linkend="dsa-team">Debian System
        Administrators</link>. This archive contains security updates prepared
        by the Debian Security Team and/or by package maintainers for the
        <emphasis role="distribution">Stable</emphasis> and <emphasis
        role="distribution">Oldstable</emphasis> distribution.</para>

        <para>The server can also host security updates for <emphasis
        role="distribution">Testing</emphasis> but this doesn't happen very
        often since those updates tend to reach that suite via the regular flow of
        updates coming from <emphasis
        role="distribution">Unstable</emphasis>.</para>

        <indexterm><primary><acronym>DSA</acronym></primary><seealso>Debian Security Advisory</seealso></indexterm>
        <indexterm><primary>Debian Security Advisory</primary></indexterm>

        <para>For serious issues, the security team issues a <literal>Debian
        Security Advisory</literal> (<acronym>DSA</acronym>) and announces it
        together with the security update on the
        <email>debian-security-announce@lists.debian.org</email> mailing list
        (<ulink
        url="https://lists.debian.org/debian-security-announce/">archive</ulink>).
        </para>

        <indexterm><primary>mailing lists</primary><secondary><email>debian-security-announce@lists.debian.org</email></secondary></indexterm>
      </section>

      <section id="sect.apt-sources.list.stable.updates">
        <title>Stable Updates</title>
        <indexterm><primary>stable updates</primary></indexterm>
        <!-- MAYCHANGE: stable release name -->
        <indexterm><primary>updates</primary><secondary><literal>stable</literal></secondary></indexterm>
        <indexterm><primary>updates</primary><secondary><literal>bullseye</literal></secondary></indexterm>
        <indexterm><primary><literal>stable-updates</literal></primary></indexterm>
        <indexterm><primary><literal>bullseye-updates</literal></primary></indexterm>

        <para>Stable updates are not security sensitive but are deemed
        important enough to be pushed to users before the next stable
        point release.</para>

        <para>This repository will typically contain fixes for critical and
        serious bugs which could not be fixed before release or which have been
        introduced by subsequent updates. Depending on the urgency, it can also
        contain updates for packages that have to evolve over time, like
        <emphasis role="pkg">spamassassin</emphasis>'s spam detection rules,
        <emphasis role="pkg">clamav</emphasis>'s virus database, the
        daylight-saving time rules of all timezones (<emphasis
        role="pkg">tzdata</emphasis>), the <acronym>ESR</acronym> version of
        Firefox (<emphasis role="pkg">firefox-esr</emphasis>) or cryptographic
        keyrings like <emphasis
        role="pkg">debian-archive-keyring</emphasis>.</para>

        <indexterm><primary><acronym>ESR</acronym></primary><seealso>Extended Support Release</seealso></indexterm>
        <indexterm><primary>Extended Support Release</primary></indexterm>

        <para>In practice, this repository is a subset of the
        <literal>proposed-updates</literal> repository, carefully selected by
        the <link linkend="srm-team">Stable Release Managers</link>. All
        updates are announced on the
        <email>debian-stable-announce@lists.debian.org</email> mailing list
        (<ulink
        url="https://lists.debian.org/debian-stable-announce/">archive</ulink>)
        and will be included in the next <emphasis
        role="distribution">Stable</emphasis> point release anyway.</para>

        <indexterm><primary>mailing lists</primary><secondary><email>debian-stable-announce@lists.debian.org</email></secondary></indexterm>
      </section>

      <section id="sect.apt-sources.list.stable.proposed-updates">
        <title>Proposed Updates</title>
        <!-- MAYCHANGE: stable release name -->
        <indexterm><primary>proposed updates</primary></indexterm>
        <indexterm><primary><literal>proposed-updates</literal></primary></indexterm>
        <indexterm><primary><literal>stable-proposed-updates</literal></primary></indexterm>
        <indexterm><primary><literal>bullsey-proposed-updates</literal></primary></indexterm>
        <indexterm><primary>updates</primary><secondary>proposed</secondary></indexterm>
        <indexterm><primary>updates</primary><secondary><literal>stable-proposed</literal></secondary></indexterm>
        <indexterm><primary>updates</primary><secondary><literal>bullseye-proposed</literal></secondary></indexterm>
        <indexterm><primary>updates</primary><secondary><literal>stable</literal>, proposed</secondary></indexterm>
        <indexterm><primary>updates</primary><secondary><literal>bullseye</literal>, proposed</secondary></indexterm>
        <indexterm><primary><literal>stable-updates</literal>, proposed</primary></indexterm>
        <indexterm><primary><literal>bullseye-updates</literal>, proposed</primary></indexterm>

        <para>Once published, the <emphasis
        role="distribution">Stable</emphasis> distribution is only updated
        about once every 2 months. The <literal>proposed-updates</literal>
        repository is where the expected updates are prepared (under the
        supervision of the Stable Release Managers).</para>

        <para>The security and stable updates documented in the former
        sections are always included in this repository, but there is more
        too, because package maintainers also have the opportunity to fix
        important bugs that do not deserve an immediate release.</para>

        <para>Anyone can use this repository to test those updates before their
        official publication. The extract below uses the
        <literal>bullseye-proposed-updates</literal> alias which is both more
        explicit and more consistent since
        <literal>buster-proposed-updates</literal> also exists (for the
        <emphasis role="distribution">Oldstable</emphasis> updates):</para>

        <!-- MAYCHANGE: stable release name -->
        <programlisting>deb https://deb.debian.org/debian bullseye-proposed-updates main contrib non-free
</programlisting>
      </section>

      <section id="sect.apt-sources.list.stable.backports">
        <title>Stable Backports</title>
        <indexterm><primary>backport</primary></indexterm>
        <indexterm><primary>updates</primary><secondary>backports</secondary></indexterm>
        <!-- MAYCHANGE: stable release name -->
        <indexterm><primary>updates</primary><secondary><literal>stable-backports</literal></secondary></indexterm>
        <indexterm><primary>updates</primary><secondary><literal>bullseye-backports</literal></secondary></indexterm>
        <indexterm><primary>updates</primary><secondary><literal>stable</literal>, backports</secondary></indexterm>
        <indexterm><primary>updates</primary><secondary><literal>bullseye</literal>, backports</secondary></indexterm>
        <indexterm><primary><literal>stable-backports</literal></primary></indexterm>
        <indexterm><primary><literal>bullseye-backports</literal></primary></indexterm>

        <para>The <literal>stable-backports</literal> repository hosts “package
        backports”. The term refers to a package of some recent software which
        has been recompiled for an older distribution, generally for <emphasis
        role="distribution">Stable</emphasis>.</para>

        <para>When the distribution becomes a little dated, numerous software
        projects have released new versions that are not integrated into the
        current <emphasis role="distribution">Stable</emphasis> suite, which is
        only modified to address the most critical problems, such as security
        issues.  Since the <emphasis role="distribution">Testing</emphasis> and
        <emphasis role="distribution">Unstable</emphasis> suites can be more
        risky, package maintainers sometimes voluntarily offer recompilations
        of recent software applications for <emphasis
        role="distribution">Stable</emphasis>, which has the advantage to users
        and system administrators to limit potential instability to a small
        number of chosen packages. The page <ulink
        url="https://backports.debian.org"/> provides more information.</para>

        <indexterm><primary><literal>backports.debian.org</literal></primary><seealso>backports</seealso></indexterm>

        <para>Backports from <literal>stable-backports</literal> are only
        created from packages available in <emphasis
        role="distribution">Testing</emphasis>. This ensures that all installed
        backports will be upgradable to the corresponding stable version once
        the next stable release of Debian is available.</para>

        <para>Even though this repository provides newer versions of packages,
        <literal>APT</literal> will not install them unless you give explicit
        instructions to do so (or unless you have already done so with a former
        version of the given backport):</para>

        <!-- MAYCHANGE: stable release name -->
        <screen><computeroutput>$ </computeroutput><userinput>sudo apt-get install <replaceable>package</replaceable>/bullseye-backports
</userinput><computeroutput>$ </computeroutput><userinput>sudo apt-get install -t bullseye-backports <replaceable>package</replaceable>
</userinput></screen>

      </section>
    </section>

    <section id="sect.apt-sources.list.testing">
      <title>Repositories for <emphasis role="distribution">Testing</emphasis>/<emphasis role="distribution">Unstable</emphasis> Users</title>
      <indexterm><primary><filename>sources.list</filename></primary><secondary><literal>testing</literal></secondary></indexterm>
      <indexterm><primary><filename>sources.list</filename></primary><secondary><literal>unstable</literal></secondary></indexterm>

      <para>Here is a standard <filename>sources.list</filename> for a system
      running the <emphasis role="distribution">Testing</emphasis> or <emphasis
      role="distribution">Unstable</emphasis> version of Debian:</para>

      <example id="example.testing-sources-list">
        <title><filename>/etc/apt/sources.list</filename> file for users of Debian <emphasis role="distribution">Testing</emphasis>/<emphasis role="distribution">Unstable</emphasis></title>
        <indexterm><primary><literal>deb.debian.org</literal></primary></indexterm>
        <indexterm><primary>APT</primary><secondary><filename>/etc/apt/sources.list</filename></secondary><tertiary><literal>testing</literal></tertiary></indexterm>
        <indexterm><primary>APT</primary><secondary><filename>/etc/apt/sources.list</filename></secondary><tertiary><literal>unstable</literal></tertiary></indexterm>

        <programlisting>
# Unstable
deb https://deb.debian.org/debian unstable main contrib non-free
deb-src https://deb.debian.org/debian unstable main contrib non-free

# Testing
deb https://deb.debian.org/debian testing main contrib non-free
deb-src https://deb.debian.org/debian testing main contrib non-free

# Testing security updates
deb http://security.debian.org/ testing-security main contrib non-free
deb-src http://security.debian.org/ testing-security main contrib non-free

# Stable
deb https://deb.debian.org/debian stable main contrib non-free
deb-src https://deb.debian.org/debian stable main contrib non-free

# Stable security updates
deb http://security.debian.org/ stable-security main contrib non-free
deb-src http://security.debian.org/ stable-security main contrib non-free
</programlisting>
      </example>

      <sidebar>
        <title><emphasis>NOTE</emphasis> Layout of security repositories</title>
        <indexterm><primary><literal>stable/updates</literal></primary><seealso><literal>stable-security</literal></seealso></indexterm>
        <indexterm><primary><literal>bullseye/updates</literal></primary><seealso><literal>bullseye-security</literal></seealso></indexterm>

        <para>Starting with Debian 11 <emphasis
        role="distribution">Bullseye</emphasis>, the codename of the repository
        providing security updates has been renamed from
        <literal><replaceable>codename</replaceable>/updates</literal> into
        <literal><replaceable>codename</replaceable>-security</literal> to
        avoid the confusion with
        <literal><replaceable>codename</replaceable>-updates</literal> (see
        <xref linkend="sect.apt-sources.list.stable.updates" />).
        <ulink type="block"
        url="https://www.debian.org/releases/bullseye/amd64/release-notes/ch-information.en.html#security-archive"/>
        </para>

      </sidebar>

      <indexterm><primary>APT</primary><secondary><literal>APT::Default-Release</literal></secondary></indexterm>

      <para>With this <filename>sources.list</filename> file APT will install
      packages from the <emphasis role="distribution">Unstable</emphasis>
      suite.  If that is not desired, use the
      <literal>APT::Default-Release</literal> setting (see <xref
      linkend="sect.apt-upgrade" />) to instruct APT to pick packages from
      another suite (most likely <emphasis
      role="distribution">Testing</emphasis> in this case).</para>

      <para>There are good reasons to include all those repositories, even
      though a single one should be enough. <emphasis
      role="distribution">Testing</emphasis> users will appreciate the
      possibility to cherry-pick a fixed package from <emphasis
      role="distribution">Unstable</emphasis> when the version in <emphasis
      role="distribution">Testing</emphasis> is affected by an annoying bug. On
      the other hand, <emphasis role="distribution">Unstable</emphasis> users
      bitten by unexpected regressions have the possibility to downgrade
      packages to their (supposedly working) <emphasis
      role="distribution">Testing</emphasis> version.</para>

      <para>The inclusion of <emphasis role="distribution">Stable</emphasis> is
      more debatable but it often gives access to some packages, which have
      been removed from the development versions. It also ensures that you get
      the latest updates for packages, which have not been modified since the
      last stable release.</para>

      <section>
        <title>The <emphasis role="distribution">Experimental</emphasis> Repository</title>
        <indexterm><primary><emphasis role="distribution">Experimental</emphasis></primary></indexterm>

        <para>The archive of <emphasis
        role="distribution">Experimental</emphasis> packages is present on all
        Debian mirrors, and contains packages which are not in the <emphasis
        role="distribution">Unstable</emphasis> version yet because of their
        substandard quality — they are often software development versions or
        pre-versions (alpha, beta, release candidate…). A package can also be
        sent there after undergoing subsequent changes which can generate
        problems. The maintainer then tries to uncover them with help from
        advanced users who can handle important issues. After this first stage,
        the package is moved into <emphasis
        role="distribution">Unstable</emphasis>, where it reaches a much larger
        audience and where it will be tested in much more detail.</para>

        <para><emphasis role="distribution">Experimental</emphasis> is
        generally used by users who do not mind breaking their system and
        then repairing it. This distribution gives the possibility to
        import a package which a user wants to try or use as the need
        arises. That is exactly how Debian approaches it, since adding it
        in APT's <filename>sources.list</filename> file does not lead to
        the systematic use of its packages. The line to be added is:</para>

        <informalexample>
          <programlisting>deb https://deb.debian.org/debian experimental main contrib non-free</programlisting>
        </informalexample>
      </section>
    </section>

    <section id="sect.apt-sources.list.cdn">
      <title>Using Alternate Mirrors</title>

      <indexterm><primary><literal>deb.debian.org</literal></primary><see>mirrors</see></indexterm>
      <indexterm><primary>mirrors</primary><secondary><literal>deb.debian.org</literal></secondary></indexterm>
      <indexterm><primary>mirrors</primary></indexterm>
      <indexterm><primary><acronym>CDN</acronym></primary><see>Content Delivery Networks</see></indexterm>
      <indexterm><primary>Content Delivery Networks</primary></indexterm>

      <para>The <filename>sources.list</filename> examples in this chapter
      refer to package repositories hosted on <literal>deb.debian.org</literal>.
      Those URLs will redirect you to servers which are close to you and which
      are managed by Content Delivery Networks (<acronym>CDN</acronym>) whose
      main role is to store multiple copies of the files across the world, and
      to deliver them as fast as possible to users. The CDN companies that
      Debian is working with are Debian partners who are offering their
      services freely to Debian.  While none of those servers are under direct
      control of Debian, the fact that the whole archive is sealed by GPG
      signatures makes it a non-issue.
      <ulink type="block" url="https://deb.debian.org/"/>
      </para>

      <indexterm><primary>mirror list</primary><seealso>mirrors</seealso></indexterm>
      <indexterm><primary>list of mirrors</primary><seealso>mirrors</seealso></indexterm>

      <para>Picky users who are not satisfied with the performance of
      <literal>deb.debian.org</literal> can try to find a better mirror in the
      official mirror list: <ulink type="block"
      url="https://www.debian.org/mirror/list"/> </para>

      <indexterm><primary>mirrors</primary><secondary><literal>ftp.<replaceable>country-code</replaceable>.debian.org</literal></secondary></indexterm>

      <para>But when you don't know which mirror is best for you, this list is
      of not much use. Fortunately for you, Debian maintains DNS entries of the
      form
      <literal>ftp.<replaceable>country-code</replaceable>.debian.org</literal>
      (e.g. <literal>ftp.us.debian.org</literal> for the USA,
      <literal>ftp.fr.debian.org</literal> for France, etc.) which are covering
      many countries and which are pointing to one (or more) of the best
      mirrors available within that country.</para>

      <indexterm><primary><literal>httpredir.debian.org</literal></primary><see>mirrors</see></indexterm>
      <indexterm><primary>mirrors</primary><secondary><literal>httpredir.debian.org</literal></secondary></indexterm>
      <indexterm><primary>mirrors</primary><secondary><literal>deb.debian.org</literal></secondary></indexterm>

      <para>As an alternative to <literal>deb.debian.org</literal>, there used
      to be <literal>httpredir.debian.org</literal>. This service would
      identify a mirror close to you (among the list of official mirrors, using
      GeoIP mainly) and would redirect APT's requests to that mirror. This
      service has been deprecated due to reliability concerns and now
      <literal>httpredir.debian.org</literal> provides the same CDN-based
      service as <literal>deb.debian.org</literal>.</para>

    </section>

    <section id="sect.apt-sources.list.mentors">
      <title>Non-Official Resources: <literal>mentors.debian.net</literal></title>
      <indexterm><primary><literal>mentors.debian.net</literal></primary></indexterm>

      <para>There are numerous non-official sources of Debian packages set up
      by advanced users who have recompiled some software — Ubuntu made this
      popular with their Personal Package Archive (<acronym>PPA</acronym>)
      service — by programmers who make their creation available to all, and
      even by Debian developers who offer pre-versions of their package
      online.</para>

      <para>The <ulink
      url="https://mentors.debian.net"><literal>mentors.debian.net</literal></ulink>
      site is interesting (although it only provides source packages), since it
      gathers packages created by candidates to the status of official Debian
      developer or by volunteers who wish to create Debian packages without
      going through that process of integration. These packages are made
      available without any guarantee regarding their quality; make sure that
      you check their origin and integrity and then test them before you
      consider using them in production.</para>

      <sidebar>
        <title><emphasis>COMMUNITY</emphasis> The <literal>debian.net</literal> sites</title>
        <indexterm><primary><emphasis>debian.net</emphasis></primary></indexterm>

        <para>The <emphasis>debian.net</emphasis> domain is not an official
        resource of the Debian project. Each Debian developer may use that
        domain name for their own use. These websites can contain unofficial
        services (sometimes personal sites) hosted on a machine which does not
        belong to the project and set up by Debian developers, or even
        prototypes about to be moved on to <emphasis>debian.org</emphasis>. Two
        reasons can explain why some of these prototypes remain on
        <emphasis>debian.net</emphasis>: either no one has made the necessary
        effort to transform it into an official service (hosted on the
        <emphasis>debian.org</emphasis> domain, and with a certain guarantee of
        maintenance), or the service is too controversial to be
        officialized.</para>
      </sidebar>

      <para>Installing a package means giving root rights to its creator,
      because they decide on the contents of the initialization scripts
      which are run under that identity. Official Debian packages are
      created by volunteers who have been co-opted and reviewed and who can
      seal their packages so that their origin and integrity can be
      checked.</para>

      <para>In general, be wary of a package whose origin you don't know and
      which isn't hosted on one of the official Debian servers: evaluate the
      degree to which you can trust the creator, and check the integrity of the
      package.</para>

      <sidebar id="sidebar.snapshot.debian.org">
        <title><emphasis>GOING FURTHER</emphasis> Old package versions: <literal>snapshot.debian.org</literal> and <literal>archive.debian.org</literal></title>
        <indexterm><primary><literal>archive.debian.org</literal></primary></indexterm>
        <indexterm><primary>old releases</primary></indexterm>
        <indexterm><primary>package</primary><secondary>wayback machine</secondary></indexterm>
        <indexterm><primary>archive</primary><secondary>old releases</secondary><seealso><literal>archive.debian.org</literal></seealso></indexterm>
        <indexterm><primary>archive</primary><secondary>old packages</secondary><seealso><literal>snapshot.debian.org</literal></seealso></indexterm>

        <para>The Debian project frequently releases new stable versions of
        their distribution, rendering old releases eventually outdated and
        unsupported (see <xref linkend="sect.release-lifecycle"/>). The
        repositories belonging to these releases are then removed from the
        official mirrors, but can still be accessed using the service at <ulink
        url="https://www.debian.org/distrib/archive.en"><literal>archive.debian.org</literal></ulink>.
        Note, that this service allows access to any of the old Debian
        releases, but does not provide the source package for every binary
        package offered.</para>

        <para>The <ulink
        url="https://snapshot.debian.org"><literal>snapshot.debian.org</literal></ulink>
        service, introduced in April 2010, can be used to “go backwards in
        time” and to find an old binary or source version of a package not longer contained in
        the Debian archives. It can be used, for example, to identify which
        version of a package introduced a regression, and more concretely, to
        come back to the former version while waiting for the regression
        fix. This service does not only offer source and binary packages from
        older releases, but also versions superseeded by regular maintainer
        uploads.</para>
      </sidebar>
    </section>

    <section id="sect.apt-sources.list.cache-proxy">
      <title>Caching Proxy for Debian Packages</title>
      <indexterm><primary>proxy cache</primary></indexterm>
      <indexterm><primary>cache, proxy</primary></indexterm>

      <para>When an entire network of machines is configured to use the same
      remote server to download the same updated packages, any administrator
      knows that it would be beneficial to have an intermediate proxy acting as
      a network-local cache (see sidebar <xref linkend="sidebar.cache"
      />).</para>

      <para>You can configure APT to use a "standard" proxy (see <xref
      linkend="sect.apt-config" /> for the APT side, and <xref
      linkend="sect.http-ftp-proxy" /> for the proxy side), but the Debian
      ecosystem offers better options to solve this problem. The dedicated
      software presented in this section are smarter than a plain proxy cache
      because they can rely on the specific structure of APT repositories (for
      instance they know when individual files are obsolete or not, and thus
      adjust the time during which they are kept).</para>

      <indexterm><primary><emphasis role="pkg">apt-cacher</emphasis></primary></indexterm>
      <indexterm><primary><emphasis role="pkg">apt-cacher-ng</emphasis></primary></indexterm>

      <para><emphasis role="pkg">apt-cacher</emphasis> and <emphasis
      role="pkg">apt-cacher-ng</emphasis> work like usual proxy cache servers.
      APT's <filename>sources.list</filename> is left unchanged, but APT is
      configured to use them as proxy for outgoing requests.</para>

      <indexterm><primary><emphasis role="pkg">approx</emphasis></primary></indexterm>
      <indexterm><primary><filename>/etc</filename></primary><secondary><filename>/etc/approx/approx.conf</filename></secondary></indexterm>

      <para><emphasis role="pkg">approx</emphasis>, on the other hand, acts
      like an HTTP server that “mirrors” any number of remote repositories in
      its top-level URLs. The mapping between those top-level directories and
      the remote URLs of the repositories is stored in
      <filename>/etc/approx/approx.conf</filename>:</para>

      <informalexample>
        <programlisting># &lt;name&gt;   &lt;repository-base-url&gt;
debian     https://deb.debian.org/debian
security   http://security.debian.org/debian-security
        </programlisting>
      </informalexample>

      <para><emphasis role="pkg">approx</emphasis> runs by default on port 9999
      via a systemd socket and requires the users to adjust their
      <filename>sources.list</filename> file to point to the approx
      server:</para>

      <!-- MAYCHANGE: Debian stable release name -->
      <informalexample>
        <programlisting># Sample sources.list pointing to a local approx server
deb http://localhost:9999/security bullseye-security main contrib non-free
deb http://localhost:9999/debian   bullseye main contrib non-free
        </programlisting>
      </informalexample>
    </section>
  </section>

  <section id="sect.apt-get">
    <title><command>aptitude</command>, <command>apt-get</command>, and <command>apt</command> Commands</title>
    <indexterm><primary><command>apt</command></primary></indexterm>
    <indexterm><primary><command>apt-get</command></primary></indexterm>
    <indexterm><primary><command>aptitude</command></primary></indexterm>

    <para><acronym>APT</acronym> is a vast project, whose original plans
    included a graphical interface. It is based on a library which contains the
    core application, and <command>apt-get</command> is the first front end —
    command-line based — which was developed within the project.
    <command>apt</command> is a second command-line based front end provided by
    APT which overcomes some design mistakes of
    <command>apt-get</command>.</para>

    <para>Both tools are built on top of the same library and are thus very
    close, but the default behavior of <command>apt</command> has been improved
    for interactive use and to actually do what most users expect. The APT
    developers reserve the right to change the public interface of this tool
    to further improve it. Conversely, the public interface of
    <command>apt-get</command> is well defined and will not change in any
    backwards incompatible way. It is thus the tool that you want to use when
    you need to script package installation requests.</para>

    <indexterm><primary><command>synaptic</command></primary></indexterm>
    <indexterm><primary><command>wajig</command></primary></indexterm>

    <para>Numerous other graphical interfaces then appeared as external
    projects: <command>synaptic</command>, <command>aptitude</command> (which
    includes both a text mode interface and a graphical one — even if not
    complete yet), <command>wajig</command>, etc. The most recommended
    interface, <command>apt</command>, is the one that we will use in the
    examples given in this section. Note, however, that
    <command>apt-get</command> and <command>aptitude</command> have a very
    similar command line syntax.  When there are major differences between
    these three commands, these will be detailed.</para>

    <section id="sect.apt-update">
      <title>Initialization</title>

      <!-- MAYCHANGE: size of Packages/Sources/Translation files Packages: 8Mb Translation: 6Mb -->

      <para>For any work with APT, the list of available packages needs to be
      updated; this can be done simply through <command>apt update</command>.
      Depending on the speed of your connection and configuration, the
      operation can take a while, since it involves downloading a certain number
      of (usually compressed) files (<filename>Packages</filename>,
      <filename>Sources</filename>,
      <filename>Translation-<replaceable>language-code</replaceable></filename>),
      which have gradually become bigger and bigger as Debian has developed (at
      least 10-16 MB of data for the <literal>main</literal> section). Of course,
      installing from a CD-ROM/DVD set does not require any downloading — in
      this case, the operation is very fast.</para>

      <indexterm><primary><command>apt</command></primary><secondary><literal>update</literal></secondary></indexterm>
      <indexterm><primary><command>apt-get</command></primary><secondary><literal>update</literal></secondary></indexterm>
      <indexterm><primary><command>aptitude</command></primary><secondary><literal>update</literal></secondary></indexterm>
      <indexterm><primary>APT</primary><secondary>update package list</secondary></indexterm>

      <sidebar id="sidebar.apt-pdiff">
        <title><emphasis>TIP</emphasis> Incremental updates</title>

        <!-- MAYCHANGE: size of Packages file, stable release name -->

        <para>The aim of the <command>apt update</command> command is to
        download for each package source the corresponding
        <filename>Packages</filename> (or <filename>Sources</filename>) file.
        However, even after a <command>xz</command> compression, these files
        can remain rather large (the <filename>Packages.xz</filename> for the
        <foreignphrase>main</foreignphrase> section of <emphasis
        role="distribution">Unstable</emphasis> takes more than 8 MB). If you
        wish to update regularly, these downloads can take up a lot of
        time.</para>

        <para>To speed up the process, APT can download “diff” files containing
        the changes since the previous update, as opposed to the entire file.
        To achieve this, official Debian mirrors distribute different files
        which list the differences between one version of the
        <filename>Packages</filename> file and the following version. They are
        generated at each update of the archives and a history of one week is
        kept. Each of these “diff” files only takes a few dozen kilobytes for
        <emphasis role="distribution">Unstable</emphasis>, so that the amount
        of data downloaded by a weekly <command>apt update</command> is often
        divided by 10. For <emphasis role="distribution">Stable</emphasis> and
        <emphasis role="distribution">Testing</emphasis>, which change less,
        the gain is even more noticeable.</para>

        <indexterm><primary>APT</primary><secondary><literal>Acquire::PDiffs</literal></secondary></indexterm>

        <para>However, it can sometimes be of interest to force the download of
        the entire <filename>Packages</filename> file, especially when the last
        upgrade is very old and when the mechanism of incremental differences
        would not contribute much. This can also be interesting when network
        access is very fast but when the processor of the machine to upgrade is
        rather slow, since the time saved on the download is more than lost
        when the computer calculates the new versions of these files (starting
        with the older versions and applying the downloaded differences). To do
        that, you can use the APT configuration parameter
        <literal>Acquire::PDiffs</literal> and set it to
        <literal>false</literal>.</para>

        <informalexample>
          <screen><computeroutput>$ </computeroutput><userinput>sudo apt -o "Acquire::PDiffs=false" update</userinput></screen>
        </informalexample>

        <indexterm><primary>APT</primary><secondary><literal>Acquire::Languages</literal></secondary></indexterm>

        <para>The <literal>Acquire::*</literal> options also control other
        aspects of the download, and even the download methods.
        <literal>Acquire::Languages</literal> can limit or disable the download
        of
        <filename>Translation-<replaceable>language-code</replaceable></filename>
        files and save even more time. For a complete reference see
        <citerefentry><refentrytitle>apt.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry>.</para>

      </sidebar>

    </section>

    <section id="sect.apt.install">
      <title>Installing and Removing</title>
      <indexterm><primary>APT</primary><secondary>package installation</secondary></indexterm>
      <indexterm><primary>APT</primary><secondary>package removal</secondary></indexterm>
      <indexterm><primary>APT</primary><secondary>package purge</secondary></indexterm>
      <indexterm><primary>package</primary><secondary>installation</secondary></indexterm>
      <indexterm><primary>package</primary><secondary>removal</secondary></indexterm>
      <indexterm><primary>package</primary><secondary>purge</secondary></indexterm>
      <indexterm><primary>installation</primary><secondary>package installation</secondary></indexterm>
      <indexterm><primary>removal of a package</primary></indexterm>

      <para>With APT, packages can be added or removed from the system,
      respectively with <command>apt install
      <replaceable>package</replaceable></command> and <command>apt remove
      <replaceable>package</replaceable></command>. In both cases, APT will
      automatically install the necessary dependencies or delete the packages
      which depend on the package that is being removed. The <command>apt purge
      <replaceable>package</replaceable></command> command involves a complete
      uninstallation by deleting the configuration files as well.</para>

      <indexterm><primary><command>apt</command></primary><secondary><literal>install</literal></secondary></indexterm>
      <indexterm><primary><command>apt</command></primary><secondary><literal>remove</literal></secondary></indexterm>
      <indexterm><primary><command>apt</command></primary><secondary><literal>purge</literal></secondary></indexterm>
      <indexterm><primary><command>apt-get</command></primary><secondary><literal>install</literal></secondary></indexterm>
      <indexterm><primary><command>apt-get</command></primary><secondary><literal>remove</literal></secondary></indexterm>
      <indexterm><primary><command>apt-get</command></primary><secondary><literal>purge</literal></secondary></indexterm>
      <indexterm><primary><command>aptitude</command></primary><secondary><literal>install</literal></secondary></indexterm>
      <indexterm><primary><command>aptitude</command></primary><secondary><literal>remove</literal></secondary></indexterm>
      <indexterm><primary><command>aptitude</command></primary><secondary><literal>purge</literal></secondary></indexterm>

      <sidebar>
        <title><emphasis>TIP</emphasis> Installing the same selection of packages several times</title>

        <para>It can be useful to systematically install the same list of
        packages on several computers. This can be done quite easily.</para>

        <para>First, retrieve the list of packages installed on the computer
        which will serve as the “model” to copy.</para>

        <indexterm><primary><command>dpkg</command></primary><secondary><literal>--get-selections</literal></secondary></indexterm>
        <indexterm><primary><command>dpkg</command></primary><secondary><literal>--set-selections</literal></secondary></indexterm>
        <indexterm><primary><command>dpkg</command></primary><secondary><literal>--merge-avail</literal></secondary></indexterm>
        <indexterm><primary><command>apt-get</command></primary><secondary><literal>dselect-upgrade</literal></secondary></indexterm>

        <screen><computeroutput>$ </computeroutput><userinput>dpkg --get-selections &gt;pkg-list</userinput></screen>

        <para>The <filename>pkg-list</filename> file then contains the list of
        installed packages. Next, transfer the <filename>pkg-list</filename>
        file onto the computers you want to update and use the following
        commands:</para>

        <screen>## Update dpkg's database of known packages
# <userinput>avail=`mktemp`</userinput>
# <userinput>apt-cache dumpavail &gt; "$avail"</userinput>
# <userinput>dpkg --merge-avail "$avail"</userinput>
# <userinput>rm -f "$avail"</userinput>
## Update dpkg's selections
# <userinput>dpkg --set-selections &lt; pkg-list</userinput>
## Ask apt-get to install the selected packages
# <userinput>apt-get dselect-upgrade</userinput>
</screen>

        <para>The first commands record the list of available packages in the
        dpkg database. Then <command>dpkg --set-selections</command> restores
        the selection of packages that you wish to install, and the
        <command>apt-get</command> invocation executes the required operations!
        <command>aptitude</command> does not have this command.</para>

      </sidebar>

      <sidebar id="sidebar.apt-install-and-remove">
        <title><emphasis>TIP</emphasis> Removing and installing at the same time</title>
        <indexterm><primary><command>apt</command></primary><secondary><literal>install</literal></secondary><tertiary><replaceable>package</replaceable><literal>+</literal></tertiary></indexterm>
        <indexterm><primary><command>apt</command></primary><secondary><literal>install</literal></secondary><tertiary><replaceable>package</replaceable><literal>-</literal></tertiary></indexterm>
        <indexterm><primary><command>apt-get</command></primary><secondary><literal>install</literal></secondary><tertiary><replaceable>package</replaceable><literal>+</literal></tertiary></indexterm>
        <indexterm><primary><command>apt-get</command></primary><secondary><literal>install</literal></secondary><tertiary><replaceable>package</replaceable><literal>-</literal></tertiary></indexterm>
        <indexterm><primary><command>aptitude</command></primary><secondary><literal>install</literal></secondary><tertiary><replaceable>package</replaceable><literal>+</literal></tertiary></indexterm>
        <indexterm><primary><command>aptitude</command></primary><secondary><literal>install</literal></secondary><tertiary><replaceable>package</replaceable><literal>-</literal></tertiary></indexterm>

        <para>It is possible to ask <command>apt</command> (or
        <command>apt-get</command>, or <command>aptitude</command>) to install
        certain packages and remove others on the same command line by adding a
        suffix. With an <command>apt install</command> command, add
        “<literal>-</literal>” to the names of the packages you wish to remove.
        With an <command>apt remove</command> command, add
        “<literal>+</literal>” to the names of the packages you wish to
        install.</para>

        <para>The next example shows two different ways to install
        <replaceable>package1</replaceable> and to remove
        <replaceable>package2</replaceable>.</para>

        <informalexample>
          <screen># <userinput>apt install <replaceable>package1</replaceable> <replaceable>package2</replaceable>-</userinput></screen>
          <screen># <userinput>apt remove <replaceable>package1</replaceable>+ <replaceable>package2</replaceable></userinput></screen>
        </informalexample>

        <indexterm><primary>dependency solver</primary></indexterm>

        <para>This can also be used to exclude packages which would otherwise
        be installed, for example, due to an automatic installation of
        <literal>Recommends</literal>. In general, the dependency solver will
        use that information as a hint to look for alternative
        solutions.</para>

      </sidebar>

      <sidebar id="sidebar.apt-install-reinstall">
        <title><emphasis>TIP</emphasis> <command>apt --reinstall</command> and <command>aptitude reinstall</command></title>
        <indexterm><primary>APT</primary><secondary>package reinstallation</secondary></indexterm>
        <indexterm><primary>reinstallation</primary></indexterm>
        <indexterm><primary>package</primary><secondary>reinstallation</secondary></indexterm>
        <indexterm><primary><command>apt</command></primary><secondary><literal>install</literal></secondary><tertiary><literal>--reinstall</literal></tertiary></indexterm>
        <indexterm><primary><command>apt-get</command></primary><secondary><literal>install</literal></secondary><tertiary><literal>--reinstall</literal></tertiary></indexterm>
        <indexterm><primary><command>aptitude</command></primary><secondary><literal>reinstall</literal></secondary></indexterm>

        <para>The system can sometimes be damaged after the removal or
        modification of files in a package. The easiest way to retrieve these
        files is to reinstall the affected package. Unfortunately, the
        packaging system finds that the latter is already installed and
        politely refuses to reinstall it; to avoid this, use the
        <literal>--reinstall</literal> option of the <command>apt</command> and
        <command>apt-get</command> commands. The following command reinstalls
        <emphasis role="pkg">postfix</emphasis> even if it is already
        present:</para>

        <informalexample>
          <screen><computeroutput># </computeroutput><userinput>apt --reinstall install postfix</userinput></screen>
        </informalexample>

        <para>The <command>aptitude</command> command line is slightly
        different, but achieves the same result with <command>aptitude
        reinstall postfix</command>.</para>

        <para>The problem does not arise with <command>dpkg</command>, but the
        administrator rarely uses it directly.</para>

        <para>Be careful! Using <command>apt --reinstall</command> to restore
        packages modified during an attack will certainly not recover the
        system as it was. <xref
        linkend="sect.dealing-with-compromised-machine"/> details the necessary
        steps to take with a compromised system.</para>

        <indexterm><primary><command>dpkg</command></primary><secondary><literal>--force-confask</literal></secondary></indexterm>
        <indexterm><primary><command>dpkg</command></primary><secondary><literal>--force-confmiss</literal></secondary></indexterm>

        <para>These commands will not restore the configuration files. But as
        you have learned in <xref linkend="sect.conffiles"/> (see also sidebar
        <xref linkend="sidebar.questions-conffiles-bis"/>), you can use the
        following command to be asked to install the unmodified version and
        even restore any deleted configuration file as well.</para>

        <informalexample>
          <screen><computeroutput># </computeroutput><userinput>apt --reinstall -o Dpkg::Options::="--force-confask,confmiss" install <replaceable>package</replaceable></userinput></screen>
        </informalexample>

        <indexterm><primary><filename>/etc</filename></primary><secondary><filename>/etc/inputrc</filename></secondary></indexterm>

        <para>Some packages don't ship the configuration file found in
        <filename>/etc</filename> with the package. Instead they create it
        during installation by either copying a skeleton or writing it by a
        script. The file <filename>/etc/inputrc</filename>, for example, is a
        copy of <filename>/usr/share/readline/inputrc</filename>. In such cases
        the commands shown above won't work.</para>
      </sidebar>

      <indexterm><primary><command>apt</command></primary><secondary><literal>install</literal></secondary><tertiary><replaceable>package</replaceable>=<replaceable>version</replaceable></tertiary></indexterm>
      <indexterm><primary><command>apt</command></primary><secondary><literal>install</literal></secondary><tertiary><replaceable>package</replaceable>/<replaceable>distribution</replaceable></tertiary></indexterm>
      <indexterm><primary><command>apt-get</command></primary><secondary><literal>install</literal></secondary><tertiary><replaceable>package</replaceable>=<replaceable>version</replaceable></tertiary></indexterm>
      <indexterm><primary><command>apt-get</command></primary><secondary><literal>install</literal></secondary><tertiary><replaceable>package</replaceable>/<replaceable>distribution</replaceable></tertiary></indexterm>

      <para>If the file <filename>sources.list</filename> mentions several
      distributions, it is possible to give the version of the package to
      install. A specific version number can be requested with <command>apt
      install
      <replaceable>package</replaceable>=<replaceable>version</replaceable></command>,
      but indicating its distribution of origin (<emphasis
      role="distribution">Stable</emphasis>, <emphasis
      role="distribution">Testing</emphasis> or <emphasis
      role="distribution">Unstable</emphasis>) — with <command>apt install
      <replaceable>package</replaceable>/<replaceable>distribution</replaceable></command>
      — is usually preferred. With this command, it is possible to go back to
      an older version of a package (if, for instance, you know that it works
      well), provided that it is still available in one of the sources
      referenced by the <filename>sources.list</filename> file.  Otherwise the
      <literal>snapshot.debian.org</literal> archive can come to the rescue
      (see sidebar <xref linkend="sidebar.snapshot.debian.org"/>).</para>

      <example>
        <title>Installation of the <emphasis role="distribution">Unstable</emphasis> version of <emphasis role="pkg">spamassassin</emphasis></title>
        <screen><computeroutput># </computeroutput><userinput>apt install spamassassin/unstable</userinput></screen>
      </example>

      <indexterm><primary><command>apt</command></primary><secondary><literal>install</literal></secondary></indexterm>
      <indexterm><primary><command>apt-get</command></primary><secondary><literal>install</literal></secondary></indexterm>
      <indexterm><primary><filename>.deb</filename></primary></indexterm>

      <para>If the package to install has been made available to you under the
      form of a simple <filename>.deb</filename> file without any associated
      package repository, it is still possible to use APT to install it
      together with its dependencies (provided that the dependencies are
      available in the configured repositories) with a simple command:
      <command>apt install
      ./<replaceable>path-to-the-package.deb</replaceable></command>. The
      leading <literal>./</literal> is important to make it clear that we are
      referring to a filename and not to the name of a package available in one
      of the repositories.  </para>

      <sidebar id="sidebar.apt-clean">
        <title><emphasis>GOING FURTHER</emphasis> The cache of <filename>.deb</filename> files</title>
        <indexterm><primary><filename>/var</filename></primary><secondary><filename>/var/cache/apt/archives/</filename></secondary></indexterm>
        <indexterm><primary><command>apt-get</command></primary><secondary><literal>clean</literal></secondary></indexterm>
        <indexterm><primary><command>apt-get</command></primary><secondary><literal>autoclean</literal></secondary></indexterm>
        <indexterm><primary>APT</primary><secondary>download archive</secondary></indexterm>
        <indexterm><primary>APT</primary><secondary><filename>/var/cache/apt/archives/</filename></secondary></indexterm>
        <indexterm><primary>APT</primary><secondary><literal>APT::Clean-Installed</literal></secondary></indexterm>
        <indexterm><primary><filename>.deb</filename></primary></indexterm>

        <para>APT keeps a copy of each downloaded <filename>.deb</filename>
        file in the directory <filename>/var/cache/apt/archives/</filename>. In
        case of frequent updates, this directory can quickly take a lot of disk
        space with several versions of each package; you should regularly sort
        through them. Two commands can be used: <command>apt-get
        clean</command> entirely empties the directory; <command>apt-get
        autoclean</command> only removes packages which can no longer be
        downloaded (because they have disappeared from the Debian mirror) and
        are therefore clearly useless (the configuration parameter
        <literal>APT::Clean-Installed</literal> can prevent the removal of
        <filename>.deb</filename> files that are currently installed).</para>

      </sidebar>
    </section>

    <section id="sect.apt-upgrade">
      <title>System Upgrade</title>
      <indexterm><primary>upgrade</primary><secondary>system upgrade</secondary></indexterm>
      <indexterm><primary>APT</primary><secondary>system update</secondary></indexterm>
      <indexterm><primary>package</primary><secondary>upgrade</secondary></indexterm>
      <indexterm><primary><command>apt</command></primary><secondary><literal>upgrade</literal></secondary></indexterm>
      <indexterm><primary><command>apt-get</command></primary><secondary><literal>upgrade</literal></secondary></indexterm>
      <indexterm><primary><command>aptitude</command></primary><secondary><literal>safe-upgrade</literal></secondary></indexterm>

      <para>Regular upgrades are recommended, because they include the latest
      security updates. To upgrade, use <command>apt upgrade</command>,
      <command>apt-get upgrade</command> or <command>aptitude
      safe-upgrade</command> (of course after <command>apt update</command>).
      This command looks for installed packages which can be upgraded without
      removing any packages. In other words, the goal is to ensure the least
      intrusive upgrade possible. <command>apt-get</command> is slightly more
      demanding than <command>aptitude</command> or <command>apt</command>
      because it will refuse to install packages which were not installed
      beforehand.</para>

      <para><command>apt</command> will generally select the most recent
      version number (except for packages from <emphasis
      role="distribution">Experimental</emphasis> and <emphasis
      role="distribution">stable-backports</emphasis>, which are ignored by
      default whatever their version number). If you specified <emphasis
      role="distribution">Testing</emphasis> or <emphasis
      role="distribution">Unstable</emphasis> in your
      <filename>sources.list</filename>, <command>apt upgrade</command> will
      switch most of your <emphasis role="distribution">Stable</emphasis>
      system to <emphasis role="distribution">Testing</emphasis> or <emphasis
      role="distribution">Unstable</emphasis>, which might not be what you
      intended.</para>

      <indexterm><primary>APT</primary><secondary><literal>APT::Default-Release</literal></secondary></indexterm>
      <indexterm><primary>APT</primary><secondary><filename>/etc/apt/apt.conf</filename></secondary></indexterm>

      <para>To tell <command>apt</command> to use a specific distribution when
      searching for upgraded packages, you need to use the
      <literal>-t</literal> or <literal>--target-release</literal> option,
      followed by the name of the distribution you want (for example,
      <command>apt -t stable upgrade</command>). To avoid specifying this
      option every time you use <command>apt</command>, you can add
      <literal>APT::Default-Release "stable";</literal> in the file
      <filename>/etc/apt/apt.conf.d/local</filename>.</para>

      <indexterm><primary>APT</primary><secondary>system upgrade</secondary></indexterm>
      <indexterm><primary><command>apt</command></primary><secondary><literal>full-upgrade</literal></secondary></indexterm>
      <indexterm><primary><command>apt</command></primary><secondary><literal>dist-upgrade</literal></secondary></indexterm>
      <indexterm><primary><command>apt-get</command></primary><secondary><literal>dist-upgrade</literal></secondary></indexterm>
      <indexterm><primary><command>aptitude</command></primary><secondary><literal>full-upgrade</literal></secondary></indexterm>
      <indexterm><primary><command>aptitude</command></primary><secondary><literal>dist-upgrade</literal></secondary></indexterm>

      <para>For more important upgrades, such as the change from one major
      Debian version to the next, you need to use <command>apt
      full-upgrade</command>. With this instruction, <command>apt</command>
      will complete the upgrade even if it has to remove some obsolete packages
      or install new dependencies. This is also the command used by users who
      work daily with the Debian <emphasis
      role="distribution">Unstable</emphasis> release and follow its evolution
      day by day. It is so simple that it hardly needs explanation: APT's
      reputation is based on this great functionality.</para>

      <para>Unlike <command>apt</command> and <command>aptitude</command>,
      <command>apt-get</command> doesn't know the
      <command>full-upgrade</command> command. Instead, you should use
      <command>apt-get dist-upgrade</command> (”distribution upgrade”), the
      historical and well-known command that <command>apt</command> and
      <command>aptitude</command> also accept for the convenience of users who
      got used to it.</para>

      <indexterm><primary><filename>/var</filename></primary><secondary><filename>/var/log/apt/</filename></secondary><see>APT</see></indexterm>
      <indexterm><primary>APT</primary><secondary><filename>/var/log/apt/history.log</filename></secondary></indexterm>
      <indexterm><primary>APT</primary><secondary><filename>/var/log/apt/term.log</filename></secondary></indexterm>
      <indexterm><primary>APT</primary><secondary><filename>/var/log/apt/eipp.log.xz</filename></secondary></indexterm>
      <indexterm><primary>dpkg</primary><secondary><filename>/var/log/dpkg.log</filename></secondary></indexterm>
      <indexterm><primary><filename>/var</filename></primary><secondary><filename>/var/log/dpkg.log</filename></secondary></indexterm>

      <para>The results of these operations are logged into
      <filename>/var/log/apt/history.log</filename> and
      <filename>/var/log/apt/term.log</filename>, whereas
      <command>dpkg</command> keeps its log in a file called
      <filename>/var/log/dpkg.log</filename>.</para>

    </section>

    <section id="sect.apt-config">
      <title>Configuration Options</title>
      <indexterm><primary><filename>apt.conf</filename></primary></indexterm>
      <indexterm><primary>APT</primary><secondary>configuration</secondary></indexterm>
      <indexterm><primary>APT</primary><secondary><filename>/etc/apt/apt.conf</filename></secondary></indexterm>
      <indexterm><primary>APT</primary><secondary><filename>/etc/apt/apt.conf.d/</filename></secondary></indexterm>
      <indexterm><primary>APT</primary><secondary><literal>Dpkg::Options</literal></secondary></indexterm>
      <indexterm><primary>APT</primary><secondary><literal>Acquire::http::proxy</literal></secondary></indexterm>
      <indexterm><primary>APT</primary><secondary><literal>Acquire::ftp::proxy</literal></secondary></indexterm>

      <para>Besides the configuration elements already mentioned, it is
      possible to configure certain aspects of APT by adding directives in a
      file of the <filename>/etc/apt/apt.conf.d/</filename> directory or
      <filename>/etc/apt/apt.conf</filename> itself.  Remember, for instance,
      that it is possible for APT to tell <command>dpkg</command> to ignore
      file conflict errors by specifying <literal>DPkg::options {
      "--force-overwrite"; }</literal>.</para>

      <!-- TODO: maybe add Acquire::*, Apt::Get::Show-Upgraded, APT::Install-Recommends?-->

      <para>If the Web can only be accessed through a proxy, add a line like
      <literal>Acquire::http::proxy
      "http://<replaceable>yourproxy</replaceable>:3128"</literal>. For an FTP
      proxy, write <literal>Acquire::ftp::proxy
      "ftp://<replaceable>yourproxy</replaceable>"</literal>. To discover more
      configuration options, read the
      <citerefentry><refentrytitle>apt.conf</refentrytitle><manvolnum>5</manvolnum></citerefentry>
      manual page (for details on manual pages, see <xref
      linkend="sect.manual-pages" />).</para>

      <sidebar id="sidebar.directory.d">
        <title><emphasis>BACK TO BASICS</emphasis> Directories ending in <filename>.d</filename></title>
        <indexterm><primary><filename>.d</filename></primary></indexterm>

        <para>Directories with a <filename>.d</filename> suffix are used more
        and more often. Each directory represents a configuration file which is
        split over multiple files. In this sense, all of the files in
        <filename>/etc/apt/apt.conf.d/</filename> are instructions for the
        configuration of APT. APT includes them in alphabetical order, so that
        the last ones can modify a configuration element defined in one of the
        first ones.</para>

        <para>This structure brings some flexibility to the machine
        administrator and to the package maintainers. Indeed, the administrator
        can easily modify the configuration of the software by adding a
        ready-made file in the directory in question without having to change
        an existing file. Package maintainers use the same approach when they
        need to adapt the configuration of another software to ensure that it
        perfectly co-exists with theirs.  The Debian policy explicitly forbids
        modifying configuration files of other packages — only users are
        allowed to do this. Remember that during a package upgrade, the user
        gets to choose the version of the configuration file that should be
        kept when a modification has been detected. Any external modification
        of the file would trigger that request, which would disturb the
        administrator, who is sure not to have changed anything.</para>

        <indexterm><primary><command>dpkg-divert</command></primary></indexterm>

        <para>Without a <filename>.d</filename> directory, it is impossible for
        an external package to change the settings of a program by modifying
        its configuration file directly. Instead it must either invite the user
        to do it themselves and lists the operations to be done in the file
        <filename>/usr/share/doc/<replaceable>package</replaceable>/README.Debian</filename>,
        or it must create a file diversion for the configuration file using the
        <command>dpkg-divert</command> command and then install its own
        configuration file for the software in question. The latter is
        sometimes used by third party packages which try to handle
        configuration files of software components they use.</para>

        <para>Depending on the application, the <filename>.d</filename>
        directory is used directly or managed by an external script which will
        concatenate all the files to create the configuration file itself. It
        is important to execute the script after any change in that directory
        so that the most recent modifications are taken into account. In the
        same way, it is important not to work directly in the configuration
        file created automatically, since everything would be lost at the next
        execution of the script. The chosen method (<filename>.d</filename>
        directory used directly or a file generated from that directory) is
        usually dictated by implementation constraints, but in both cases the
        gains in terms of configuration flexibility more than make up for the
        small complications that they entail. The Exim 4 mail server is an
        example of the generated file method: it can be configured through
        several files (<filename>/etc/exim4/conf.d/*</filename>) which are
        concatenated into
        <filename>/var/lib/exim4/config.autogenerated</filename> by the
        <command>update-exim4.conf</command> command.</para>
      </sidebar>
    </section>

    <section id="sect.apt.priorities">
      <title>Managing Package Priorities</title>
      <indexterm><primary>pinning, APT pinning</primary></indexterm>
      <indexterm><primary>package</primary><secondary>priority</secondary></indexterm>
      <indexterm><primary>priority</primary><secondary>package priority</secondary></indexterm>

      <para>One of the most important aspects in the configuration of APT is
      the management of the priorities associated with each package source. For
      instance, you might want to extend one distribution with one or two newer
      packages from <emphasis role="distribution">Testing</emphasis>, <emphasis
      role="distribution">Unstable</emphasis> or <emphasis
      role="distribution">Experimental</emphasis>. It is possible to assign a
      priority to each available package (the same package can have several
      priorities depending on its version or the distribution providing it).
      These priorities will influence APT's behavior: for each package, it will
      always select the version with the highest priority (except if this
      version is older than the installed one and if its priority is less
      than 1000).</para>

      <indexterm><primary>apt_preferences</primary></indexterm>
      <indexterm><primary><filename>preferences</filename></primary></indexterm>
      <indexterm><primary>APT</primary><secondary><foreignphrase>pinning</foreignphrase></secondary></indexterm>
      <indexterm><primary>APT</primary><secondary>preferences</secondary></indexterm>
      <indexterm><primary>APT</primary><secondary><literal>APT::Default-Release</literal></secondary></indexterm>
      <indexterm><primary>APT</primary><secondary><filename>/etc/apt/preferences</filename></secondary></indexterm>
      <indexterm><primary>APT</primary><secondary><filename>/etc/apt/preferences.d/</filename></secondary></indexterm>
      <indexterm><primary><command>apt</command></primary><secondary><literal>-t <replaceable>release</replaceable></literal></secondary></indexterm>
      <indexterm><primary><command>apt-get</command></primary><secondary><literal>-t <replaceable>release</replaceable></literal></secondary></indexterm>

      <para>APT defines several default priorities. Each installed package
      version has a priority of 100. A non-installed version has a priority
      of 500 by default, but it can jump to 990 if it is part of the target
      release (defined with the <literal>-t</literal> command-line option or
      the <literal>APT::Default-Release</literal> configuration
      directive).</para>

      <para>You can modify the priorities by adding entries in a file in
      <filename>/etc/apt/preferences.d/</filename> or the
      <filename>/etc/apt/preferences</filename> file with the names of the
      affected packages, their version, their origin and their new
      priority.</para>

      <para>APT will never install an older version of a package (that is, a
      package whose version number is lower than the one of the currently
      installed package) except if its priority is higher than 1000 (or it is
      explicitly requested by the user, see <xref
      linkend="sect.apt.install"/>).  APT will always install the highest
      priority package which follows this constraint. If two packages have the
      same priority, APT installs the newest one (whose version number is the
      highest). If two packages of same version have the same priority but
      differ in their content, APT installs the version that is not installed
      (this rule has been created to cover the case of a package update without
      the increment of the revision number, which is usually required).</para>

      <para>In more concrete terms, a package whose priority is</para>

      <indexterm><primary>APT</primary><secondary>package priority</secondary></indexterm>

      <variablelist>
        <varlistentry>
          <term>&lt; 0</term>
          <listitem>
            <para>will never be installed,</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>1..99</term>
          <listitem>
            <para>will only be installed if no other version of the package is
            already installed,</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>100..499</term>
          <listitem>
            <para>will only be installed if there is no other newer version
            installed or available in another distribution,</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>500....989</term>
          <listitem>
            <para>will only be installed if there is no newer version installed
            or available in the target distribution,</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>990..1000</term>
          <listitem>
            <para>will be installed except if the installed version is newer,</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>&gt; 1000</term>
          <listitem>
            <para>will always be installed, even if it forces APT to downgrade
            to an older version.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <!-- MAYCHANGE: Debian stable release name and number -->
      <para>When APT checks <filename>/etc/apt/preferences</filename> and
      <filename>/etc/apt/preferences.d/</filename>, it first takes into account
      the most specific entries (often those specifying the concerned package),
      then the more generic ones (including, for example, all the packages of a
      distribution). If several generic entries exist, the first match is used.
      The available selection criteria include the package's name and the
      source providing it. Every package source is identified by the
      information contained in a <filename>Release</filename> file that APT
      downloads together with the <filename>Packages</filename> files. It
      specifies the origin (usually “Debian” for the packages of official
      mirrors, but it can also be a person's or an organization's name for
      third-party repositories). It also gives the name of the distribution
      (usually <emphasis role="distribution">Stable</emphasis>, <emphasis
      role="distribution">Testing</emphasis>, <emphasis
      role="distribution">Unstable</emphasis> or <emphasis
      role="distribution">Experimental</emphasis> for the standard
      distributions provided by Debian) together with its version (for example,
      11 for Debian <emphasis role="distribution">Bullseye</emphasis>).  Let's
      have a look at its syntax through some realistic case studies of this
      mechanism.</para>

      <sidebar>
        <title><emphasis>SPECIFIC CASE</emphasis> Priority of <emphasis role="distribution">experimental</emphasis></title>
        <indexterm><primary><emphasis role="distribution">Experimental</emphasis></primary></indexterm>

        <para>If you listed <emphasis
        role="distribution">Experimental</emphasis> in your
        <filename>sources.list</filename> file, the corresponding packages will
        almost never be installed because their default APT priority is 1. This
        is of course a specific case, designed to keep users from installing
        <emphasis role="distribution">Experimental</emphasis> packages by
        mistake.  The packages can only be installed by typing
        <command>aptitude install
        <replaceable>package</replaceable>/experimental</command> — users
        typing this command can only be aware of the risks that they take. It
        is still possible (though <emphasis>not</emphasis> recommended) to
        treat packages of <emphasis role="distribution">Experimental</emphasis>
        like those of other distributions by giving them a priority of 500.
        This is done with a specific entry in
        <filename>/etc/apt/preferences</filename>:</para>

        <informalexample>
          <programlisting>Package: *
Pin: release a=experimental
Pin-Priority: 500
</programlisting>
        </informalexample>
      </sidebar>

      <para>Let's suppose that you only want to use packages from the
      stable version of Debian. Those provided in other versions should not
      be installed except if explicitly requested. You could write the
      following entries in the <filename>/etc/apt/preferences</filename>
      file:</para>

      <informalexample>
        <programlisting>Package: *
Pin: release a=stable
Pin-Priority: 900

Package: *
Pin: release o=Debian
Pin-Priority: -10
</programlisting>
      </informalexample>

      <para><literal>a=stable</literal> defines the name of the selected
      distribution. <literal>o=Debian</literal> limits the scope to
      packages whose origin is “Debian”.</para>

      <!-- TODO: compare APT::Default-Release and pinning
      <sidebar>
        <title><emphasis>ALTERNATIVE</emphasis> Pinning priorities using <literal>APT::Default-Release</literal></title>
        <indexterm><primary><literal>APT::Default-Release</literal></primary></indexterm>

        <para>The configuration option <literal>APT::Default-Release
        "<replaceable>release</replaceable>"</literal> is similar to writing
        these entries into <filename>/etc/apt/preferences</filename>:</para>

        <programlisting>Package: *
Pin: release a=<replaceable>release</replaceable>
Pin-Priority: 990

Package: *
Pin: release o=Debian
Pin-Priority: 500
</programlisting>

      </sidebar>
      -->

      <para>Let's now assume that you have a server with several local
      programs depending on the version 5.28 of Perl and that you want to
      ensure that upgrades will not install another version of it. You
      could use this entry:</para>

      <informalexample>
        <programlisting>Package: perl
Pin: version 5.28*
Pin-Priority: 1001
</programlisting>
      </informalexample>

      <indexterm><primary><command>apt-cache</command></primary><secondary><literal>policy</literal></secondary></indexterm>

      <para>To gain a better understanding of the mechanisms of priority and
      distribution or repository properties to pin do not hesitate to execute
      <command>apt-cache policy</command> to display the default priority
      associated with each package source, or <command>apt-cache policy
      <replaceable>package</replaceable></command> to display the default
      priority for each available version and source of a package as explained
      in <xref linkend="sect.apt-cache-policy"/>.</para>

      <para>The reference documentation for the files
      <filename>/etc/apt/preferences</filename> and
      <filename>/etc/apt/preferences.d/</filename> is available in the manual
      page
      <citerefentry><refentrytitle>apt_preferences</refentrytitle><manvolnum>5</manvolnum></citerefentry>,
      which you can display with <command>man apt_preferences</command>.</para>

      <sidebar>
        <title><emphasis>TIP</emphasis> Comments in <filename>/etc/apt/preferences</filename></title>
        <indexterm><primary>APT</primary><secondary><filename>/etc/apt/preferences</filename></secondary></indexterm>
        <indexterm><primary><literal>Explanation</literal></primary></indexterm>
        <indexterm><primary><literal>Pin</literal></primary></indexterm>
        <indexterm><primary><literal>Pin-Priority</literal></primary></indexterm>
        <indexterm><primary>APT</primary><secondary>preferences</secondary><tertiary><literal>Explanation</literal></tertiary></indexterm>
        <indexterm><primary>APT</primary><secondary>preferences</secondary><tertiary><literal>Package</literal></tertiary></indexterm>
        <indexterm><primary>APT</primary><secondary>preferences</secondary><tertiary><literal>Pin</literal></tertiary></indexterm>
        <indexterm><primary>APT</primary><secondary>preferences</secondary><tertiary><literal>Pin-Priority</literal></tertiary></indexterm>

        <para>There is no official syntax to put comments in the
        <filename>/etc/apt/preferences</filename> file, but some textual
        descriptions can be provided by putting one or more
        “<literal>Explanation</literal>” fields at the start of each
        entry:</para>

        <informalexample>
          <programlisting>Explanation: The package xserver-xorg-video-intel provided
Explanation: in experimental can be used safely
Package: xserver-xorg-video-intel
Pin: release a=experimental
Pin-Priority: 500
</programlisting>
        </informalexample>

      </sidebar>

    </section>

    <section id="sect.apt-mix-distros">
      <title>Working with Several Distributions</title>

      <para><command>apt</command> being such a marvelous tool, it is
      tempting to pick packages coming from other distributions. For
      example, after having installed a <emphasis
      role="distribution">Stable</emphasis> system, you might want to try
      out a software package available in <emphasis
      role="distribution">Testing</emphasis> or <emphasis
      role="distribution">Unstable</emphasis> without diverging too much
      from the system's initial state.</para>

      <para>Even if you will occasionally encounter problems while mixing
      packages from different distributions, <command>apt</command>
      manages such coexistence very well and limits risks very effectively.
      The best way to proceed is to list all distributions used in
      <filename>/etc/apt/sources.list</filename> (some people always put
      the three distributions, but remember that <emphasis
      role="distribution">Unstable</emphasis> is reserved for experienced
      users) and to define your reference distribution with the
      <literal>APT::Default-Release</literal> parameter (see <xref
      linkend="sect.apt-upgrade"/>).</para>

      <para>Let's suppose that <emphasis
      role="distribution">Stable</emphasis> is your reference distribution
      but that <emphasis role="distribution">Testing</emphasis> and
      <emphasis role="distribution">Unstable</emphasis> are also listed in
      your <filename>sources.list</filename> file. In this case, you can
      use <command>apt install
      <replaceable>package</replaceable>/testing</command> to install a
      package from <emphasis role="distribution">Testing</emphasis>. If the
      installation fails due to some unsatisfiable dependencies, let it
      solve those dependencies within <emphasis
      role="distribution">Testing</emphasis> by adding the <literal>-t
      testing</literal> parameter. The same obviously applies to <emphasis
      role="distribution">Unstable</emphasis>.</para>

      <para>In this situation, upgrades (<literal>upgrade</literal> and
      <literal>full-upgrade</literal>) are done within <emphasis
      role="distribution">Stable</emphasis> except for packages already
      upgraded to another distribution: those will follow updates available in
      the other distributions. We will explain this behavior with the help of
      the default priorities set by APT below. Do not hesitate to use
      <command>apt-cache policy</command> (<xref
      linkend="sect.apt-cache-policy"/>) to verify the given
      priorities.</para>

      <para>Everything centers around the fact that APT only considers
      packages of higher or equal version than the installed one (assuming
      that <filename>/etc/apt/preferences</filename> has not been used to
      force priorities higher than 1000 for some packages).</para>

      <para>Let's assume that you have installed version 1 of a first
      package from <emphasis role="distribution">Stable</emphasis> and that
      version 2 and 3 are available respectively in <emphasis
      role="distribution">Testing</emphasis> and <emphasis
      role="distribution">Unstable</emphasis>. The installed version has a
      priority of 100 but the version available in <emphasis
      role="distribution">Stable</emphasis> (the very same) has a priority
      of 990 (because it is part of the target release). Packages in
      <emphasis role="distribution">Testing</emphasis> and <emphasis
      role="distribution">Unstable</emphasis> have a priority of 500 (the
      default priority of a non-installed version). The winner is thus
      version 1 with a priority of 990. The package “stays in <emphasis
      role="distribution">Stable</emphasis>”.</para>

      <para>Let's take the example of another package whose version 2 has
      been installed from <emphasis role="distribution">Testing</emphasis>.
      Version 1 is available in <emphasis
      role="distribution">Stable</emphasis> and version 3 in <emphasis
      role="distribution">Unstable</emphasis>. Version 1 (of priority 990
      — thus lower than 1000) is discarded because it is lower than the
      installed version. This only leaves version 2 and 3, both of
      priority 500. Faced with this alternative, APT selects the newest
      version, the one from <emphasis
      role="distribution">Unstable</emphasis>. If you don't want a package
      installed from <emphasis role="distribution">Testing</emphasis> to
      migrate to the version in <emphasis role="distribution">Unstable</emphasis>, you
      have to assign a priority lower than 500 (490 for example) to
      packages coming from <emphasis
      role="distribution">Unstable</emphasis>. You can modify
      <filename>/etc/apt/preferences</filename> to this effect:</para>

      <programlisting>Package: *
Pin: release a=unstable
Pin-Priority: 490
</programlisting>
    </section>

    <section id="sect.automatic-tracking">
      <title>Tracking Automatically Installed Packages</title>

      <para>One of the essential functionalities of
      <command>apt</command> is the tracking of packages installed
      only through dependencies. These packages are called “automatic”,
      and often include libraries.</para>

      <indexterm><primary><command>apt</command></primary><secondary><literal>autoremove</literal></secondary></indexterm>
      <indexterm><primary><command>apt-get</command></primary><secondary><literal>autoremove</literal></secondary></indexterm>
      <indexterm><primary>APT</primary><secondary>automatic removal</secondary></indexterm>
      <indexterm><primary>package</primary><secondary>automatic removal</secondary></indexterm>

      <para>With this information, when packages are removed, the package
      managers can compute a list of automatic packages that are
      no longer needed (because there is no “manually installed” packages
      depending on them). <command>apt-get autoremove</command> or
      <command>apt autoremove</command> will get
      rid of those packages. <command>aptitude</command> does not have
      this command because it removes them automatically as
      soon as they are identified.
      In all cases, the tools display a clear message listing the affected
      packages.</para>

      <indexterm><primary>package</primary><secondary>automatic</secondary></indexterm>
      <indexterm><primary>package</primary><secondary>manual</secondary></indexterm>
      <indexterm><primary>package</primary><secondary><literal>markauto</literal></secondary></indexterm>
      <indexterm><primary>package</primary><secondary><literal>unmarkauto</literal></secondary></indexterm>
      <indexterm><primary><command>apt-mark</command></primary><secondary><literal>auto</literal></secondary></indexterm>
      <indexterm><primary><command>apt-mark</command></primary><secondary><literal>manual</literal></secondary></indexterm>
      <indexterm><primary><command>aptitude</command></primary><secondary><literal>markauto</literal></secondary></indexterm>
      <indexterm><primary><command>aptitude</command></primary><secondary><literal>unmarkauto</literal></secondary></indexterm>

      <para>It is a good habit to mark as automatic any package that you
      don't need directly so that they are automatically removed when they
      aren't necessary anymore. <command>apt-mark auto
      <replaceable>package</replaceable></command> will mark the given
      package as automatic whereas <command>apt-mark manual
      <replaceable>package</replaceable></command> does the
      opposite. <command>aptitude markauto</command> and
      <command>aptitude unmarkauto</command> work in the same way
      although they offer more features for marking many packages
      at once (see <xref linkend="sect.aptitude" />). The console-based
      interactive interface of <command>aptitude</command> also
      makes it easy to review the “automatic flag” on many packages.</para>

      <indexterm><primary><command>aptitude</command></primary><secondary><literal>why</literal></secondary></indexterm>

      <para>People might want to know why an automatically installed
      package is present on the system. To get this information from the
      command line, you can use <command>aptitude why
        <replaceable>package</replaceable></command>
      (<command>apt</command> and <command>apt-get</command> have no
      similar feature):</para>

      <screen><computeroutput>$ </computeroutput><userinput>aptitude why python3-debian
</userinput><computeroutput>i   aptitude         Suggests apt-xapian-index
p   apt-xapian-index Depends  python3-debian (&gt;= 0.1.14)
</computeroutput></screen>

      <sidebar id="sidebar.deborphan-debfoster">
        <title><emphasis>ALTERNATIVE</emphasis> <command>deborphan</command> and <command>debfoster</command></title>

        <indexterm><primary><command>deborphan</command></primary></indexterm>
        <indexterm><primary><command>debfoster</command></primary></indexterm>

        <para>In days where <command>apt</command>, <command>apt-get</command>
        and <command>aptitude</command> were not able to track automatic
        packages, there were two utilities producing lists of unnecessary
        packages: <command>deborphan</command> and
        <command>debfoster</command>. Both can still be useful.</para>

        <para><command>deborphan</command> scans the <literal>libs</literal>
        and <literal>oldlibs</literal> sections by default (in the absence of
        supplementary instructions) looking for the packages that
        are currently installed and that no other package depends on. The
        resulting list can then serve as a basis to remove unneeded
        packages.</para>

        <para><command>debfoster</command> has a more elaborate approach, very
        similar to APT's one: it maintains a list of packages that have been
        explicitly installed, and remembers what packages are really required
        between each invocation. If new packages appear on the system and if
        <command>debfoster</command> doesn't know them as required packages,
        they will be shown on the screen together with a list of their
        dependencies. The program then offers a choice: remove the package
        (possibly together with those that depend on it), mark it as explicitly
        required, or ignore it temporarily.</para>

      </sidebar>
    </section>
    <section id="sect.apt-patterns">
      <title>APT Patterns</title>
      <indexterm><primary>APT</primary><secondary>patterns</secondary></indexterm>
      <indexterm><primary>apt-patterns</primary></indexterm>
      <indexterm><primary><command>apt</command></primary><secondary><literal>list</literal></secondary></indexterm>

      <para>Patterns allow you to specify complex search queries to select
      the packages you want to install or show. They were first implemented
      for aptitude (see <xref linkend="sect.apt-frontends" />), but now
      APT can also make use of them.</para>

      <para>For example, we can use <command>apt list ?automatic</command> to
      list all the packages automatically installed. To find packages automatically
      installed no longer depended upon by manually installed packages the
      pattern <command>?garbage</command> can be used.</para>

      <para>Logic patterns can be combined with other packages to form more
      complex expressions. For instance, we could use a pattern like
      <command>?and(<replaceable>PATTERN, PATTERN</replaceable>)</command>.
      See
      <citerefentry><refentrytitle>apt-patterns</refentrytitle><manvolnum>7</manvolnum></citerefentry>
      and
      <citerefentry><refentrytitle>glob</refentrytitle><manvolnum>7</manvolnum></citerefentry>
      for all the patterns you can use and the complex expressions you can
      create with them.</para>

    </section>
  </section>

  <section id="sect.apt-cache">
    <title>The <command>apt-cache</command> Command</title>
    <indexterm><primary><command>apt-cache</command></primary></indexterm>
    <indexterm><primary>APT</primary><secondary>package search</secondary></indexterm>
    <indexterm><primary>APT</primary><secondary>header display</secondary></indexterm>
    <indexterm><primary>APT</primary><secondary>cache</secondary></indexterm>
    <indexterm><primary>search of packages</primary></indexterm>
    <indexterm><primary>package</primary><secondary>search</secondary></indexterm>

    <para>The <command>apt-cache</command> command can display much of the
    information stored in APT's internal database. This information is a
    sort of cache since it is gathered from the different sources listed in
    the <filename>sources.list</filename> file. This happens during the
    <command>apt update</command> operation.</para>

    <sidebar id="sidebar.cache">
      <title><emphasis>VOCABULARY</emphasis> Cache</title>
      <indexterm><primary>cache</primary></indexterm>

      <para>A cache is a temporary storage system used to speed up frequent
      data access when the usual access method is expensive
      (performance-wise). This concept can be applied in numerous
      situations and at different scales, from the core of microprocessors
      up to high-end storage systems.</para>

      <para>In the case of APT, the reference <filename>Packages</filename>
      files are those located on Debian mirrors. That said, it would be very
      ineffective to go through the network for every search that we might want
      to do in the database of available packages. That is why APT stores a
      copy of those files (in <filename>/var/lib/apt/lists/</filename>) and
      searches are done within those local files. Similarly,
      <filename>/var/cache/apt/archives/</filename> contains a cache of already
      downloaded packages (see sidebar <xref linkend="sidebar.apt-clean"/>) to
      avoid downloading them again if you need to reinstall them after a
      removal.</para>

      <para>On the other hand, it is mandatory to run <command>apt
      update</command> regularly to update the cache. Otherwise your package
      search results will always miss the latest updates distributed by the
      Debian mirrors.</para>

    </sidebar>

    <indexterm><primary><command>apt</command></primary><secondary><literal>search</literal></secondary></indexterm>
    <indexterm><primary><command>apt</command></primary><secondary><literal>show</literal></secondary></indexterm>
    <indexterm><primary><command>apt-cache</command></primary><secondary><literal>search</literal></secondary></indexterm>
    <indexterm><primary><command>apt-cache</command></primary><secondary><literal>show</literal></secondary></indexterm>
    <indexterm><primary><command>aptitude</command></primary><secondary><literal>search</literal></secondary></indexterm>
    <indexterm><primary><command>aptitude</command></primary><secondary><literal>show</literal></secondary></indexterm>

    <para>The <command>apt-cache</command> command can do keyword-based
    package searches with <command>apt-cache search
    <replaceable>keyword</replaceable></command>. It can also display the
    headers of the package's available versions with <command>apt-cache
    show <replaceable>package</replaceable></command>. This command
    provides the package's description, its dependencies, the name of its
    maintainer, etc. Note that <command>apt search</command>, <command>apt
    show</command>, <command>aptitude search</command>, and 
    <command>aptitude show</command> work in the same way.
    </para>

    <sidebar id="sidebar.apt-axi-cache">
      <title><emphasis>ALTERNATIVE</emphasis> <command>axi-cache</command></title>
      <indexterm><primary><command>axi-cache</command></primary></indexterm>
      <indexterm><primary><emphasis role="pkg">apt-xapian-index</emphasis></primary></indexterm>

      <para><command>apt-cache search</command> is a very rudimentary tool,
      basically implementing <command>grep</command> on package's
      descriptions. It often returns too many results or none at all when
      you include too many keywords.</para>

      <indexterm><primary><command>axi-cache</command></primary><secondary><literal>search</literal></secondary></indexterm>

      <para><command>axi-cache search <replaceable>term</replaceable></command>,
      on the other hand, provides better results, sorted by relevancy. It
      uses the <emphasis>Xapian</emphasis> search engine and is part of
      the <emphasis role="pkg">apt-xapian-index</emphasis> package which indexes
      all package information (and more, like the <filename>.desktop</filename>
      files from all Debian packages). It knows about tags
      (see sidebar <xref linkend="sidebar.debtags" />) and returns results in a matter
      of milliseconds.</para>

      <screen>$ <userinput>axi-cache search package use::searching</userinput>
<![CDATA[axi-cache search package use::searching
13 results found.
Results 1-13:
100% packagesearch - GUI for searching packages and viewing package information
87% debtags - Debian Package Tags support tools
86% whohas - query multiple distributions' package archives
84% recoll - Personal full text search package
82% apt-forktracer - utility for tracking non-official package versions
[..]
66% apt - commandline package manager
More terms: debian dpkg search debtags whohas forktracer dctrl
More tags: role::program admin::package-management suite::debian works-with::software:package interface::commandline scope::utility protocol::http
]]></screen>
    </sidebar>

    <indexterm><primary><command>apt-cache</command></primary><secondary><literal>dumpavail</literal></secondary></indexterm>
    <indexterm><primary><command>apt-cache</command></primary><secondary><literal>pkgnames</literal></secondary></indexterm>

    <para>Some features are more rarely used. For instance, <command>apt-cache
    dumpavail</command> displays the headers of all available versions of all
    packages. <command>apt-cache pkgnames</command> displays the list of all
    the packages which appear at least once in the cache.</para>

    <para>One of the features which might come in handy more often is
    <command>apt-cache policy</command>, described in the following
    section.</para>

    <section id="sect.apt-cache-policy">
      <title>The <command>apt-cache policy</command> Command</title>
      <indexterm><primary><command>apt-cache</command></primary><secondary><literal>policy</literal></secondary></indexterm>
      <indexterm><primary>APT</primary><secondary><foreignphrase>pinning</foreignphrase></secondary><tertiary>priorities</tertiary></indexterm>

      <!-- MAYCHANGE: Stable release name -->
      <para>The <command>apt-cache policy</command> command displays the
      pinning priorities and distribution properties of each package source as
      explained in <xref linkend="sect.apt.priorities"/>. It can also show the
      pinning priorities for all available versions and sources of a package.
      For the <filename>sources.list</filename> example used in <xref
      linkend="example.stable-sources-list"/> and
      <literal>APT::Default-Release</literal> set to
      <literal>"bullseye"</literal>, the output will look like this:</para>

      <!-- MAYCHANGE: release names and versions -->
      <informalexample>
        <screen role="scale" width="80"><computeroutput>$ </computeroutput><userinput>apt-cache policy</userinput>
<computeroutput>Package files:
 100 /var/lib/dpkg/status
     release a=now
 100 https://deb.debian.org/debian bullseye-backports/main amd64 Packages
     release o=Debian Backports,a=bullseye-backports,n=bullseye-backports,l=Debian Backports,c=main,b=amd64
     origin deb.debian.org
 990 https://deb.debian.org/debian bullseye/non-free amd64 Packages
     release v=11.0,o=Debian,a=stable,n=bullseye,l=Debian,c=non-free,b=amd64
     origin deb.debian.org
 990 https://deb.debian.org/debian bullseye/contrib amd64 Packages
     release v=11.0,o=Debian,a=stable,n=bullseye,l=Debian,c=contrib,b=amd64
     origin deb.debian.org
 990 https://deb.debian.org/debian bullseye/main amd64 Packages
     release v=11.0,o=Debian,a=stable,n=bullseye,l=Debian,c=main,b=amd64
     origin deb.debian.org
 500 http://security.debian.org bullseye-security/main amd64 Packages
     release v=11,o=Debian,a=stable-security,n=bullseye-security,l=Debian-Security,c=main,b=amd64
     origin security.debian.org
Pinned packages:</computeroutput>
</screen>
      </informalexample>

      <para><command>apt-cache policy</command> can also show the pinning
      priorities for all available versions and sources of a given
      package.</para>

      <!-- MACHANGE: use example package with different versions -->
      <informalexample>
        <screen role="scale" width="80"><computeroutput>$ </computeroutput><userinput>apt-cache policy limnoria</userinput>
<computeroutput>limnoria:
  Installed: 2021.06.15-1
  Candidate: 2021.06.15-1
  Version table:
     2021.07.21-1~bpo11+1 100
        100 https://deb.debian.org/debian bullseye-backports/main amd64 Packages
 *** 2021.06.15-1 990
        990 https://deb.debian.org/debian bullseye/main amd64 Packages
        100 /var/lib/dpkg/status</computeroutput></screen>
      </informalexample>

      <indexterm><primary>APT</primary><secondary><filename>/etc/apt/preferences.d/</filename></secondary><seealso>preferences</seealso></indexterm>

      <!-- MAYCHANGE: stable release and package name -->
      <para>Although there is a newer version of <emphasis
      role="pkg">limnoria</emphasis> in the <literal>bullseye-backports</literal>
      repository, APT will not install it automatically based on the priority.
      One would have to use <command>apt install
      limnoria/bullseye-backports</command> or add a higher pinning priority to
      <filename>/etc/apt/preferences.d/limnoria.pref</filename>:</para>

      <informalexample>
        <programlisting>Package: limnoria
Pin: release o=Debian Backports, a=bullseye-backports
Pin-Priority: 1001</programlisting>
        <screen role="scale" width="80"><computeroutput>$ </computeroutput><userinput>apt-cache policy limnoria</userinput>
<computeroutput>limnoria:
  Installed: 2021.06.15-1
  Candidate: 2021.07.21-1~bpo11+1
  Version table:
     2021.07.21-1~bpo11+1 1001
        100 https://deb.debian.org/debian bullseye-backports/main amd64 Packages
 *** 2021.06.15-1 990
        990 https://deb.debian.org/debian bullseye/main amd64 Packages
        100 /var/lib/dpkg/status</computeroutput></screen>
      </informalexample>
    </section>
  </section>

  <section id="sect.apt-file">
    <title>The <command>apt-file</command> Command</title>
    <indexterm><primary><command>apt-file</command></primary></indexterm>
    <indexterm><primary>APT</primary><secondary>file search</secondary></indexterm>
    <indexterm><primary>search of files</primary></indexterm>
    <indexterm><primary>package</primary><secondary>search files</secondary></indexterm>

    <para>Sometimes we refer to a file or a command and you might wonder, in
    which package it will be found. Fortunately the Debian repositories not
    only contain information about all the binary packages provided, but also
    all the files shipped with them. This information is stored in files named
    <filename>Contents-<replaceable>arch</replaceable>.gz</filename> and
    <filename>Contents-udeb-<replaceable>arch</replaceable>.gz</filename>.
    This information is not automatically downloaded by APT. Instead it needs
    the <command>apt-file update</command> command (from the similar named
    package) to retrieve the contents of all package sources mentioned in
    <filename>/etc/apt/sources.list</filename>. By default it downloads
    <filename>Contents*.pdiff</filename> files as described in sidebar <xref
    linkend="sidebar.apt-pdiff"/> to reduce the amount of data necessary to be
    downloaded. To update the database on a weekly base, the following entry
    can be added to <filename>/etc/crontab</filename> if convenient.</para>

    <informalexample>
      <programlisting><![CDATA[@weekly root test -x /usr/bin/apt-file && /usr/bin/apt-file update >> /dev/null 2>&1]]></programlisting>
    </informalexample>

    <indexterm><primary><command>apt-file</command></primary><secondary><literal>search</literal></secondary></indexterm>

    <para>After the database has been updated, the command <command>apt-file
    search <replaceable>pattern</replaceable></command> will list all packages,
    which contain a filename or path containing the pattern.</para>

    <informalexample>
      <screen><computeroutput>$ </computeroutput><userinput>apt-file search bin/axi-cache</userinput>
apt-xapian-index: /usr/bin/axi-cache
</screen>
    </informalexample>

    <indexterm><primary><command>apt-file</command></primary><secondary><literal>list</literal></secondary></indexterm>

    <para>The command <command>apt-file list
    <replaceable>package</replaceable></command> will list all files shipped
    with the package instead.</para>

    <sidebar>
      <title><emphasis>TIP</emphasis> Listing a package contents and finding a file's package</title>
      <indexterm><primary><command>apt-file</command></primary><secondary><literal>list</literal></secondary></indexterm>
      <indexterm><primary><command>dpkg</command></primary><secondary><literal>--listfiles</literal></secondary></indexterm>
      <indexterm><primary><command>dpkg</command></primary><secondary><literal>--search</literal></secondary></indexterm>
      <indexterm><primary><emphasis role="pkg">cruft</emphasis></primary></indexterm>
      <indexterm><primary><emphasis role="pkg">cruft-ng</emphasis></primary></indexterm>

      <para>Similar to <command>apt-file list</command> the command
      <command>dpkg -L <replaceable>package</replaceable></command> lists all
      files, but only for an installed package. To find the package, a local
      file belongs to, use <command>dpkg -S
      <replaceable>file</replaceable></command> (see <xref
      linkend="sect.dpkg-list"/>). To list all local files not belonging to any
      installed package, you might want to take a look at the <emphasis
      role="pkg">cruft</emphasis> or the <emphasis
      role="pkg">cruft-ng</emphasis> package.</para>
    </sidebar>
  </section>

  <section id="sect.apt-frontends">
    <title>Frontends: <command>aptitude</command>, <command>synaptic</command></title>
    <indexterm><primary><command>aptitude</command></primary></indexterm>
    <indexterm><primary><command>synaptic</command></primary></indexterm>
    <indexterm><primary>APT</primary><secondary>interfaces</secondary></indexterm>

    <para>APT is a C++ program whose code mainly resides in the
    <literal>libapt-pkg</literal> shared library. Using a shared library
    facilitates the creation of user interfaces (frontends), since the
    code contained in the library can easily be reused. Historically,
    <command>apt-get</command> was only designed as a test frontend for
    <literal>libapt-pkg</literal> but its success tends to obscure this
    fact.</para>

    <section id="sect.aptitude">
      <title><command>aptitude</command></title>
      <indexterm><primary><command>aptitude</command></primary></indexterm>
      <indexterm><primary>APT</primary><secondary>interfaces</secondary><tertiary><command>aptitude</command></tertiary><see><command>aptitude</command></see></indexterm>

      <para><command>aptitude</command> is an interactive program that can
      be used in semi-graphical mode on the console. You can browse the
      list of installed and available packages, look up all the available
      information, and select packages to install or remove. The program is
      designed specifically to be used by administrators, so that its
      default behaviors are designed to be much more intelligent than
      <command>apt-get</command>'s, and its interface much easier to
      understand.</para>

      <figure>
        <title>The <command>aptitude</command> package manager</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/aptitude.png" scalefit="1" width="75%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <indexterm><primary><command>aptitude</command></primary><secondary>basic usage</secondary></indexterm>

      <para>When it starts, <command>aptitude</command> shows a list of
      packages sorted by state (installed, non-installed, or installed but
      not available on the mirrors — other sections display tasks,
      virtual packages, and new packages that appeared recently on
      mirrors). To facilitate thematic browsing, other views are available.
      In all cases, <command>aptitude</command> displays a list combining
      categories and packages on the screen. Categories are organized
      through a tree structure, whose branches can respectively be unfolded
      or closed with the <keycombo><keycap>Enter</keycap></keycombo>,
      <keycombo><keycap>[</keycap></keycombo> and
      <keycombo><keycap>]</keycap></keycombo> keys.
      <keycombo><keycap>+</keycap></keycombo> should be used to mark a
      package for installation, <keycombo><keycap>-</keycap></keycombo> to
      mark it for removal and <keycombo><keycap>_</keycap></keycombo> to
      purge it (note that these keys can also be used for categories, in
      which case the corresponding actions will be applied to all the
      packages of the category). <keycombo><keycap>u</keycap></keycombo>
      updates the lists of available packages and <keycombo
      action="simul"><keycap>Shift</keycap><keycap>u</keycap></keycombo>
      prepares a global system upgrade.
      <keycombo><keycap>g</keycap></keycombo> switches to a summary view of
      the requested changes (and typing
      <keycombo><keycap>g</keycap></keycombo> again will apply the
      changes), and <keycombo><keycap>q</keycap></keycombo> quits the
      current view. If you are in the initial view, this will effectively
      close <command>aptitude</command>.</para>

      <sidebar>
        <title><emphasis>DOCUMENTATION</emphasis> <command>aptitude</command></title>
        <indexterm><primary><command>aptitude</command></primary><secondary>documentation</secondary></indexterm>
        <indexterm><primary><emphasis role="pkg">aptitude-doc-en</emphasis></primary></indexterm>

        <para>This section does not cover the finer details of using
        <command>aptitude</command>. It rather focuses on giving you a survival
        kit to use it. But it is well documented and we advise you to use its
        complete manual available in the <emphasis
        role="pkg">aptitude-doc-en</emphasis> package (see
        <filename>/usr/share/doc/aptitude/html/en/index.html</filename>) or at
        <ulink url="https://www.debian.org/doc/manuals/aptitude/"/>.</para>

      </sidebar>

      <indexterm><primary><command>aptitude</command></primary><secondary>package search</secondary></indexterm>

      <para>To search for a package, you can type
      <keycombo><keycap>/</keycap></keycombo> followed by a search pattern.
      This pattern matches the name of the package, but can also be applied
      to the description (if preceded by <literal>~d</literal>), to the
      section (with <literal>~s</literal>) or to other characteristics
      detailed in the documentation. The same patterns can filter the list
      of displayed packages: type the
      <keycombo><keycap>l</keycap></keycombo> key (as in
      <foreignphrase>limit</foreignphrase>) and enter the pattern.</para>

      <indexterm><primary><command>aptitude</command></primary><secondary>automatic flag</secondary></indexterm>
      <indexterm><primary><command>aptitude</command></primary><secondary><literal>markauto</literal></secondary></indexterm>

      <para>Managing the “automatic flag” of Debian packages (see <xref
      linkend="sect.automatic-tracking" />) is a breeze with
      <command>aptitude</command>. It is possible to browse the list of
      installed packages and mark packages as automatic with <keycombo
      action="simul"><keycap>Shift</keycap><keycap>m</keycap></keycombo>
      or to remove the mark with the
      <keycombo><keycap>m</keycap></keycombo> key. “Automatic packages”
      are displayed with an “A” in the list of packages. This feature also
      offers a simple way to visualize the packages in use on a machine,
      without all the libraries and dependencies that you don't really
      care about. The related pattern that can be used with
      <keycombo><keycap>l</keycap></keycombo> (to activate the filter
      mode) is <literal>~i!~M</literal>. It specifies that you only want
      to see installed packages (<literal>~i</literal>) not marked as
      automatic (<literal>!~M</literal>).</para>

      <sidebar>
        <title><emphasis>TOOL</emphasis> Using <command>aptitude</command> on the command-line interface</title>
        <indexterm><primary><command>aptitude</command></primary><secondary>command line</secondary></indexterm>

        <para>Most of <command>aptitude</command>'s features are
        accessible via the interactive interface as well as via
        command-lines. These command-lines will seem familiar to regular
        users of <command>apt-get</command> and
        <command>apt-cache</command>.</para>

        <para>The advanced features of <command>aptitude</command> are
        also available on the command-line. You can use the same package
        search patterns as in the interactive version. For example, if you
        want to cleanup the list of “manually installed” packages, and if
        you know that none of the locally installed programs require any
        particular libraries or Perl modules, you can mark the
        corresponding packages as automatic with a single command:</para>

        <informalexample>
          <screen><computeroutput># </computeroutput><userinput>aptitude markauto '~slibs|~sperl'</userinput></screen>
        </informalexample>

        <para>Here, you can clearly see the power of the search pattern
        system of <command>aptitude</command>, which enables the instant
        selection of all the packages in the <literal>libs</literal> and
        <literal>perl</literal> sections.</para>

        <para>Beware, if some packages are marked as automatic and if no
        other package depends on them, they will be removed immediately
        (after a confirmation request).</para>
      </sidebar>

      <section>
        <title>Managing Recommendations, Suggestions and Tasks</title>
        <indexterm><primary><command>aptitude</command></primary><secondary>tasks</secondary></indexterm>

        <para>Another interesting feature of <command>aptitude</command> is
        the fact that it respects recommendations between packages while
        still giving users the choice not to install them on a case by case
        basis. For example, the <emphasis
        role="pkg">gnome</emphasis> package recommends
        <emphasis role="pkg">transmission-gtk</emphasis> (among others).
        When you select the former for installation, the latter will also
        be selected (and marked as automatic if not already installed on
        the system). Typing <keycombo><keycap>g</keycap></keycombo> will
        make it obvious: <emphasis
        role="pkg">transmission-gtk</emphasis> appears on the summary
        screen of pending actions in the list of packages installed
        automatically to satisfy dependencies. However, you can decide not
        to install it by deselecting it before confirming the
        operations.</para>

        <para>Note that this recommendation tracking feature does not apply
        to upgrades. For instance, if a new version of <emphasis
        role="pkg">gnome</emphasis> recommends a
        package that it did not recommend formerly, the package won't be
        marked for installation. However, it will be listed on the upgrade
        screen so that the administrator can still select it for
        installation.</para>

        <para>Suggestions between packages are also taken into account, but
        in a manner adapted to their specific status. For example, since
        <emphasis role="pkg">gnome</emphasis> suggests
        <emphasis role="pkg">empathy</emphasis>, the latter will be
        displayed on the summary screen of pending actions (in the section
        of packages suggested by other packages). This way, it is visible
        and the administrator can decide whether to take the suggestion
        into account or not. Since it is only a suggestion and not a
        dependency or a recommendation, the package will not be selected
        automatically — its selection requires a manual intervention from
        the user (thus, the package will not be marked as
        automatic).</para>

        <para>In the same spirit, remember that <command>aptitude</command>
        makes intelligent use of the concept of task. Since tasks are
        displayed as categories in the screens of packages lists, you can
        either select a full task for installation or removal, or browse
        the list of packages included in the task to select a smaller
        subset.</para>

      </section>

      <section>
        <title>Better Solver Algorithms</title>
        <indexterm><primary><command>aptitude</command></primary><secondary>solver</secondary></indexterm>

        <para>To conclude this section, let's note that
        <command>aptitude</command> has more elaborate algorithms compared
        to <command>apt-get</command> when it comes to resolving difficult
        situations. When a set of actions is requested and when these
        combined actions would lead to an incoherent system,
        <command>aptitude</command> evaluates several possible scenarios
        and presents them in order of decreasing relevance. However, these
        algorithms are not fail-proof. Fortunately there is always the
        possibility to manually select the actions to perform. When the
        currently selected actions lead to contradictions, the upper part
        of the screen indicates a number of “broken” packages (and you
        can directly navigate to those packages by pressing
        <keycombo><keycap>b</keycap></keycombo>). It is then possible to
        manually build a solution for the problems found. In particular,
        you can get access to the different available versions by simply
        selecting the package with
        <keycombo><keycap>Enter</keycap></keycombo>. If the selection of
        one of these versions solves the problem, you should not hesitate
        to use the function. When the number of broken packages gets down
        to zero, you can safely go to the summary screen of pending actions
        for a last check before you apply them.</para>

        <sidebar>
          <title><emphasis>NOTE</emphasis> <command>aptitude</command>'s log</title>
          <indexterm><primary><command>aptitude</command></primary><secondary>log</secondary></indexterm>
          <indexterm><primary><command>aptitude</command></primary><secondary><filename>/var/log/aptitude</filename></secondary></indexterm>
          <indexterm><primary><filename>/var</filename></primary><secondary><filename>/var/log/aptitude</filename></secondary></indexterm>

          <para>Like <command>dpkg</command>, <command>aptitude</command>
          keeps a trace of executed actions in its logfile
          (<filename>/var/log/aptitude</filename>). However, since both
          commands work at a very different level, you cannot find the same
          information in their respective logfiles. While
          <command>dpkg</command> logs all the operations executed on
          individual packages step by step, <command>aptitude</command>
          gives a broader view of high-level operations like a system-wide
          upgrade.</para>

          <para>Beware, this logfile only contains a summary of operations
          performed by <command>aptitude</command>. If other frontends (or
          even <command>dpkg</command> itself) are occasionally used, then
          <command>aptitude</command>'s log will only contain a partial
          view of the operations, so you can't rely on it to build a
          trustworthy history of the system.</para>
        </sidebar>
      </section>
    </section>

    <section>
      <title><command>synaptic</command></title>
      <indexterm><primary><command>synaptic</command></primary></indexterm>
      <indexterm><primary>APT</primary><secondary>interfaces</secondary><tertiary><command>synaptic</command></tertiary><see><command>synaptic</command></see></indexterm>

      <para><command>synaptic</command> is a graphical package manager for
      Debian which features a clean and efficient graphical interface based
      on GTK+/GNOME. Its many ready-to-use filters give fast access to
      newly available packages, installed packages, upgradable packages,
      obsolete packages and so on. If you browse through these lists, you
      can select the operations to be done on the packages (install,
      upgrade, remove, purge); these operations are not performed
      immediately, but put into a task list. A single click on a button
      then validates the operations, and they are performed in one
      go.</para>

      <figure>
        <title><command>synaptic</command> package manager</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/synaptic.png" scalefit="1" width="75%"/>
          </imageobject>
        </mediaobject>
      </figure>
    </section>
  </section>

  <section id="sect.package-authentication">
    <title>Checking Package Authenticity</title>
    <indexterm><primary>package</primary><secondary>authenticity check</secondary></indexterm>
    <indexterm><primary>package</primary><secondary>seal</secondary></indexterm>
    <indexterm><primary>package</primary><secondary>signature</secondary></indexterm>
    <indexterm><primary>signature</primary><secondary>package signature</secondary></indexterm>
    <indexterm><primary>authentication</primary><secondary>package authentication</secondary></indexterm>
    <indexterm><primary><filename>Release</filename></primary></indexterm>
    <indexterm><primary><filename>Release.gpg</filename></primary></indexterm>
    <indexterm><primary><filename>InRelease</filename></primary></indexterm>
    <indexterm><primary>APT</primary><secondary>apt-secure</secondary></indexterm>
    <indexterm><primary>APT</primary><secondary>archive authentification</secondary></indexterm>

    <para>Security is very important for Falcot Corp administrators.
    Accordingly, they need to ensure that they only install packages which
    are guaranteed to come from Debian with no tampering on the way. A
    computer cracker could try to add malicious code to an otherwise
    legitimate package. Such a package, if installed, could do anything the
    cracker designed it to do, including for instance disclosing passwords
    or confidential information. To circumvent this risk, Debian provides a
    tamper-proof seal to guarantee — at install time — that a package
    really comes from its official maintainer and hasn't been modified by a
    third party.</para>

    <para>The seal works with a chain of cryptographic hashes and a signature
    and is explained in detail in
    <citerefentry><refentrytitle>apt-secure</refentrytitle><manvolnum>8</manvolnum></citerefentry>.
    Starting with Debian 10 <emphasis role="distribution">Buster</emphasis> the signed
    file is the <filename>InRelease</filename> file, provided by the Debian
    mirrors. There is also a legacy file called <filename>Release</filename>.
    Both contain a list of the <filename>Packages</filename> files (including
    their compressed forms, <filename>Packages.gz</filename> and
    <filename>Packages.xz</filename>, and the incremental versions), along with
    their SHA256 hashes, which ensures that the files haven't been tampered
    with. These <filename>Packages</filename> files contain a list of the
    Debian packages available on the mirror, along with their hashes, which
    ensures in turn that the contents of the packages themselves haven't been
    altered either. The difference between <filename>InRelease</filename> and
    <filename>Release</filename> is that the former is cryptographically
    signed in-line, whereas the latter provides a detached signature in the form
    of the file <filename>Release.gpg</filename>.</para>

    <indexterm><primary>signature</primary><secondary>repository signature</secondary></indexterm>

    <sidebar>
      <title><emphasis>NOTE</emphasis> The future of <filename>Release</filename> and <filename>Release.gpg</filename></title>

      <para>After the release of Debian 10 <emphasis
      role="distribution">Buster</emphasis> the intention has been announced to
      remove support for the legacy files <filename>Release</filename> and
      <filename>Release.gpg</filename> in APT, used since version 0.6, which
      introduced support for an archive authentication.</para>
    </sidebar>

    <indexterm><primary>APT</primary><secondary><filename>/etc/apt/trusted.gpg</filename></secondary><seealso><command>apt-key</command></seealso></indexterm>
    <indexterm><primary>APT</primary><secondary><filename>/etc/apt/trusted.gpg.d/</filename></secondary><seealso><command>apt-key</command></seealso></indexterm>
    <indexterm><primary>APT</primary><secondary><filename>Release</filename></secondary></indexterm>
    <indexterm><primary>APT</primary><secondary><filename>Release.gpg</filename></secondary></indexterm>
    <indexterm><primary>APT</primary><secondary><filename>InRelease</filename></secondary></indexterm>
    <indexterm><primary><command>apt-key</command></primary></indexterm>
    <indexterm><primary><emphasis role="pkg">debian-archive-keyring</emphasis></primary></indexterm>

    <para>APT needs a set of trusted GnuPG public keys to verify signatures in
    the <filename>InRelease</filename> and <filename>Release.gpg</filename>
    files available on the mirrors.  It gets them from files in
    <filename>/etc/apt/trusted.gpg.d/</filename> and from the
    <filename>/etc/apt/trusted.gpg</filename> keyring (managed by the
    <command>apt-key</command> command). The official Debian keys are provided
    and kept up-to-date by the <emphasis
    role="pkg">debian-archive-keyring</emphasis> package which puts them in
    <filename>/etc/apt/trusted.gpg.d/</filename>:</para>

    <!-- MAYCHANGE: archive keys -->
    <screen role="scale"><computeroutput># </computeroutput><userinput>ls /etc/apt/trusted.gpg.d/
</userinput><![CDATA[debian-archive-bullseye-automatic.gpg
debian-archive-bullseye-security-automatic.gpg
debian-archive-bullseye-stable.gpg
debian-archive-buster-automatic.gpg
debian-archive-buster-security-automatic.gpg
debian-archive-buster-stable.gpg
debian-archive-stretch-automatic.gpg
debian-archive-stretch-security-automatic.gpg
debian-archive-stretch-stable.gpg
]]></screen>

    <sidebar>
      <title><emphasis>IN PRACTICE</emphasis> Adding trusted keys</title>
      <indexterm><primary>trusted key</primary></indexterm>
      <indexterm><primary>key</primary><secondary>APT's authentication keys</secondary></indexterm>
      <indexterm><primary><command>apt-key</command></primary><secondary><literal>add</literal></secondary></indexterm>
      <indexterm><primary><filename>sources.list</filename></primary><secondary><literal>Signed-By</literal></secondary></indexterm>

      <para>When a third-party package source is added to the
      <filename>sources.list</filename> file, APT needs to be told to trust
      the corresponding GPG authentication key (otherwise it will keep complaining
      that it can't ensure the authenticity of the packages coming from
      that repository). The first step is of course to get the public key.
      More often than not, the key will be provided as a small text file,
      which we will call <filename>key.asc</filename> in the following
      examples.</para>

      <para>To add the key to APT's trusted keyring, the administrator can just
      put it in a <filename>*.gpg</filename> file in
      <filename>/etc/apt/trusted.gpg.d/</filename> (<filename>*.asc</filename>
      files are discouraged and can cause problems). This is supported since
      Debian <emphasis role="distribution">Stretch</emphasis>. With older
      releases, you had to run <command>apt-key add &lt;
      key.asc</command>, which is considered obsolete already.</para>

      <para>While this is very common behavior, it also creates a possible
      issue. APT does not know which key belongs to which repository. If one of
      the keys in APT's keyring matches the signature of an archive, APT
      considers the archive as authenticated. Once a key has been added to the
      trusted keyring, a malicious attacker could actually provide its own
      "version" of a Debian mirror signed by the same key. It might therefor
      actually be better to put the key as <filename>*.gpg</filename> file into
      <filename>/usr/share/keyrings/</filename> and use the
      <literal>Signed-By</literal> field in <filename>sources.list</filename>
      for third party repositories as shown in the example below.</para>

      <informalexample>
        <para>Imagine, that the Falcot Corp. runs their own public repository
        and you want to use it. They have signed it and provide a publicly
        available key(ring) as well to download. To restrict the key to the
        repository, you can simply do this:</para>

        <screen role="scale" width="80"><computeroutput>$ </computeroutput><userinput>sudo wget -O <replaceable>falcot-keyring.gpg</replaceable> -P /usr/share/keyrings https://packages.falcot.com/debian/repository.gpg</userinput></screen>

        <programlisting>deb [ signed-by=/usr/share/keyrings/falcot-keyring.gpg ] https://packages.falcot.com/debian bullseye main</programlisting>
      </informalexample>

      <para>Beware that adding and using third party repositories always poses
      a security and stability risk!</para> </sidebar>

    <para>Once the appropriate keys are in the keyring, APT will check the
    signatures before any risky operation, so that frontends will display
    a warning if asked to install a package whose authenticity can't be
    ascertained.</para>

    <para>Note, that binary packages are usually not signed. The integrity of a
    package can only be confirmed by checking its hashsums against a trusted
    (and possibly signed) hashsum source.</para>

    <sidebar>
      <title><emphasis>SPECIFIC CASE</emphasis> Unsigned repositories</title>
      <indexterm><primary><filename>sources.list</filename></primary><secondary><literal>Trusted</literal></secondary></indexterm>
      <indexterm><primary><filename>sources.list</filename></primary><secondary><literal>Allow-Insecure</literal></secondary></indexterm>

      <para>While in general unsigned repositories shouldn't be used, some
      users might still require them, for example to provide some locally built
      packages. APT can be forced to accept such a repository by prepending
      the repository URL using <literal>allow-insecure=yes</literal> or
      <literal>trusted=yes</literal>. We will demonstrate it using the example
      from <xref linkend="sect.setup-apt-package-repository"/>:</para>

      <informalexample>
        <programlisting>deb [ trusted=yes ] http://packages.falcot.com/ updates/
deb [ trusted=yes ] http://packages.falcot.com/ internal/</programlisting>
      </informalexample>
    </sidebar>
  </section>

  <section id="sect.dist-upgrade">
    <title>Upgrading from One Stable Distribution to the Next</title>
    <indexterm><primary>system</primary><secondary><foreignphrase>dist-upgrade</foreignphrase></secondary></indexterm>
    <indexterm><primary><foreignphrase>dist-upgrade</foreignphrase></primary></indexterm>
    <indexterm><primary>APT</primary><secondary><foreignphrase>dist-upgrade</foreignphrase></secondary></indexterm>

    <para>One of the best-known features of Debian is its ability to
    upgrade an installed system from one stable release to the next:
    <foreignphrase>dist-upgrade</foreignphrase> — a well-known phrase —
    has largely contributed to the project's reputation. With a few
    precautions, upgrading a computer can take as little as a few minutes,
    or a few dozen minutes, depending on the download speed from the package
    repositories.</para>

    <section>
      <title>Recommended Procedure</title>
      <indexterm><primary>system</primary><secondary><foreignphrase>release notes</foreignphrase></secondary></indexterm>

      <para>Since Debian has quite some time to evolve in-between stable
      releases, you should read the release notes before upgrading.</para>

      <sidebar>
        <title><emphasis>BACK TO BASICS</emphasis> Release notes</title>
        <indexterm><primary>release notes</primary></indexterm>

        <para>The release notes for an operating system (and, more
        generally, for any software) are a document giving an overview of
        the software, with some details concerning the particularities of
        one version. These documents are generally short compared to the
        complete documentation, and they usually list the features which
        have been introduced since the previous version. They also give
        details on upgrading procedures, warnings for users of previous
        versions, and sometimes errata.</para>

        <!-- MAYCHANGE: oldstable codename in URL -->
        <para>Release notes for Debian are available online: the release notes
        for the current stable release have a dedicated URL, while older
        release notes can be found with their codenames:
        <ulink type="block" url="https://www.debian.org/releases/stable/releasenotes"/>
        <ulink type="block" url="https://www.debian.org/releases/buster/releasenotes"/>
        </para>

      </sidebar>

      <!-- MAYCHANGE: codenames -->
      <para>In this section, we will focus on upgrading a <emphasis
      role="distribution">Buster</emphasis> system to <emphasis
      role="distribution">Bullseye</emphasis>. This is a major operation on
      a system; as such, it is never 100% risk-free, and should not be
      attempted before all important data has been backed up.</para>

      <indexterm><primary><command>aptitude</command></primary></indexterm>
      <indexterm><primary><command>deborphan</command></primary></indexterm>
      <indexterm><primary><command>debfoster</command></primary></indexterm>
      <indexterm><primary><command>apt-show-versions</command></primary></indexterm>

      <para>Another good habit which makes the upgrade easier (and
      shorter) is to tidy your installed packages and keep only the ones
      that are really needed. Helpful tools to do that include
      <command>aptitude</command>, <command>deborphan</command>,
      <command>debfoster</command>, and <command>apt-show-versions</command> (see <xref
      linkend="sect.automatic-tracking"/>). For example, you can use the
      following command, and then use <command>aptitude</command>'s interactive
      mode to double check and fine-tune the scheduled removals:</para>

      <indexterm><primary><command>aptitude</command></primary><secondary><literal>--schedule-only</literal></secondary></indexterm>
      <screen><computeroutput>#</computeroutput> <userinput>deborphan | xargs aptitude --schedule-only remove</userinput></screen>

      <sidebar id="sidebar.debsums">
        <title><emphasis>TIP</emphasis> Finding changed files</title>
        <indexterm><primary><command>debsums</command></primary></indexterm>
        <indexterm><primary><filename>md5sums</filename></primary></indexterm>

        <para>The <command>debsums</command> command can check if files on the
        local system, which are part of an installed package, have been
        altered. It uses a simple hashsum algorithm and the information in
        <filename>/var/lib/dpkg/info/<replaceable>package</replaceable>.md5sums</filename>
        (see <xref linkend="sect.conffiles"/>).  To find all altered
        configuration files use <command>debsums -ec</command>. To check the
        whole system, use <command>debsums -c</command>.</para>
      </sidebar>

      <indexterm><primary>updates</primary><secondary>system</secondary></indexterm>
      <indexterm><primary>APT</primary><secondary>update package list</secondary></indexterm>
      <indexterm><primary>APT</primary><secondary>system update</secondary></indexterm>
      <indexterm><primary>system</primary><secondary><foreignphrase>update</foreignphrase></secondary></indexterm>
      <indexterm><primary><command>apt</command></primary><secondary><literal>update</literal></secondary></indexterm>
      <indexterm><primary><command>apt-get</command></primary><secondary><literal>update</literal></secondary></indexterm>
      <indexterm><primary><command>aptitude</command></primary><secondary><literal>update</literal></secondary></indexterm>
      <indexterm><primary><command>synaptic</command></primary></indexterm>

      <!-- MAYCHANGE: stable codenames -->

      <para>Now for the upgrading itself. First, you need to change the
      <filename>/etc/apt/sources.list</filename> file to tell APT to get
      its packages from <emphasis role="distribution">Bullseye</emphasis>
      instead of <emphasis role="distribution">Buster</emphasis>. If the
      file only contains references to <emphasis
      role="distribution">Stable</emphasis> rather than explicit codenames,
      the change isn't even required, since <emphasis
      role="distribution">Stable</emphasis> always refers to the latest
      released version of Debian. In both cases, the database of available
      packages must be refreshed with the <command>apt
      update</command> command or the refresh button in
      <command>synaptic</command> (<xref linkend="sect.apt-update"/>).</para>

      <sidebar>
        <title><emphasis>NOTE</emphasis> Repository information changes</title>
        <indexterm><primary><command>apt</command></primary><secondary><literal>--allow-releaseinfo-change</literal></secondary></indexterm>
        <indexterm><primary><command>apt-get</command></primary><secondary><literal>--allow-releaseinfo-change</literal></secondary></indexterm>
        <indexterm><primary>APT</primary><secondary><literal>Acquire::AllowReleaseInfoChange</literal></secondary></indexterm>

        <para>When a new stable version of Debian is released, some fields in
        the <filename>Release</filename> and <filename>InRelease</filename>
        files of a repository change, like the <literal>Suite</literal> field.
        When this happens, downloading data from the repository is declined
        until the change is confirmed to ensure the user is prepared for it.
        To confirm the change use the
        <literal>--allow-releaseinfo-change</literal> or
        <literal>--allow-releaseinfo-change-<replaceable>field</replaceable></literal>
        options for <command>apt-get</command> or the
        <literal>Acquire::AllowReleaseInfoChange</literal> configuration
        option.</para>
      </sidebar>

      <indexterm><primary><command>apt</command></primary><secondary><literal>upgrade</literal></secondary></indexterm>
      <indexterm><primary><command>apt-get</command></primary><secondary><literal>upgrade</literal></secondary></indexterm>
      <indexterm><primary><command>aptitude</command></primary><secondary><literal>safe-upgrade</literal></secondary></indexterm>
      <indexterm><primary>system</primary><secondary><foreignphrase>upgrade</foreignphrase></secondary></indexterm>

      <para>Once these new package sources are registered, you should first do
      a minimal upgrade with <command>apt upgrade</command> et al. as
      described in <xref linkend="sect.apt-upgrade"/>. By doing the upgrade
      in two steps, we ease the job of the package management tools and often
      ensure that we have the latest versions of those, which might have
      accumulated bugfixes and improvements required to complete the full
      distribution upgrade.</para>

      <indexterm><primary>system</primary><secondary><foreignphrase>dist-upgrade</foreignphrase></secondary></indexterm>
      <indexterm><primary>system</primary><secondary><foreignphrase>full-upgrade</foreignphrase></secondary></indexterm>

      <!-- MAYCHANGE: stable release code name -->
      <para>Once this first upgrade is done, it is time to handle the upgrade
      itself, either with <command>apt full-upgrade</command>,
      <command>aptitude</command>, or <command>synaptic</command> (<xref
      linkend="sect.dist-upgrade"/>). You should carefully check the suggested
      actions before applying them: you might want to add suggested packages or
      deselect packages which are only recommended and known not to be useful.
      In any case, the frontend should come up with a scenario ending in a
      coherent and up-to-date <emphasis role="distribution">Bullseye</emphasis>
      system. Then, all you need is to do is wait while the required packages
      are downloaded, answer the debconf questions and possibly those about
      locally modified configuration files, and sit back while APT does its
      magic.</para> </section>

    <section id="sect.dist-upgrade-problems">
      <title>Handling Problems after an Upgrade</title>
      <indexterm><primary><emphasis role="pkg">apt-listchanges</emphasis></primary></indexterm>

      <para>In spite of the Debian maintainers' best efforts, a major
      system upgrade isn't always as smooth as you could wish. New software
      versions may be incompatible with previous ones (for instance, their
      default behavior or their data format may have changed). Also, some
      bugs may slip through the cracks despite the testing phase which
      always precedes a Debian release.</para>

      <para>To anticipate some of these problems, you can install the
      <emphasis role="pkg">apt-listchanges</emphasis> package, which
      displays information about possible problems at the beginning of a
      package upgrade. This information is compiled by the package
      maintainers and put in
      <filename>/usr/share/doc/<replaceable>package</replaceable>/NEWS.Debian</filename>
      files for the benefit of users. Reading these files (possibly through
      <emphasis role="pkg">apt-listchanges</emphasis>) should help you
      avoid bad surprises.</para>

      <indexterm><primary><literal>bugs.debian.org</literal></primary></indexterm>
      <indexterm><primary><emphasis role="pkg">apt-listbugs</emphasis></primary></indexterm>
      <indexterm><primary><command>reportbug</command></primary></indexterm>

      <para>You might sometimes find that the new version of a software doesn't
      work at all. This generally happens if the application isn't particularly
      popular and hasn't been tested enough; a last-minute update can also
      introduce regressions which are only found after the stable release. In
      both cases, the first thing to do is to have a look at the bug tracking
      system at <ulink
      url="https://bugs.debian.org"><literal>https://bugs.debian.org/<replaceable>package</replaceable></literal></ulink>,
      and check whether the problem has already been reported. If this is case,
      it will be also listed before the upgrade begins if you have <emphasis
      role="pkg">apt-listbugs</emphasis> installed. If it hasn't, you should
      report it yourself with <command>reportbug</command>. If it is already
      known, the bug report and the associated messages are usually an
      excellent source of information related to the bug:</para>

      <itemizedlist>
        <listitem>
          <para>sometimes a patch already exists, and it is available on
          the bug report; you can then recompile a fixed version of the
          broken package locally (see <xref
          linkend="sect.rebuilding-package"/>);</para>
        </listitem>
        <listitem>
          <para>in other cases, users may have found a workaround for the
          problem and shared their insights about it in their replies to
          the report;</para>
        </listitem>
        <listitem>
          <para>in yet other cases, a fixed package may have already been
          prepared and made public by the maintainer.</para>
        </listitem>
      </itemizedlist>

      <para>Depending on the severity of the bug, a new version of the package
      may be prepared specifically for a new revision of the stable release.
      When this happens, the fixed package is made available in the
      <literal>proposed-updates</literal> section of the Debian mirrors (see
      <xref linkend="sect.apt-sources.list.stable.proposed-updates"/>). The
      corresponding entry can then be temporarily added to the
      <filename>sources.list</filename> file, and updated packages can be
      installed with <command>apt</command> or
      <command>aptitude</command>.</para>

      <indexterm><primary><literal>release.debian.org</literal></primary><secondary>proposed updates</secondary></indexterm>

      <para>Sometimes the fixed package isn't available in this section yet
      because it is pending a validation by the Stable Release Managers.
      You can verify if that is the case on their web page. Packages listed
      there aren't available yet, but at least you know that the
      publication process is ongoing. <ulink type="block"
      url="https://release.debian.org/proposed-updates/stable.html"/></para>
    </section>

    <section>
      <title>Cleaning Up after an Upgrade</title>
      <indexterm><primary>upgrade</primary><secondary>cleaning</secondary></indexterm>
      <indexterm><primary>system</primary><secondary>cleaning</secondary></indexterm>

      <para>APT usually ensures a clean upgrade, pulling in new and updated
      dependencies, or removing conflicting packages. But even being such a
      great tool, it cannot cover all tasks users and administrators will face
      after an upgrade, because they require a human decision.</para>

      <section id="sect.apt-show-versions">
        <title>Packages removed from the Debian Archive</title>
        <indexterm><primary><command>apt-show-versions</command></primary></indexterm>
        <indexterm><primary><command>aptitude</command></primary><secondary>obsolete packages</secondary></indexterm>
        <indexterm><primary>package</primary><secondary>obsolete</secondary></indexterm>

        <para>Sometimes the Debian ftpmasters remove packages from the Debian
        archive, because they contain release critical bugs, were abandoned by
        their upstream author or their package maintainer, or simply reached
        their end of life. In this case a newer Debian release does not ship
        the package anymore. To find all packages, which do not have a package
        source, use the <command>apt-show-versions</command> command:</para>

        <screen><computeroutput>$ </computeroutput><userinput>apt-show-versions | grep "No available version"</userinput></screen>

        <para>A similar result can be achieved by <command>aptitude search
        ~o</command>. If the packages found are not required anymore, they
        should be purged from the system, because they will not face any
        updates for critical or security related bugs anymore.</para>
      </section>

      <section>
        <title>Dummy and Transitional Packages</title>
        <indexterm><primary>dummy package</primary></indexterm>
        <indexterm><primary>transitional package</primary></indexterm>
        <indexterm><primary>package</primary><secondary>transitional</secondary></indexterm>
        <indexterm><primary>package</primary><secondary>dummy</secondary></indexterm>
        <indexterm><primary>package</primary><secondary>oldlibs</secondary></indexterm>
        <indexterm><primary><literal>oldlibs</literal></primary></indexterm>
        <indexterm><primary><command>aptitude</command></primary></indexterm>
        <indexterm><primary><command>deboprhan</command></primary></indexterm>
        <indexterm><primary><command>debfoster</command></primary></indexterm>

        <para>Sometimes, it might be necessary for a package to get a new name.
        In this case often the old package is kept as an (almost) empty package,
        depending on the new one and installing only the mandatory files in
        <filename>/usr/share/doc/<replaceable>package</replaceable>/</filename>.
        Such packages are called "dummy" or "transitional" packages. If the
        package maintainer in charge also changed the section of this package to
        <literal>oldlibs</literal>, then tools like <command>aptitude</command>,
        <command>deboprhan</command>, or <command>debfoster</command> (see
        sidebar <xref linkend="sidebar.deborphan-debfoster"/>) can pickup these
        packages to suggest their removal.</para>

        <para>Unfortunately there is currently no foolproof way of making sure
        that these packages are automatically removed or picked by the tools
        mentioned above. One way to check if the system still has some of these
        packages installed, is to look through the package descriptions of
        installed packages and then check the results. Be careful not to
        schedule the results for automatic removal, because this method can lead
        to false positives:</para>

        <screen><computeroutput>$ </computeroutput><userinput>dpkg -l | grep ^ii | grep -i -E "(transition|dummy)"</userinput></screen>

        <indexterm><primary>package</primary><secondary>automatic</secondary></indexterm>
        <indexterm><primary>package</primary><secondary><literal>markauto</literal></secondary></indexterm>
        <indexterm><primary>package</primary><secondary><literal>unmarkauto</literal></secondary></indexterm>

        <para>Because the new package is pulled in as a dependency of the
        transitional package, it is usually marked as automatically installed
        and might be scheduled for removal if you try to purge the
        transitional package from your system. In this case you can use either
        of the approaches described in sidebar <xref
        linkend="sidebar.apt-install-and-remove"/> and <xref
        linkend="sect.automatic-tracking"/> to selectively remove the
        transitional package.</para>
      </section>

      <section>
        <title>Old or Unused Configuration Files</title>
        <indexterm><primary>configuration</primary><secondary>configuration files</secondary></indexterm>
        <indexterm><primary><filename>.dpkg-dist</filename></primary></indexterm>
        <indexterm><primary><filename>.dpkg-old</filename></primary></indexterm>
        <indexterm><primary><filename>.ucf-old</filename></primary></indexterm>
        <indexterm><primary><filename>.ucf-new</filename></primary></indexterm>
        <indexterm><primary><filename>.ucf-dist</filename></primary></indexterm>
        <indexterm><primary>package</primary><secondary>purge</secondary></indexterm>
        <indexterm><primary>apt</primary><secondary><literal>autoremove</literal></secondary></indexterm>
        <indexterm><primary>apt-get</primary><secondary><literal>autoremove</literal></secondary></indexterm>

        <para>If the upgrade was successful there might be some configuration
        file cruft, either from dpkg (see <xref linkend="sect.conffiles"/>),
        ucf or from removed packages. The latter can be <link
        linkend="sidebar.purge">purged</link> by using <command>apt autoremove
        --purge</command>.  The configuration files that were handled by
        <emphasis role="pkg">dpkg</emphasis> or <emphasis
        role="pkg">ucf</emphasis> during the upgrade process have left some
        counterparts with a dedicated suffix, e.g.
        <filename>.dpkg-dist</filename>, <filename>.dpkg-old</filename>,
        <filename>.ucf-old</filename>. Using the <command>find</command> or
        <command>locate</command> command can help to track them down. If they
        are no longer of any use, they can be deleted.</para>
      </section>

      <!-- TODO: cruft/cruft-ng is also mentioned in chapter 03, but I don't
      see how to improve here -->
      <section>
        <title>Files not owned by any Package</title>
        <indexterm><primary><emphasis role="pkg">cruft</emphasis></primary></indexterm>
        <indexterm><primary><emphasis role="pkg">cruft-ng</emphasis></primary></indexterm>

        <para>The Debian policy enforces that packages don't leave files behind
        when they are purged. Violating this principle is a serious bug and you
        will rarely encounter it. If you do, report it; and if you are curious
        though, you can use the <emphasis role="pkg">cruft</emphasis> or
        <emphasis role="pkg">cruft-ng</emphasis> package to check your system
        for files not owned by any package.</para>
      </section>
    </section>
  </section>

  <section id="sect.regular-upgrades">
    <title>Keeping a System Up to Date</title>
    <indexterm><primary>system</primary><secondary><foreignphrase>update</foreignphrase></secondary><tertiary>unattended</tertiary></indexterm>
    <indexterm><primary>system</primary><secondary><foreignphrase>upgrade</foreignphrase></secondary><tertiary>unattended</tertiary></indexterm>
    <indexterm><primary>system</primary><secondary><foreignphrase>dist-upgrade</foreignphrase></secondary><tertiary>unattended</tertiary></indexterm>
    <indexterm><primary>system</primary><secondary>periodic update</secondary></indexterm>
    <indexterm><primary>system</primary><secondary>unattended upgrade</secondary></indexterm>

    <para>The Debian distribution is dynamic and changes continually. Most
    of the changes are in the <emphasis
    role="distribution">Testing</emphasis> and <emphasis
    role="distribution">Unstable</emphasis> versions, but even <emphasis
    role="distribution">Stable</emphasis> is updated from time to time,
    mostly for security-related fixes. Whatever version of Debian a system
    runs, it is generally a good idea to keep it up to date, so that you
    can get the benefit of recent evolution and bug fixes.</para>

    <para>While it is of course possible to periodically run a tool to
    check for available updates and run the upgrades, such a repetitive
    task is tedious, especially when it needs to be performed on several
    machines. Fortunately, like many repetitive tasks, it can be partly
    automated, and a set of tools have already been developed to that
    effect.</para>

    <indexterm><primary><emphasis role="pkg">apticron</emphasis></primary></indexterm>

    <para>The first of these tools is <command>apticron</command>, in the
    package of the same name. Its main effect is to run a script daily (via
    <command>cron</command>). The script updates the list of available
    packages, and, if some installed packages are not in the latest
    available version, it sends an email with a list of these packages
    along with the changes that have been made in the new versions.
    Obviously, this package mostly targets users of Debian <emphasis
    role="distribution">Stable</emphasis>, since the daily emails would be
    very long for the faster paced versions of Debian. When updates are
    available, <command>apticron</command> automatically downloads them. It
    does not install them — the administrator will still do it — but
    having the packages already downloaded and available locally (in APT's
    cache) makes the job faster.</para>

    <indexterm><primary>APT</primary><secondary><filename>/etc/cron.daily/apt-compat</filename></secondary></indexterm>
    <indexterm><primary>APT</primary><secondary><filename>/etc/apt/apt.conf.d/10periodic</filename></secondary></indexterm>
    <indexterm><primary><filename>/etc</filename></primary><secondary><filename>/etc/cron.daily/apt-compat</filename></secondary></indexterm>

    <para>Administrators in charge of several computers will no doubt
    appreciate being informed of pending upgrades, but the upgrades
    themselves are still as tedious as they used to be. Periodic upgrades can
    be enabled: it uses a <command>systemd</command> timer unit or
    <command>cron</command>.
    If <emphasis role="pkg">systemd</emphasis> is not installed, the
    <filename>/etc/cron.daily/apt-compat</filename> script (in the <emphasis
    role="pkg">apt</emphasis> package) comes in handy. This script is
    run daily (and non-interactively) by <command>cron</command>.
    To control the behavior, use APT configuration variables (which are
    therefore stored in a file
    <filename>/etc/apt/apt.conf.d/10periodic</filename>). The main variables
    are:</para>

    <variablelist>
      <varlistentry>
        <term>
          <indexterm><primary>APT</primary><secondary><literal>APT::Periodic::Update-Package-Lists</literal></secondary></indexterm>
          <literal>APT::Periodic::Update-Package-Lists</literal>
        </term>
        <listitem>
          <para>This option allows you to specify the frequency (in days)
          at which the package lists are refreshed.
          <command>apticron</command> users can do without this variable,
          since <command>apticron</command> already does this task.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <indexterm><primary>APT</primary><secondary><literal>APT::Periodic::Download-Upgradeable-Packages</literal></secondary></indexterm>
          <literal>APT::Periodic::Download-Upgradeable-Packages</literal>
        </term>
        <listitem>
          <para>Again, this option indicates a frequency (in days), this
          time for the downloading of the actual packages. Again,
          <command>apticron</command> users won't need it.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <indexterm><primary>APT</primary><secondary><literal>APT::Periodic::AutocleanInterval</literal></secondary></indexterm>
          <literal>APT::Periodic::AutocleanInterval</literal>
        </term>
        <listitem>
          <para>This option covers a feature that
          <command>apticron</command> doesn't have. It controls how often
          obsolete packages (those not referenced by any distribution
          anymore) are removed from the APT cache. This keeps the APT cache
          at a reasonable size and means that you don't need to worry about
          that task.</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <indexterm><primary>APT</primary><secondary><literal>APT::Periodic::Unattended-Upgrade</literal></secondary></indexterm>
          <literal>APT::Periodic::Unattended-Upgrade</literal>
        </term>
        <listitem>
          <indexterm><primary><emphasis role="pkg">unattended-upgrades</emphasis></primary></indexterm>
          <indexterm><primary>APT</primary><secondary><filename>/etc/apt/apt.conf.d/50unattended-upgrades</filename></secondary><seealso><emphasis role="pkg">unattended-upgrades</emphasis></seealso></indexterm>
          <indexterm><primary><emphasis role="pkg">apt-listbugs</emphasis></primary></indexterm>
          <para>When this option is enabled, the daily script will
          execute <command>unattended-upgrade</command> (from the
          <emphasis role="pkg">unattended-upgrades</emphasis> package)
          which — as its name suggest — can automatize the upgrade
          process for some packages (by default it only takes care of
          security updates, but this can be customized in
          <filename>/etc/apt/apt.conf.d/50unattended-upgrades</filename>).
          Note that this option can be set with the help of debconf
          by running <command>dpkg-reconfigure -plow
          unattended-upgrades</command>. If <emphasis
          role="pkg">apt-listbugs</emphasis> is installed, it will prevent
          an automatic upgrade of packages which are affected by an already
          reported serious or grave bug.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <indexterm><primary>APT</primary><secondary><filename>/usr/lib/apt/apt.systemd.daily</filename></secondary></indexterm>

    <para>Other options can allow you to control the cache cleaning
    behavior with more precision. They are not listed here, but they are
    described in the <filename>/usr/lib/apt/apt.systemd.daily</filename>
    script.</para>

    <!-- TODO: notifications are provided by gnome-software without gnome-packagekit -->
    <indexterm><primary><emphasis role="pkg">gnome-packagekit</emphasis></primary></indexterm>

    <para>These tools work very well for servers, but desktop users generally
    prefer a more interactive system. The package <emphasis
    role="pkg">gnome-software</emphasis> provides an icon in the notification
    area of desktop environments when updates are available; clicking on this
    icon then runs an interface to perform updates. You can browse through
    available updates, read the short description of the relevant packages and
    the corresponding <filename>changelog</filename> entries, and select
    whether to apply the update or not on a case-by-case basis.</para>

    <figure>
      <title>Upgrading with <command>gpk-update-viewer</command></title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/gnome-packagekit.png" scalefit="1" width="70%"/>
        </imageobject>
      </mediaobject>
    </figure>

    <para>This tool is no longer installed in the default GNOME desktop. The
    new philosophy is that security updates should be automatically installed,
    either in the background or, preferably, when you shutdown your computer so
    as to not confuse any running application.</para>
  </section>

  <section id="sect.automatic-upgrades">
    <title>Automatic Upgrades</title>
    <indexterm><primary>upgrade</primary><secondary>automatic system upgrade</secondary></indexterm>
    <indexterm><primary>upgrade</primary><secondary>non-interactive</secondary></indexterm>
    <indexterm><primary>system</primary><secondary>automatic upgrade</secondary></indexterm>
    <indexterm><primary>automatic upgrade</primary></indexterm>
    <indexterm><primary>non-interactive upgrade</primary></indexterm>

    <para>Since Falcot Corp has many computers but only limited manpower,
    its administrators try to make upgrades as automatic as possible. The
    programs in charge of these processes must therefore run with no human
    intervention.</para>

    <section>
      <title>Configuring <command>dpkg</command></title>
      <indexterm><primary><command>dpkg</command></primary><secondary><command>--force-confdef</command></secondary></indexterm>
      <indexterm><primary><command>dpkg</command></primary><secondary><command>--force-confold</command></secondary></indexterm>

      <para>As we have already mentioned (see sidebar <xref
      linkend="sidebar.questions-conffiles"/>), <command>dpkg</command> can
      be instructed not to ask for confirmation when replacing a
      configuration file (with the <literal>--force-confdef
      --force-confold</literal> options). Interactions can, however, have
      three other sources: some come from APT itself, some are handled by
      <command>debconf</command>, and some happen on the command line due
      to package configuration scripts (sometimes handled by <emphasis
      role="pkg">ucf</emphasis>).</para>
    </section>

    <section>
      <title>Configuring APT</title>
      <indexterm><primary><command>apt</command></primary><secondary><literal>--assume-yes</literal></secondary></indexterm>
      <indexterm><primary><command>apt-get</command></primary><secondary><literal>--assume-yes</literal></secondary></indexterm>
      <indexterm><primary><command>aptitude</command></primary><secondary><literal>--assume-yes</literal></secondary></indexterm>

      <para>The case of APT is simple: the <literal>-y</literal> option (or
      <literal>--assume-yes</literal>) tells APT to consider the answer to
      all its questions to be “yes”.</para>
    </section>

    <section>
      <title>Configuring <command>debconf</command></title>
      <indexterm><primary><command>debconf</command></primary><secondary>frontend</secondary><tertiary><literal>noninteractive</literal></tertiary></indexterm>

      <para>The case of <command>debconf</command> deserves more details.
      This program was, from its inception, designed to control the
      relevance and volume of questions displayed to the user, as well as
      the way they are shown. That is why its configuration requests a
      minimal priority for questions; only questions above the minimal
      priority are displayed. <command>debconf</command> assumes the
      default answer (defined by the package maintainer) for questions
      which it decided to skip.</para>

      <para>The other relevant configuration element is the interface used
      by the frontend. If you choose <literal>noninteractive</literal> out
      of the choices, all user interaction is disabled. If a package tries
      to display an informative note, it will be sent to the administrator
      by email.</para>

      <indexterm><primary><command>dpkg-reconfigure</command></primary></indexterm>
      <indexterm><primary>APT</primary><secondary><varname>DEBIAN_FRONTEND</varname></secondary></indexterm>
      <indexterm><primary>environment variable</primary><secondary><varname>DEBIAN_FRONTEND</varname></secondary></indexterm>

      <para>To reconfigure <command>debconf</command>, use the
      <command>dpkg-reconfigure</command> tool from the <emphasis
      role="pkg">debconf</emphasis> package; the relevant command is
      <command>dpkg-reconfigure debconf</command>. Note that the configured
      values can be temporarily overridden with environment variables when
      needed (for instance, <varname>DEBIAN_FRONTEND</varname> controls the
      interface, as documented in the
      <citerefentry><refentrytitle>debconf</refentrytitle><manvolnum>7</manvolnum></citerefentry>
      manual page).</para>
    </section>

    <section>
      <title>Handling Command Line Interactions</title>

      <para>The last source of interactions, and the hardest to get rid of,
      is the configuration scripts run by <command>dpkg</command>. There is
      unfortunately no standard solution, and no answer is overwhelmingly
      better than another.</para>

      <para>The common approach is to suppress the standard input by
      redirecting the empty content of <filename>/dev/null</filename> into
      it with <command><replaceable>command</replaceable>
      &lt;/dev/null</command>, or to feed it with an endless stream of
      newlines. None of these methods is 100 % reliable, but they
      generally lead to the default answers being used, since most scripts
      consider a lack of reply as an acceptance of the default
      value.</para>
    </section>

    <section>
      <title>The Miracle Combination</title>

      <para>By combining the previous elements, it is possible to design a
      small but rather reliable script which can handle automatic
      upgrades.</para>

      <example id="example.non-interactive-upgrade">
        <title>Non-interactive upgrade script</title>

        <programlisting>export DEBIAN_FRONTEND=noninteractive
yes '' | apt-get -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" dist-upgrade
</programlisting>
      </example>

      <!-- MAYCHANGE: stable distribution codename -->
      <sidebar>
        <title><emphasis>IN PRACTICE</emphasis> The Falcot Corp case</title>

        <para>Falcot computers are a heterogeneous system, with machines
        having various functions. Administrators will therefore pick the
        most relevant solution for each computer.</para>

        <para>In practice, the servers running <emphasis
        role="distribution">Bullseye</emphasis> are configured with the
        “miracle combination” above, and are kept up to date
        automatically. Only the most critical servers (the firewalls, for
        instances) are set up with <command>apticron</command>, so that
        upgrades always happen under the supervision of an
        administrator.</para>

        <para>The office workstations in the administrative services also
        run <emphasis role="distribution">Bullseye</emphasis>, but they are
        equipped with <emphasis role="pkg">gnome-packagekit</emphasis>,
        so that users trigger the upgrades themselves. The
        rationale for this decision is that if upgrades happen without an
        explicit action, the behavior of the computer might change
        unexpectedly, which could cause confusion for the main
        users.</para>

        <para>In the lab, the few computers using <emphasis
        role="distribution">Testing</emphasis> — to take advantage of the
        latest software versions — are not upgraded automatically either.
        Administrators only configure APT to prepare the upgrades but not
        enact them; when they decide to upgrade (manually), the tedious
        parts of refreshing package lists and downloading packages will be
        avoided, and administrators can focus on the really useful
        part.</para>
      </sidebar>
    </section>
  </section>

  <section id="sect.searching-packages">
    <title>Searching for Packages</title>
    <indexterm><primary>package</primary><secondary>search package</secondary></indexterm>

    <para>With the large and ever-growing amount of software in Debian,
    there emerges a paradox: Debian usually has a tool for most tasks, but
    that tool can be very difficult to find among the myriad other
    packages. The lack of appropriate ways to search for (and to find) the
    right tool has long been a problem. Fortunately, this problem has
    almost entirely been solved.</para>

    <para>The most trivial search possible is looking up an exact package
    name. If <command>apt show
    <replaceable>package</replaceable></command> returns a result, then the
    package exists. Unfortunately, this requires knowing or even guessing
    the package name, which isn't always possible.</para>

    <sidebar>
      <title><emphasis>TIP</emphasis> Package naming conventions</title>
      <indexterm><primary>package</primary><secondary>naming conventions</secondary></indexterm>

      <para>Some categories of packages are named according to a
      conventional naming scheme; knowing the scheme can sometimes allow
      you to guess exact package names. For instance, for Perl modules, the
      convention says that a module called
      <literal>XML::Handler::Composer</literal> upstream should be packaged
      as <emphasis role="pkg">libxml-handler-composer-perl</emphasis>. The
      library enabling the use of the <command>gconf</command> system from
      Python is packaged as <emphasis role="pkg">python-gconf</emphasis>.
      It is unfortunately not possible to define a fully general naming
      scheme for all packages, even though package maintainers usually try
      to follow the choice of the upstream developers.</para>
    </sidebar>

    <indexterm><primary><command>apt-cache</command></primary><secondary><literal>search</literal></secondary></indexterm>
    <indexterm><primary><command>axi-cache</command></primary><secondary><literal>search</literal></secondary></indexterm>

    <para>A slightly more successful searching pattern is a plain-text
    search in package names, but it remains very limited. You can generally
    find results by searching package descriptions: since each package has
    a more or less detailed description in addition to its package name, a
    keyword search in these descriptions will often be useful.
    <command>apt-cache</command> and <command>axi-cache</command> are the
    tools of choice for this kind of
    search (see <xref linkend="sidebar.apt-axi-cache"/>); for instance,
    <command>apt-cache search video</command> will
    return a list of all packages whose name or description contains the
    keyword “video”.</para>

    <indexterm><primary><command>aptitude</command></primary><secondary><literal>search</literal></secondary></indexterm>
    <indexterm><primary><command>aptitude</command></primary><secondary><literal>show</literal></secondary></indexterm>

    <para>For more complex searches, a more powerful tool such as
    <command>aptitude</command> is required. <command>aptitude</command>
    allows you to search according to a logical expression based on the
    package's meta-data fields. For instance, the following command
    searches for packages whose name contains <literal>kino</literal>,
    whose description contains <literal>video</literal> and whose
    maintainer's name contains <literal>paul</literal>:</para>

    <!-- MAYCHANGE: command output -->
    <screen>$ <userinput>aptitude search kino~dvideo~mpaul</userinput>
p   kino  - Non-linear editor for Digital Video data
$ <userinput>aptitude show kino</userinput>
<![CDATA[Package: kino                     
Version: 1.3.4+dfsg0-1.1
State: not installed
Priority: optional
Section: video
Maintainer: Paul Brossier <piem@debian.org>
Architecture: amd64
Uncompressed Size: 8,316 k
Depends: libasound2 (>= 1.0.16), libavc1394-0 (>= 0.5.3), libavcodec58 (>= 7:4.2),
         libavformat58 (>= 7:4.2), libavutil56 (>= 7:4.0), libc6 (>= 2.29), libdv4
         (>= 1.0.0), libgcc-s1 (>= 3.0), libgdk-pixbuf-2.0-0 (>= 2.22.0),
         libglade2-0 (>= 1:2.6.4-2~), libglib2.0-0 (>= 2.12.0), libgtk2.0-0 (>=
         2.24.0), libiec61883-0 (>= 1.2.0), libpango-1.0-0 (>= 1.14.0),
         libpangoft2-1.0-0 (>= 1.14.0), libquicktime2 (>= 2:1.2.2), libraw1394-11
         (>= 2.1.2), libsamplerate0 (>= 0.1.7), libstdc++6 (>= 9), libswscale5 (>=
         7:4.0), libx11-6, libxext6, libxml2 (>= 2.7.4), libxv1
Recommends: ffmpeg, curl
Suggests: udev | hotplug, vorbis-tools, sox, mjpegtools, lame, ffmpeg2theora
Conflicts: kino-dvtitler, kino-timfx, kinoplus, kino-dvtitler:i386,
           kino-timfx:i386, kinoplus:i386, kino:i386
Replaces: kino-dvtitler, kino-timfx, kinoplus, kino-dvtitler:i386,
          kino-timfx:i386, kinoplus:i386
Provides: kino-dvtitler, kino-timfx, kinoplus
Description: Non-linear editor for Digital Video data
 Kino allows you to record, create, edit, and play movies recorded with DV
 camcorders. This program uses many keyboard commands for fast navigating and
 editing inside the movie. 
 
 The kino-timfx, kino-dvtitler and kinoplus sets of plugins, formerly distributed
 as separate packages, are now provided with Kino.
Homepage: http://www.kinodv.org/
Tags: field::arts, hardware::camera, implemented-in::c, implemented-in::c++,
      interface::graphical, interface::x11, role::program, scope::application,
      suite::gnome, uitoolkit::gtk, use::editing, use::learning,
      works-with::video, x11::application
]]></screen>

    <para>The search only returns one package, <emphasis
    role="pkg">kino</emphasis>, which satisfies all three criteria.</para>

    <para>Even these multi-criteria searches are rather unwieldy, which
    explains why they are not used as much as they could. A new tagging
    system has therefore been developed, and it provides a new approach to
    searching. Packages are given tags that provide a thematic
    classification along several strands, known as a “facet-based
    classification”. In the case of <emphasis role="pkg">kino</emphasis>
    above, the package's tags indicate that Kino is a Gnome-based software
    that works on video data and whose main purpose is editing.</para>

    <indexterm><primary><literal>debtags.debian.org</literal></primary></indexterm>

    <para>Browsing this classification can help you to search for a package
    which corresponds to known needs; even if it returns a (moderate)
    number of hits, the rest of the search can be done manually. To do
    that, you can use the <literal>~G</literal> search pattern in
    <command>aptitude</command>, but it is probably easier to simply
    navigate the site where tags are managed or use the
    <command>debtags</command> command:
    <ulink type="block" url="https://debtags.debian.org/"/>
    </para>

    <indexterm><primary><emphasis role="pkg">debtags</emphasis></primary></indexterm>
    <indexterm><primary>tag</primary></indexterm>
    <indexterm><primary>package</primary><secondary>tags</secondary></indexterm>

    <informalexample>
      <screen role="scale" width="80"><computeroutput>$ </computeroutput><userinput>debtags search "works-with::video &amp;&amp; use::editing"</userinput></screen>
    </informalexample>

    <para>Selecting the <literal>works-with::video</literal> and
    <literal>use::editing</literal> tags yields a handful of packages,
    including the <emphasis role="pkg">kino</emphasis> and <emphasis
    role="pkg">pitivi</emphasis> video editors. This system of
    classification is bound to be used more and more as time goes on, and
    package managers will gradually provide efficient search interfaces
    based on it.</para>

    <para>To sum up, the best tool for the job depends on the complexity of
    the search that you wish to do:</para>

    <itemizedlist>
      <listitem>
        <para><command>apt-cache</command> only allows searching in package
        names and descriptions, which is very convenient when looking for a
        particular package that matches a few target keywords;</para>
        <indexterm><primary><command>apt-cache</command></primary></indexterm>
      </listitem>
      <listitem>
        <para>when the search criteria also include relationships between
        packages or other meta-data such as the name of the maintainer,
        <command>synaptic</command> will be more useful;</para>
        <indexterm><primary><command>synaptic</command></primary></indexterm>
      </listitem>
      <listitem>
        <para>when a tag-based search is needed, a good tool is
        <command>packagesearch</command>, a graphical interface dedicated
        to searching available packages along several criteria (including
        the names of the files that they contain). For usage on the
        command-line, <command>axi-cache</command> will fit the bill.</para>
        <indexterm><primary><emphasis role="pkg">packagesearch</emphasis></primary></indexterm>
        <indexterm><primary><command>axi-cache</command></primary></indexterm>
      </listitem>
      <listitem>
        <para>finally, when the searches involve complex expressions with
        logic operations, the tool of choice will be
        <command>aptitude</command>'s search pattern syntax, which is quite
        powerful despite being somewhat obscure; it works in both the
        command-line and the interactive modes.</para>
        <indexterm><primary><command>aptitude</command></primary></indexterm>
      </listitem>
    </itemizedlist>
  </section>
</chapter>
<!-- vim: set spell spelllang=en_us ft=xml tw=79 ts=2 sw=2 ai si et: -->

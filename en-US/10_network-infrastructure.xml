<?xml version="1.0"?>
<chapter id="network-infrastructure">
  <chapterinfo>
    <mediaobject condition="pdf">
      <imageobject>
        <imagedata fileref="images/chap-network-infrastructure.png" scalefit="1"/>
      </imageobject>
    </mediaobject>
    <keywordset>
      <keyword>Network</keyword>
      <keyword>Gateway</keyword>
      <keyword>TCP/IP</keyword>
      <keyword>IPv6</keyword>
      <keyword>DNS</keyword>
      <keyword>Bind</keyword>
      <keyword>DHCP</keyword>
      <keyword>QoS</keyword>
    </keywordset>
  </chapterinfo>
  <title id="infrastructure.title">Network Infrastructure</title>
  <highlights>
    <para>Linux sports the whole Unix heritage for networking, and Debian
    provides a full set of tools to create and manage them. This chapter
    reviews these tools.</para>
  </highlights>
  <section id="sect.gateway">
    <title>Gateway</title>
    <indexterm><primary>gateway</primary></indexterm>
    <indexterm><primary>network</primary><secondary>gateway</secondary></indexterm>
    <indexterm><primary>router</primary></indexterm>

    <para>A gateway is a system linking several networks. This term often
    refers to a local network's “exit point” on the mandatory path to
    all external IP addresses. The gateway is connected to each of the
    networks it links together, and acts as a router to convey IP packets
    between its various interfaces.</para>

    <sidebar>
      <title><emphasis>BACK TO BASICS</emphasis> IP packet</title>
      <indexterm><primary>packet</primary><secondary>IP</secondary></indexterm>
      <indexterm><primary>IP</primary><seealso>Internet Protocol</seealso></indexterm>
      <indexterm><primary>Internet Protocol</primary></indexterm>

      <para>Most networks nowadays use the IP protocol (<emphasis>Internet
      Protocol</emphasis>). This protocol segments the transmitted data
      into limited-size packets. Each packet contains, in addition to its
      payload data, a number of details required for its proper
      routing.</para>
    </sidebar>

    <sidebar id="sidebar.tcp-udp">
      <title><emphasis>BACK TO BASICS</emphasis> TCP/UDP</title>
      <indexterm><primary>protocol</primary><secondary>TCP</secondary></indexterm>
      <indexterm><primary>protocol</primary><secondary>UDP</secondary></indexterm>
      <indexterm><primary>port</primary><secondary>TCP</secondary></indexterm>
      <indexterm><primary>port</primary><secondary>UDP</secondary></indexterm>
      <indexterm><primary>TCP</primary><secondary>port</secondary></indexterm>
      <indexterm><primary>UDP</primary><secondary>port</secondary></indexterm>
      <indexterm><primary>Transmission Control Protocol</primary><seealso></seealso></indexterm>
      <indexterm><primary>User Datagram Protocol</primary><seealso>UDP</seealso></indexterm>

      <para>Many programs do not handle the individual packets themselves,
      even though the data they transmit does travel over IP; they often
      use TCP (<emphasis>Transmission Control Protocol</emphasis>). TCP is
      a layer over IP allowing the establishment of connections dedicated
      to data streams between two points. The programs then only see an
      entry point into which data can be fed with the guarantee that the
      same data exits without loss (and in the same sequence) at the exit
      point at the other end of the connection. Although many kinds of
      errors can happen in the lower layers, they are compensated by TCP:
      lost packets are retransmitted, and packets arriving out of order
      (for example, if they used different paths) are re-ordered
      appropriately.</para>

      <para>Another protocol relying on IP is UDP (<emphasis>User Datagram
      Protocol</emphasis>). In contrast to TCP, it is packet-oriented. Its
      goals are different: the purpose of UDP is only to transmit one
      packet from an application to another. The protocol does not try to
      compensate for possible packet loss on the way, nor does it ensure
      that packets are received in the same order as were sent. The main
      advantage to this protocol is that the latency is greatly improved,
      since the loss of a single packet does not delay the receiving of all
      following packets until the lost one is retransmitted.</para>

      <para>TCP and UDP both involve ports, which are “extension
      numbers” for establishing communication with a given application on
      a machine. This concept allows keeping several different
      communications in parallel with the same correspondent, since these
      communications can be distinguished by the port number.</para>

      <indexterm><primary>Internet Assigned Numbers Authority</primary><seealso>IANA</seealso></indexterm>
      <indexterm><primary>IANA</primary></indexterm>
      <indexterm><primary><filename>/etc</filename></primary><secondary><filename>/etc/services</filename></secondary></indexterm>

      <para>Some of these port numbers — standardized by the IANA
      (<emphasis>Internet Assigned Numbers Authority</emphasis>) — are
      “well-known” for being associated with network services. For instance,
      TCP port 25 is generally used by the email server. The list of services
      associated with port numbers can be found in the
      <filename>/etc/services</filename> file, also explained in
      <citerefentry><refentrytitle>services</refentrytitle>
      <manvolnum>5</manvolnum></citerefentry>, as well as in: <ulink
      type="block"
      url="https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml"/>
      </para>
    </sidebar>

    <indexterm><primary>IP</primary><secondary>masquerading</secondary></indexterm>
    <indexterm><primary>network</primary><secondary>masquerading</secondary></indexterm>

    <para>When a local network uses a private address range (not routable
    on the Internet), the gateway needs to implement <emphasis>address
    masquerading</emphasis> so that the machines on the network can
    communicate with the outside world. The masquerading operation is a
    kind of proxy operating on the network level: each outgoing connection
    from an internal machine is replaced with a connection from the gateway
    itself (since the gateway does have an external, routable address), the
    data going through the masqueraded connection is sent to the new one,
    and the data coming back in reply is sent through to the masqueraded
    connection to the internal machine. The gateway uses a range of
    dedicated TCP ports for this purpose, usually with very high numbers
    (over 60000). Each connection coming from an internal machine then
    appears to the outside world as a connection coming from one of these
    reserved ports.</para>
    <indexterm><primary>masquerading</primary></indexterm>

    <sidebar>
      <title><emphasis>CULTURE</emphasis> Private address range</title>
      <indexterm><primary>IP</primary><secondary>private address</secondary></indexterm>
      <indexterm><primary>private IP address</primary></indexterm>

      <para>RFC 1918 defines three ranges of IPv4 addresses not meant to
      be routed on the Internet but only used in local networks. The first
      one, <literal>10.0.0.0/8</literal> (see sidebar <xref
      linkend="sidebar.networking-basics"/>), is a class-A range (with
      2<superscript>24</superscript> IP addresses). The second one,
      <literal>172.16.0.0/12</literal>, gathers 16 class-B ranges
      (<literal>172.16.0.0/16</literal> to
      <literal>172.31.0.0/16</literal>), each containing
      2<superscript>16</superscript> IP addresses. Finally,
      <literal>192.168.0.0/16</literal> is a class-B range (grouping 256
      class-C ranges, <literal>192.168.0.0/24</literal> to
      <literal>192.168.255.0/24</literal>, with 256 IP addresses each).
      <ulink type="block"
      url="http://www.faqs.org/rfcs/rfc1918.html"/></para>
    </sidebar>

    <para>The gateway can also perform two kinds of <emphasis>network
    address translation</emphasis> (or NAT for short). The first kind,
    <emphasis>Destination NAT</emphasis> (DNAT) is a technique to alter the
    destination IP address (and/or the TCP or UDP port) for a (generally)
    incoming connection. The connection tracking mechanism also alters the
    following packets in the same connection to ensure continuity in the
    communication. The second kind of NAT is <emphasis>Source
    NAT</emphasis> (SNAT), of which <emphasis>masquerading</emphasis> is a
    particular case; SNAT alters the source IP address (and/or the TCP or
    UDP port) of a (generally) outgoing connection. As for DNAT, all the
    packets in the connection are appropriately handled by the connection
    tracking mechanism. Note that NAT is only relevant for IPv4 and its
    limited address space; in IPv6, the wide availability of addresses
    greatly reduces the usefulness of NAT by allowing all “internal”
    addresses to be directly routable on the Internet (this does not imply
    that internal machines are accessible, since intermediary firewalls can
    filter traffic).</para>

    <indexterm><primary>NAT</primary><seealso>Network Address Translation</seealso></indexterm>
    <indexterm><primary>Network Address Translation</primary><seealso>NAT</seealso></indexterm>
    <indexterm><primary>network</primary><secondary>address translation</secondary><seealso>NAT</seealso></indexterm>
    <indexterm><primary>network</primary><secondary>NAT</secondary></indexterm>
    <indexterm><primary>SNAT</primary><seealso>Source NAT</seealso></indexterm>
    <indexterm><primary>Source NAT</primary><seealso>SNAT</seealso></indexterm>
    <indexterm><primary>DNAT</primary><seealso>Destination NAT</seealso></indexterm>
    <indexterm><primary>Destination NAT</primary><seealso>DNAT</seealso></indexterm>

    <sidebar>
      <title><emphasis>BACK TO BASICS</emphasis> Port forwarding</title>
      <indexterm><primary>port forwarding</primary></indexterm>
      <indexterm><primary>network</primary><secondary>port forwarding</secondary></indexterm>
      <indexterm><primary><command>redir</command></primary></indexterm>

      <para>A concrete application of DNAT is <emphasis>port
      forwarding</emphasis>. Incoming connections to a given port of a
      machine are forwarded to a port on another machine. Other solutions
      may exist for achieving a similar effect, though, especially at the
      application level with <command>ssh</command> (see <xref
      linkend="sect.ssh-port-forwarding"/>) or
      <command>redir</command>.</para>
    </sidebar>

    <indexterm><primary>filesystem</primary><secondary>virtual</secondary><tertiary><filename>/proc/</filename></tertiary></indexterm>

    <para>Enough theory, let's get practical. Turning a Debian system into
    a gateway is a simple matter of enabling the appropriate option in the
    Linux kernel, by way of the <filename>/proc/</filename> virtual
    filesystem:</para>

    <screen>
<computeroutput># </computeroutput><userinput>echo 1 &gt; /proc/sys/net/ipv4/conf/default/forwarding</userinput>
</screen>

    <indexterm><primary><filename>/etc</filename></primary><secondary><filename>/etc/sysctl.conf</filename></secondary></indexterm>
    <indexterm><primary><filename>/etc</filename></primary><secondary><filename>/etc/sysctl.d/</filename></secondary></indexterm>
    <para>This option can also be automatically enabled on boot if
    <filename>/etc/sysctl.conf</filename> or a configuration file in
    <filename>/etc/sysctl.d/</filename> sets the
    <literal>net.ipv4.conf.default.forwarding</literal> option to
    <literal>1</literal>.</para>

    <example id="example.sysctl.conf">
      <title>The <filename>/etc/sysctl.conf</filename> file</title>

      <programlisting>
net.ipv4.conf.default.forwarding = 1
net.ipv4.conf.default.rp_filter = 1
net.ipv4.tcp_syncookies = 1
</programlisting>
    </example>

    <indexterm><primary>IP</primary><secondary>masquerading</secondary></indexterm>
    <indexterm><primary>network</primary><secondary>masquerading</secondary></indexterm>

    <para>The same effect can be obtained for IPv6 by simply replacing
    <literal>ipv4</literal> with <literal>ipv6</literal> in the manual
    command and using the <literal>net.ipv6.conf.all.forwarding</literal>
    line in <filename>/etc/sysctl.conf</filename>.</para>

    <para>Enabling IPv4 masquerading is a slightly more complex operation
    that involves configuring the <emphasis>netfilter</emphasis>
    firewall.</para>

    <para>Similarly, using NAT (for IPv4) requires configuring
    <emphasis>netfilter</emphasis>. Since the primary purpose of this
    component is packet filtering, the details are listed in <xref
    linkend="security" xrefstyle="select: label quotedtitle nopage"/> (see
    <xref linkend="sect.firewall-packet-filtering"/>).</para>
  </section>
  <section id="sect.x509-cert">
    <title>X.509 certificates</title>
    <indexterm><primary>certificate</primary><secondary>X.509</secondary></indexterm>
    <indexterm><primary>SSL</primary></indexterm>
    <indexterm><primary>Secure Socket Layer</primary><seealso>SSL</seealso></indexterm>
    <indexterm><primary>TLS</primary></indexterm>
    <indexterm><primary>Transport Layer Security</primary><seealso>TLS</seealso></indexterm>
    <indexterm><primary>X.509</primary><secondary>certificates</secondary></indexterm>
    <indexterm><primary>CA</primary><seealso>Certificate Authority</seealso></indexterm>
    <indexterm><primary>Certificate Authority</primary></indexterm>

    <para>Certificates are an important building block of many network services
    built on cryptographic protocols, when they need some sort of central
    authentication.</para>

    <indexterm><primary>IETF</primary></indexterm>

    <para>Among those protocols, SSL (<emphasis>Secure Socket Layer</emphasis>)
    was invented by Netscape to secure connections to web servers. It
    was later standardized by IETF under the acronym TLS
    (<emphasis>Transport Layer Security</emphasis>). Since then TLS
    continued to evolve, and nowadays SSL is deprecated due to multiple
    design flaws that have been discovered.</para>

    <para>The TLS protocol aims primarily to provide privacy and data integrity
    between two or more communicating computer applications. The most common
    case on the Internet is the communication between a client (e.g. a web browser)
    and a server.</para>

    <indexterm><primary>certificate</primary><secondary>root certificate</secondary></indexterm>

    <para>A key pair is needed for the exchange of information, which involves
    a public key that includes information about the identity of the owner
    and matches a private key. The private key must be kept secret, otherwise
    the security is compromised. However, anyone can create a key pair, store
    any identity on it, and pretend to be the identity of their choice. One
    solution involves the concept of a <emphasis>Certification Authority</emphasis>
    (CA), formalized by the X.509 standard. This term covers an entity that holds
    a trusted key pair known as a <emphasis>root certificate</emphasis>. This
    certificate is only used to sign other certificates (key pairs), after
    proper steps have been undertaken to check the identity stored on the key
    pair. Applications using X.509 can then check the certificates presented
    to them, if they know about the trusted root certificates.</para>

    <para>You can implement a CA (as described in <xref linkend="sect.easy-rsa"/>),
    but if you intend to use the certificate for a website, you need to rely on a
    trusted CA. The prices vary significantly, but it is possible to implement
    great security spending little to no money.</para>

    <section id="sect.trusted-certs">
      <title>Creating gratis trusted certificates</title>
      <indexterm><primary>certificate</primary><secondary>trusted certificate</secondary></indexterm>
      <indexterm><primary>certificate</primary><secondary>snakeoil certificate</secondary></indexterm>
      <indexterm><primary>certificate</primary><secondary>letsencrypt</secondary><seealso><emphasis role="pkg">certbot</emphasis></seealso></indexterm>

      <para>Many programs create and use snakeoil certificates by default
      (see sidebar <xref linkend="sidebar.snakeoil-certs"/>).
      Fortunately the <emphasis role="pkg">certbot</emphasis> package brings
      everything we need to create our own trusted certificates, provided by
      the "Lets Encrypt" initiative (see sidebar <xref
      linkend="sidebar.letsencrypt"/>), which can also be used for mail
      transport agents (Postfix), mail delivery agents (Dovecot, Cyrus,
      etc.), and other network services.</para>

      <para>The Falcot administrators just want to create a certificate for
      their website, which runs on Apache. There is a convenient Apache plugin
      for <emphasis role="pkg">certbot</emphasis> that automatically edits the
      Apache configuration to serve the obtained certificate, so they make
      use of it:</para>

      <indexterm><primary><emphasis role="pkg">certbot</emphasis></primary></indexterm>
      <indexterm><primary><emphasis role="pkg">python3-certbot-apache</emphasis></primary></indexterm>
      <indexterm><primary>Apache</primary><secondary><emphasis role="pkg">certbot</emphasis></secondary></indexterm>
      <indexterm><primary>Apache</primary><secondary><emphasis role="pkg">python3-certbot-apache</emphasis></secondary></indexterm>
      <indexterm><primary>Apache</primary><secondary>trusted certificates</secondary></indexterm>

      <screen>
<computeroutput># </computeroutput><userinput>apt install python3-certbot-apache
</userinput><computeroutput>[...]
# </computeroutput><userinput>certbot --apache
</userinput><computeroutput>aving debug log to /var/log/letsencrypt/letsencrypt.log
Plugins selected: Authenticator apache, Installer apache
Enter email address (used for urgent renewal and security notices)
 (Enter 'c' to cancel): </computeroutput><userinput>admin@falcot.com
</userinput><computeroutput>
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Please read the Terms of Service at
https://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf. You must
agree in order to register with the ACME server. Do you agree?
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
(Y)es/(N)o: </computeroutput><userinput>Y
</userinput><computeroutput>
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Would you be willing, once your first certificate is successfully issued, to
share your email address with the Electronic Frontier Foundation, a founding
partner of the Let's Encrypt project and the non-profit organization that
develops Certbot? We'd like to send you email about our work encrypting the web,
EFF news, campaigns, and ways to support digital freedom.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
(Y)es/(N)o: </computeroutput><userinput> N
</userinput><computeroutput>
Account registered.

No names were found in your configuration files. Please enter in your domain
name(s) (comma and/or space separated)  (Enter 'c' to cancel): </computeroutput><userinput>falcot.com
</userinput><computeroutput>
Requesting a certificate for falcot.com
Performing the following challenges:
http-01 challenge for falcot.com
Enabled Apache rewrite module
Waiting for verification...
Cleaning up challenges
Created an SSL vhost at /etc/apache2/sites-available/000-default-le-ssl.conf
Enabled Apache socache_shmcb module
Enabled Apache ssl module
Deploying Certificate to VirtualHost /etc/apache2/sites-available/000-default-le-ssl.conf
Enabling available site: /etc/apache2/sites-available/000-default-le-ssl.conf

Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
1: No redirect - Make no further changes to the webserver configuration.
2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for
new sites, or if you're confident your site works on HTTPS. You can undo this
change by editing your web server's configuration.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Select the appropriate number [1-2] then [enter] (press 'c' to cancel):</computeroutput> <userinput>2
</userinput><computeroutput>
Enabled Apache rewrite module
Redirecting vhost in /etc/apache2/sites-enabled/000-default.conf to ssl vhost in /etc/apache2/sites-available/000-default-le-ssl.conf

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Congratulations! You have successfully enabled https://falcot.com

You should test your configuration at:
https://www.ssllabs.com/ssltest/analyze.html?d=falcot.com
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

IMPORTANT NOTES:
 - Congratulations! Your certificate and chain have been saved at:
   /etc/letsencrypt/live/falcot.com/fullchain.pem
   Your key file has been saved at:
   /etc/letsencrypt/live/falcot.com/privkey.pem
   Your cert will expire on 2022-06-04. To obtain a new or tweaked
   version of this certificate in the future, simply run certbot again
   with the "certonly" option. To non-interactively renew *all* of
   your certificates, run "certbot renew"
 - Your account credentials have been saved in your Certbot
   configuration directory at /etc/letsencrypt. You should make a
   secure backup of this folder now. This configuration directory will
   also contain certificates and private keys obtained by Certbot so
   making regular backups of this folder is ideal.
 - If you like Certbot, please consider supporting our work by:

   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate
   Donating to EFF:                    https://eff.org/donate-le
</computeroutput>
</screen>

      <sidebar id="sidebar.letsencrypt">
        <title><emphasis>CULTURE</emphasis> The Let's Encrypt Initiative</title>
        <indexterm><primary>Let's Encrypt</primary></indexterm>

        <para>The <ulink url="https://letsencrypt.org/">Let's Encrypt</ulink>
        initiative is a joint effort to create a free, automated, and open
        certificate authority (CA), run for the public's benefit. It is supported
        by the <acronym>EFF</acronym> and the Linux Foundation. The initiative
        provides an automated tool for acquiring and renewing certificates. This
        reduces the amount of manual effort involved, especially if multiple
        sites and domains must be managed. The certificates can also be used
        for SIP, XMPP, WebSockets and TURN servers. Usage of the service
        requires control over the DNS information of the domain in question
        (domain validation).  <ulink
        type="block" url="https://letsencrypt.org/how-it-works/"/></para>
      </sidebar>

      <para>If you would rather keep the server running during the
      certificate creation, you can use the webroot plugin to get
      the certificate with the arguments <command>certonly</command> and
      <command>--webroot</command>. You would have to specify a
      <command>--webroot-path</command> (abbreviated <command>-w</command>), which
      should contain the files served. The command looks as follows:</para>

      <screen><computeroutput># </computeroutput><userinput>certbot certonly --webroot -w <replaceable>/var/www/html</replaceable> -d www.<replaceable>DOMAIN</replaceable>.com -d <replaceable>DOMAIN</replaceable>.com</userinput></screen>

      <para>You need to restart all services using the certificates that
      you have created.</para>

      <indexterm><primary><filename>/etc</filename></primary><secondary><filename>/etc/cron.d/certbot</filename></secondary></indexterm>
      <indexterm><primary><command>certbot</command></primary></indexterm>

      <para>The certificates created are so called short-life certificates,
      which are valid for 90 days and must therefor be renewed every once in
      three months using the <command>certbot renew</command> command. However, we
      shouldn't renew every certificate manually, but automatically. A basic
      cron job is included by <emphasis role="pkg">certbot</emphasis> in
      <filename>/etc/cron.d/certbot</filename>. To ensure that certificates can
      be automatically renewed, you can execute
      <command>certbot renew --dry-run</command>.</para>

    </section>
    <section id="sect.easy-rsa">
      <title>Public Key Infrastructure: <emphasis>easy-rsa</emphasis></title>
      <indexterm><primary>PKI</primary><seealso>Public Key Infrastructure</seealso></indexterm>
      <indexterm><primary>Public Key Infrastructure</primary></indexterm>
      <indexterm><primary>X.509</primary></indexterm>
      <indexterm><primary>certificate</primary><secondary>X.509</secondary></indexterm>
      <indexterm><primary><emphasis>easy-rsa</emphasis></primary></indexterm>
      <indexterm><primary>RSA (algorithm)</primary></indexterm>
      <indexterm><primary>algorithm</primary><secondary>RSA</secondary></indexterm>
      <indexterm><primary>key pair</primary></indexterm>

      <para>It is also possible to create our own CA, for that we will
      use the RSA algorithm, widely used in public-key cryptography.
      It involves a “key pair”, comprised of a private and a public
      key. The two keys are closely linked to each other, and their
      mathematical properties are such that a message encrypted with the
      public key can only be decrypted by someone knowing the private
      key, which ensures confidentiality. In the opposite direction, a
      message encrypted with the private key can be decrypted by anyone
      knowing the public key, which allows authenticating the origin of a
      message since only someone with access to the private key could
      generate it. When associated with a digital hash function (MD5,
      SHA1, or a more recent variant), this leads to a signature
      mechanism that can be applied to any message.</para>

      <para>Since public CAs only emit
      certificates in exchange for a (hefty) fee, it is also
      possible to create a private certification authority within
      the company. The <emphasis role="pkg">easy-rsa</emphasis>
      package provides tools to serve as an X.509 certification
      infrastructure, implemented as a set of scripts using the
      <command>openssl</command> command.</para>

      <sidebar>
        <title><emphasis>ALTERNATIVE</emphasis> GnuTLS</title>
        <indexterm><primary>DTLS</primary></indexterm>
        <indexterm><primary>GnuTLS</primary></indexterm>
        <indexterm><primary>SSL</primary></indexterm>
        <indexterm><primary>TLS</primary></indexterm>

        <para>GnuTLS can also be used to generate a CA, and deal with
        other technologies around the TLS, DTLS and SSL protocols.</para>

        <para>The package <emphasis role="pkg">gnutls-bin</emphasis> contains
        the command-line utilities. It is also useful to install the
        <emphasis role="pkg">gnutls-doc</emphasis> package, which
        includes extensive documentation.</para>
      </sidebar>

      <para>The Falcot Corp administrators use this tool to create
      the required certificates, both for the server and the
      clients. This allows the configuration of all clients to be
      similar since they will only have to be set up so as to trust
      certificates coming from Falcot's local CA. This CA is the
      first certificate to create; to this end, the administrators
      set up a directory with the files required for the CA in an
      appropriate location, preferably on a machine not connected to
      the network in order to mitigate the risk of the CA's private
      key being stolen.</para>

      <screen>
<computeroutput>$ </computeroutput><userinput>make-cadir pki-falcot
</userinput><computeroutput>$ </computeroutput><userinput>cd pki-falcot</userinput>
</screen>

      <para>They then store the required parameters into the
      <filename>vars</filename> file, which can be uncommented
      and edited:</para>

      <screen>
<computeroutput>$ </computeroutput><userinput>grep EASYRSA vars
</userinput><computeroutput><![CDATA[if [ -z "$EASYRSA_CALLER" ]; then
# easyrsa.  More specific variables for specific files (e.g., EASYRSA_SSL_CONF)
#set_var EASYRSA	"${0%/*}"
#set_var EASYRSA_OPENSSL	"openssl"
#set_var EASYRSA_OPENSSL	"C:/Program Files/OpenSSL-Win32/bin/openssl.exe"
#set_var EASYRSA_PKI		"$PWD/pki"
#set_var EASYRSA_TEMP_DIR	"$EASYRSA_PKI"
#set_var EASYRSA_DN	"cn_only"
#set_var EASYRSA_REQ_COUNTRY	"US"
#set_var EASYRSA_REQ_PROVINCE	"California"
#set_var EASYRSA_REQ_CITY	"San Francisco"
#set_var EASYRSA_REQ_ORG	"Copyleft Certificate Co"
#set_var EASYRSA_REQ_EMAIL	"me@example.net"
#set_var EASYRSA_REQ_OU		"My Organizational Unit"
#set_var EASYRSA_KEY_SIZE	2048
#set_var EASYRSA_ALGO		rsa
#set_var EASYRSA_CURVE		secp384r1
#set_var EASYRSA_CA_EXPIRE	3650
#set_var EASYRSA_CERT_EXPIRE	825
#set_var EASYRSA_CRL_DAYS	180
#set_var EASYRSA_CERT_RENEW	30
#set_var EASYRSA_RAND_SN	"yes"
#set_var EASYRSA_NS_SUPPORT	"no"
#set_var EASYRSA_NS_COMMENT	"Easy-RSA Generated Certificate"
#set_var EASYRSA_TEMP_FILE	"$EASYRSA_PKI/extensions.temp"
# when undefined here, default behaviour is to look in $EASYRSA_PKI first, then
# fallback to $EASYRSA for the 'x509-types' dir.  You may override this
#set_var EASYRSA_EXT_DIR	"$EASYRSA/x509-types"
#set_var EASYRSA_KDC_REALM      "CHANGEME.EXAMPLE.COM"
# EASYRSA_PKI or EASYRSA dir (in that order.) NOTE that this file is Easy-RSA
#set_var EASYRSA_SSL_CONF	"$EASYRSA/openssl-easyrsa.cnf"
#set_var EASYRSA_REQ_CN		"ChangeMe"
#set_var EASYRSA_DIGEST		"sha256"
#set_var EASYRSA_BATCH		""
]]>$ </computeroutput><userinput>vim vars
</userinput><computeroutput>$ </computeroutput>
</screen>

      <para>Now we prepare the public key infrastructure directory with the
      following command:</para>

      <screen>
<computeroutput>$ </computeroutput><userinput>./easyrsa init-pki
</userinput><computeroutput>

init-pki complete; you may now create a CA or requests.
Your newly created PKI dir is: /home/debian/pki-falcot/pki

</computeroutput></screen>

      <para>The next step is the creation of the CA's key pair itself
      (the two parts of the key pair will be stored under
      <filename>pki/ca.crt</filename> and
      <filename>pki/private/ca.key</filename> during this step). We can
      add the option <literal>nopass</literal> to avoid entering a password each
      time the private key is used:</para>

      <!-- MAY CHANGE: output -->
      <screen>
<computeroutput>$ </computeroutput><userinput>./easyrsa build-ca nopass</userinput>
<computeroutput>
Using SSL: openssl OpenSSL 1.1.1k  25 Mar 2021
Generating RSA private key, 2048 bit long modulus (2 primes)
..................+++++
...............................+++++
e is 65537 (0x010001)
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Common Name (eg: your user, host, or server name) [Easy-RSA CA]:

CA creation complete and you may now import and sign cert requests.
Your new CA certificate file for publishing is at:
/home/debian/pki-falcot/pki/ca.crt

</computeroutput></screen>

      <indexterm><primary><filename>dh.pem</filename></primary></indexterm>

      <para>The certificate can now be created, as well as the
      Diffie-Hellman parameters required for the server side of
      an SSL/TLS connection. They want to use it for a VPN server
      (see section <xref linkend="sect.virtual-private-network"/>)
      that is identified by the DNS name <literal>vpn.falcot.com</literal>;
      this name is re-used for the generated key files
      (<filename>keys/vpn.falcot.com.crt</filename> for the public
      certificate, <filename>keys/vpn.falcot.com.key</filename> for the
      private key):</para>

      <!-- MAY CHANGE: output -->
      <screen>
<computeroutput>$ </computeroutput><userinput>./easyrsa gen-req vpn.falcot.com nopass
</userinput><computeroutput>
Using SSL: openssl OpenSSL 1.1.1k  25 Mar 2021
Generating a RSA private key
......................................+++++
..........................................................................+++++
writing new private key to '/home/debian/pki-falcot/pki/easy-rsa-5515.0PwyXl/tmp.g1c6u6'
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Common Name (eg: your user, host, or server name) [vpn.falcot.com]:

Keypair and certificate request completed. Your files are:
req: /home/debian/pki-falcot/pki/reqs/vpn.falcot.com.req
key: /home/debian/pki-falcot/pki/private/vpn.falcot.com.key


$ </computeroutput><userinput>./easyrsa sign-req server vpn.falcot.com
</userinput><computeroutput>
Using SSL: openssl OpenSSL 1.1.1k  25 Mar 2021


You are about to sign the following certificate.
Please check over the details shown below for accuracy. Note that this request
has not been cryptographically verified. Please be sure it came from a trusted
source or that you have verified the request checksum with the sender.

Request subject, to be signed as a server certificate for 825 days:

subject=
    commonName                = vpn.falcot.com


Type the word 'yes' to continue, or any other input to abort.
  Confirm request details: <userinput>yes
</userinput>Using configuration from /home/debian/pki-falcot/pki/easy-rsa-5603.87iCIa/tmp.u8r8Fj
Check that the request matches the signature
Signature ok
The Subject's Distinguished Name is as follows
commonName            :ASN.1 12:'vpn.falcot.com'
Certificate is to be certified until May 27 15:26:29 2024 GMT (825 days)

Write out database with 1 new entries
Data Base Updated

Certificate created at: /home/debian/pki-falcot/pki/issued/vpn.falcot.com.crt


$ </computeroutput><userinput>./easyrsa gen-dh
</userinput><computeroutput>
Using SSL: openssl OpenSSL 1.1.1k  25 Mar 2021
Generating DH parameters, 2048 bit long safe prime, generator 2
This is going to take a long time
[…]

DH parameters of size 2048 created at /home/debian/pki-falcot/pki/dh.pem

</computeroutput></screen>

      <para>The following step creates certificates for the VPN clients;
      one certificate is required for each computer or person allowed to
      use the VPN:</para>

      <screen>
<computeroutput>$ </computeroutput><userinput>./easyrsa build-client-full JoeSmith nopass
</userinput><computeroutput>
Using SSL: openssl OpenSSL 1.1.1k  25 Mar 2021
Generating a RSA private key
...................................+++++
.........................................................................................+++++
writing new private key to '/home/debian/pki-falcot/pki/easy-rsa-5694.DOYwSn/tmp.RKlbOE'
-----
Using configuration from /home/debian/pki-falcot/pki/easy-rsa-5694.DOYwSn/tmp.d5QHAC
Check that the request matches the signature
Signature ok
The Subject's Distinguished Name is as follows
commonName            :ASN.1 12:'JoeSmith'
Certificate is to be certified until May 27 15:29:25 2024 GMT (825 days)

Write out database with 1 new entries
Data Base Updated

</computeroutput></screen>

    </section>
  </section>
  <section id="sect.virtual-private-network">
    <title>Virtual Private Network</title>
    <indexterm><primary>network</primary><secondary>virtual private</secondary></indexterm>
    <indexterm><primary>VPN</primary></indexterm>
    <indexterm><primary>virtual private network</primary><seealso>VPN</seealso></indexterm>
    <indexterm><primary>IP</primary><secondary>IPsec</secondary></indexterm>

    <para>A <emphasis>Virtual Private Network</emphasis> (VPN for short) is
    a way to link two different local networks through the Internet by way
    of a tunnel; the tunnel is usually encrypted for confidentiality. VPNs
    are often used to integrate a remote machine within a company's local
    network.</para>

    <para>Several tools provide this functionality. OpenVPN is an efficient solution,
    easy to deploy and maintain, based on SSL/TLS. Another possibility is
    using IPsec to encrypt IP traffic between two machines; this encryption
    is transparent, which means that applications running on these hosts
    need not be modified to take the VPN into account. SSH can also be used
    to provide a VPN, in addition to its more conventional features.
    Finally, a VPN can be established using Microsoft's PPTP protocol.
    Other solutions exist, but are beyond the focus of this book.</para>

    <section id="sect.openvpn">
      <title>OpenVPN</title>
      <indexterm><primary>OpenVPN</primary></indexterm>
      <indexterm><primary>VPN</primary><secondary>OpenVPN</secondary></indexterm>
      <indexterm><primary>network</primary><secondary><literal>tun</literal> interface</secondary></indexterm>
      <indexterm><primary>network</primary><secondary><literal>tap</literal> interface</secondary></indexterm>

      <para>OpenVPN is a piece of software dedicated to creating virtual
      private networks. Its setup involves creating virtual network
      interfaces on the VPN server and on the client(s); both
      <literal>tun</literal> (for IP-level tunnels) and
      <literal>tap</literal> (for Ethernet-level tunnels) interfaces are
      supported. In practice, <literal>tun</literal> interfaces will most
      often be used except when the VPN clients are meant to be integrated
      into the server's local network by way of an Ethernet bridge.</para>

      <para>OpenVPN relies on OpenSSL for all the SSL/TLS cryptography and
      associated features (confidentiality, authentication, integrity,
      non-repudiation). It can be configured either with a shared private
      key or using X.509 certificates based on a public key infrastructure.
      The latter configuration is strongly preferred since it allows
      greater flexibility when faced with a growing number of roaming users
      accessing the VPN.</para>

      <section>
        <title>Configuring the OpenVPN Server</title>
        <indexterm><primary>OpenVPN</primary><secondary>server</secondary></indexterm>

        <para>After all certificates have been created
        (follow the instructions from <xref linkend="sect.easy-rsa"/>),
        they need to be copied where appropriate: the root certificate's
        public key (<filename>pki/ca.crt</filename>) will be stored on
        all machines (both server and clients) as
        <filename>/etc/ssl/certs/Falcot_CA.crt</filename>. The server's
        certificate is installed only on the server
        (<filename>pki/issued/vpn.falcot.com.crt</filename> goes to
        <filename>/etc/ssl/certs/vpn.falcot.com.crt</filename>, and
        <filename>pki/private/vpn.falcot.com.key</filename> goes to
        <filename>/etc/ssl/private/vpn.falcot.com.key</filename> with
        restricted permissions so that only the administrator can read it),
        with the corresponding Diffie-Hellman parameters
        (<filename>pki/dh.pem</filename>) installed to
        <filename>/etc/openvpn/dh.pem</filename>. Client certificates
        are installed on the corresponding VPN client in a similar
        fashion.</para>

        <indexterm><primary><filename>/etc</filename></primary><secondary>/etc/ssl/</secondary></indexterm>
        <indexterm><primary><filename>/etc</filename></primary><secondary>/etc/openvpn/dh.pem</secondary></indexterm>
        <indexterm><primary><filename>/etc</filename></primary><secondary>/etc/openvpn/*.conf</secondary></indexterm>

        <para>By default, the OpenVPN initialization script tries starting
        all virtual private networks defined in
        <filename>/etc/openvpn/*.conf</filename>. Setting up a VPN server
        is therefore a matter of storing a corresponding configuration file
        in this directory. A good starting point is
        <filename>/usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz</filename>,
        which leads to a rather standard server. Of course, some parameters
        need to be adapted: <literal>ca</literal>, <literal>cert</literal>,
        <literal>key</literal> and <literal>dh</literal> need to describe
        the selected locations (respectively,
        <literal>/etc/ssl/certs/Falcot_CA.crt</literal>,
        <literal>/etc/ssl/vpn.falcot.com.crt</literal>,
        <literal>/etc/ssl/private/vpn.falcot.com.key</literal> and
        <literal>/etc/openvpn/dh.pem</literal>). The <literal>server
        10.8.0.0 255.255.255.0</literal> directive defines the subnet to be
        used by the VPN; the server uses the first IP address in that range
        (<literal>10.8.0.1</literal>) and the rest of the addresses are
        allocated to clients.</para>

        <indexterm><primary><filename>/etc</filename></primary><secondary>/etc/network/interfaces</secondary></indexterm>
        <indexterm><primary>network</primary><secondary>virtual interface</secondary></indexterm>
        <indexterm><primary>OpenVPN</primary><secondary>network interface</secondary></indexterm>

        <para>With this configuration, starting OpenVPN creates the virtual
        network interface, usually under the <literal>tun0</literal> name.
        However, firewalls are often configured at the same time as the
        real network interfaces, which happens before OpenVPN starts. Good
        practice therefore recommends creating a persistent virtual network
        interface, and configuring OpenVPN to use this pre-existing
        interface. This further allows choosing the name for this
        interface. To this end, <command>openvpn --mktun --dev vpn
        --dev-type tun</command> creates a virtual network interface named
        <literal>vpn</literal> with type <literal>tun</literal>; this
        command can easily be integrated in the firewall configuration
        script, or in an <literal>up</literal> directive of the
        <filename>/etc/network/interfaces</filename> file, or a
        <emphasis role="package">udev</emphasis> rule can be added to that
        end. The OpenVPN configuration file must also be updated
        accordingly, with the <literal>dev vpn</literal> and
        <literal>dev-type tun</literal> directives.</para>

        <indexterm><primary>OpenVPN</primary><secondary>push route</secondary></indexterm>

        <para>Barring further action, VPN clients can only access the VPN
        server itself by way of the <literal>10.8.0.1</literal> address.
        Granting the clients access to the local network (192.168.0.0/24),
        requires adding a <literal>push route 192.168.0.0
        255.255.255.0</literal> directive to the OpenVPN configuration so
        that VPN clients automatically get a network route telling them
        that this network is reachable by way of the VPN. Furthermore,
        machines on the local network also need to be informed that the
        route to the VPN goes through the VPN server (this automatically
        works when the VPN server is installed on the gateway).
        Alternatively, the VPN server can be configured to perform IP
        masquerading so that connections coming from VPN clients appear as
        if they are coming from the VPN server instead (see <xref
        linkend="sect.gateway"/>).</para>
      </section>
      <section>
        <title>Configuring the OpenVPN Client</title>
        <indexterm><primary>OpenVPN</primary><secondary>client</secondary></indexterm>
        <indexterm><primary><filename>/etc</filename></primary><secondary>/etc/openvpn/*.conf</secondary></indexterm>

        <para>Setting up an OpenVPN client also requires creating a
        configuration file in <filename>/etc/openvpn/</filename>. A
        standard configuration can be obtained by using
        <filename>/usr/share/doc/openvpn/examples/sample-config-files/client.conf</filename>
        as a starting point. The <literal>remote vpn.falcot.com
        1194</literal> directive describes the address and port of the
        OpenVPN server; the <literal>ca</literal>, <literal>cert</literal>
        and <literal>key</literal> also need to be adapted to describe the
        locations of the key files.</para>

        <indexterm><primary>OpenVPN</primary><secondary><literal>AUTOSTART</literal></secondary></indexterm>
        <indexterm><primary><filename>/etc</filename></primary><secondary>/etc/default/openvpn</secondary></indexterm>
        <indexterm><primary>service</primary><secondary><filename>openvpn@.service</filename></secondary></indexterm>

        <para>If the VPN should not be started automatically on boot, set
        the <literal>AUTOSTART</literal> directive to
        <literal>none</literal> in the
        <filename>/etc/default/openvpn</filename> file. Starting or
        stopping a given VPN connection is always possible with the
        commands <command>systemctl start openvpn@<replaceable>name</replaceable></command> and
        <command>systemctl stop openvpn@<replaceable>name</replaceable></command> (where the connection
        <replaceable>name</replaceable> matches the one defined in
        <filename>/etc/openvpn/<replaceable>name</replaceable>.conf</filename>).</para>

        <indexterm><primary>OpenVPN</primary><secondary><emphasis role="pkg">network-manager-openvpn-gnome</emphasis></secondary></indexterm>

        <para>The <emphasis
        role="pkg">network-manager-openvpn-gnome</emphasis> package
        contains an extension to Network Manager (see <xref
        linkend="sect.roaming-network-config"/>) that allows managing
        OpenVPN virtual private networks. This allows every user to
        configure OpenVPN connections graphically and to control them from
        the network management icon.</para>
        <indexterm><primary><emphasis role="pkg">network-manager-openvpn-gnome</emphasis></primary></indexterm>
      </section>
    </section>
    <section id="sect.ssh-vpn">
      <title>Virtual Private Network with SSH</title>
      <indexterm><primary>SSH</primary><secondary>VPN</secondary></indexterm>
      <indexterm><primary>PPP</primary></indexterm>

      <para>There are actually two ways of creating a virtual private
      network with SSH. The historic one involves establishing a PPP layer
      over the SSH link. This method is described in a HOWTO document:
      <ulink type="block" url="https://www.tldp.org/HOWTO/ppp-ssh/"/></para>

      <indexterm><primary>network</primary><secondary><literal>tun</literal> interface</secondary></indexterm>
      <indexterm><primary>SSH</primary><secondary><literal>PermitTunnel</literal></secondary></indexterm>
      <indexterm><primary><filename>/etc</filename></primary><secondary><filename>/etc/ssh/sshd_config</filename></secondary></indexterm>

      <para>The second method is more recent, and was introduced with
      OpenSSH 4.3; it is now possible for OpenSSH to create virtual
      network interfaces (<literal>tun*</literal>) on both sides of an SSH
      connection, and these virtual interfaces can be configured exactly as
      if they were physical interfaces. The tunneling system must first be
      enabled by setting <literal>PermitTunnel</literal> to “yes” in
      the SSH server configuration file
      (<filename>/etc/ssh/sshd_config</filename>). When establishing the
      SSH connection, the creation of a tunnel must be explicitly requested
      with the <literal>-w any:any</literal> option (<literal>any</literal>
      can be replaced with the desired <literal>tun</literal> device
      number). This requires the user to have administrator privilege on
      both sides, so as to be able to create the network device (in other
      words, the connection must be established as root).</para>

      <para>Both methods for creating a virtual private network over SSH
      are quite straightforward. However, the VPN they provide is not the
      most efficient available; in particular, it does not handle high
      levels of traffic very well.</para>

      <para>The explanation is that when a TCP/IP stack is encapsulated
      within a TCP/IP connection (for SSH), the TCP protocol is used twice,
      once for the SSH connection and once within the tunnel. This
      leads to problems, especially due to the way TCP adapts to network
      conditions by altering timeout delays. The following site describes
      the problem in more detail: <ulink type="block"
      url="http://sites.inka.de/sites/bigred/devel/tcp-tcp.html"/></para>
      <para>VPNs over SSH should therefore be restricted to one-off tunnels
      with no performance constraints.</para>
    </section>
    <section id="sect.ipsec">
      <title>IPsec</title>
      <indexterm><primary>IPsec</primary></indexterm>
      <indexterm><primary>Internet Protocol Security</primary><see>IPsec</see></indexterm>
      <indexterm><primary><command>libreswan</command></primary></indexterm>
      <indexterm><primary><command>strongswan</command></primary></indexterm>

      <para>IPsec, despite being the standard in IP VPNs, is rather more
      involved in its implementation. The IPsec engine itself is integrated
      in the Linux kernel; the required user-space parts, the control and
      configuration tools, are provided by the <emphasis
      role="pkg">libreswan</emphasis> package or the
      <emphasis role="pkg">strongswan</emphasis> package. Here we describe
      briefly the first of these options.</para>

      <indexterm><primary><filename>/etc</filename></primary><secondary><filename>/etc/ipsec.conf</filename></secondary></indexterm>
      <indexterm><primary>IPsec</primary><secondary>tunnel</secondary></indexterm>

      <para>First, we install the <emphasis role="pkg">libreswan</emphasis>
      package. In concrete terms, each host's
      <filename>/etc/ipsec.conf</filename> contains the parameters for
      <emphasis>IPsec tunnels</emphasis> (or
      <emphasis>Security Associations</emphasis>, in the IPsec terminology)
      that the host is concerned with. There are many configuration examples
      in <filename>/usr/share/doc/libreswan/</filename>, but Libreswan's online
      documentation has more examples with explanations:
      <ulink type="block" url="https://libreswan.org/wiki/"/></para>

      <indexterm><primary>service</primary><secondary><filename>ipsec.service</filename></secondary></indexterm>

      <para>The IPsec service can be controlled with <command>systemctl</command>;
      for example, <command>systemctl start ipsec</command> will start the
      IPsec service.</para>

      <indexterm><primary>IKE</primary></indexterm>
      <indexterm><primary>IPsec Key Exchange</primary><see>IKE</see></indexterm>
      <indexterm><primary>IPsec</primary><secondary>IPsec Key Exchange</secondary><seealso>IKE</seealso></indexterm>
      <indexterm><primary>key pair</primary></indexterm>
      <indexterm><primary><command>setkey</command></primary></indexterm>

      <para>In spite of its status as the reference, the complexity of
      setting up IPsec restricts its usage in practice. OpenVPN-based
      solutions will generally be preferred when the required tunnels are
      neither too many nor too dynamic.</para>

      <sidebar>
        <title><emphasis>CAUTION</emphasis> IPsec and NAT</title>
        <indexterm><primary>NAT</primary></indexterm>
        <indexterm><primary>NAT-T</primary></indexterm>
        <indexterm><primary>NAT Traversal</primary><seealso>NAT-T</seealso></indexterm>

        <para>NATing firewalls and IPsec do not work well together: since
        IPsec signs the packets, any change on these packets that the
        firewall might perform will void the signature, and the packets
        will be rejected at their destination. Various IPsec
        implementations now include the <emphasis>NAT-T</emphasis>
        technique (for <emphasis>NAT Traversal</emphasis>), which basically
        encapsulates the IPsec packet within a standard UDP packet.</para>
      </sidebar>

      <sidebar>
        <title><emphasis>SECURITY</emphasis> IPsec and firewalls</title>
        <indexterm><primary>ESP, protocol</primary></indexterm>
        <indexterm><primary>AH, protocol</primary></indexterm>
        <indexterm><primary>protocol</primary><secondary>AH</secondary></indexterm>
        <indexterm><primary>protocol</primary><secondary>ESP</secondary></indexterm>

        <para>The standard mode of operation of IPsec involves data
        exchanges on UDP port 500 for key exchanges (also on UDP
        port 4500 in the case that NAT-T is in use). Moreover, IPsec packets use
        two dedicated IP protocols that the firewall must let through;
        reception of these packets is based on their protocol numbers, 50
        (ESP) and 51 (AH).</para>
      </sidebar>
    </section>
    <section id="sect.pptp">
      <title>PPTP</title>
      <indexterm><primary>PPTP</primary></indexterm>
      <indexterm><primary>GRE, protocol</primary></indexterm>
      <indexterm><primary>protocol</primary><secondary>GRE</secondary></indexterm>

      <para>PPTP (for <emphasis>Point-to-Point Tunneling
      Protocol</emphasis>) uses two communication channels, one for control
      data and one for payload data; the latter uses the GRE protocol
      (<emphasis>Generic Routing Encapsulation</emphasis>). A standard PPP
      link is then set up over the data exchange channel.</para>

      <section id="sect.pptp-config-client">
        <title>Configuring the Client</title>
        <indexterm><primary>PPTP</primary><secondary>Client</secondary></indexterm>
        <indexterm><primary><emphasis role="pkg">pptp-linux</emphasis></primary></indexterm>

        <para>The <emphasis role="pkg">pptp-linux</emphasis> package
        contains an easily-configured PPTP client for Linux. The following
        instructions take their inspiration from the official
        documentation: <ulink type="block"
        url="http://pptpclient.sourceforge.net/howto-debian.phtml"/></para>

        <indexterm><primary><filename>/etc</filename></primary><secondary><filename>/etc/ppp/</filename></secondary></indexterm>        
        <para>The Falcot administrators created several files:
        <filename>/etc/ppp/options.pptp</filename>,
        <filename>/etc/ppp/peers/falcot</filename>,
        <filename>/etc/ppp/ip-up.d/falcot</filename>, and
        <filename>/etc/ppp/ip-down.d/falcot</filename>.</para>

        <example id="example.ppp-options.pptp">
          <title>The <filename>/etc/ppp/options.pptp</filename> file</title>

          <programlisting>
# PPP options used for a PPTP connection
lock
noauth
nobsdcomp
nodeflate
</programlisting>
        </example>

        <example id="example.ppp-peers-falcot">
          <title>The <filename>/etc/ppp/peers/falcot</filename> file</title>

          <programlisting>
# vpn.falcot.com is the PPTP server
pty "pptp vpn.falcot.com --nolaunchpppd"
# the connection will identify as the "vpn" user
user vpn
remotename pptp
# encryption is needed
require-mppe-128
file /etc/ppp/options.pptp
ipparam falcot
</programlisting>
        </example>

        <example id="example.ppp-ip-up.d-falcot">
          <title>The <filename>/etc/ppp/ip-up.d/falcot</filename> file</title>

          <programlisting>
# Create the route to the Falcot network
if [ "$6" = "falcot" ]; then
  # 192.168.0.0/24 is the (remote) Falcot network
  ip route add 192.168.0.0/24 dev $1
fi
</programlisting>
        </example>

        <example id="example.ppp-ip-down.d-falcot">
          <title>The <filename>/etc/ppp/ip-down.d/falcot</filename> file</title>

          <programlisting>
# Delete the route to the Falcot network
if [ "$6" = "falcot" ]; then
  # 192.168.0.0/24 is the (remote) Falcot network
  ip route del 192.168.0.0/24 dev $1
fi
</programlisting>
        </example>

        <sidebar>
          <title><emphasis>SECURITY</emphasis> MPPE</title>
          <indexterm><primary>MPPE</primary></indexterm>
          <indexterm><primary>Microsoft</primary><secondary>Point-to-Point Encryption</secondary><see>MPPE</see></indexterm>

          <para>Securing PPTP involves using the MPPE feature
          (<emphasis>Microsoft Point-to-Point Encryption</emphasis>), which
          is available in official Debian kernels as a module.</para>
        </sidebar>
      </section>
      <section id="sect.pptp-config-serveur">
        <title>Configuring the Server</title>
        <indexterm><primary><command>pptpd</command></primary></indexterm>

        <sidebar>
          <title><emphasis>CAUTION</emphasis> PPTP and firewalls</title>

          <para>Intermediate firewalls need to be configured to let through
          IP packets using protocol 47 (GRE). Moreover, the PPTP server's
          port 1723 needs to be open so that the communication channel can
          happen.</para>
        </sidebar>

        <indexterm><primary><filename>/etc</filename></primary><secondary><filename>/etc/pptpd.conf</filename></secondary></indexterm>
        <para><command>pptpd</command> is the PPTP server for Linux. Its
        main configuration file, <filename>/etc/pptpd.conf</filename>,
        requires very few changes: <emphasis>localip</emphasis> (local IP
        address) and <emphasis>remoteip</emphasis> (remote IP address). In
        the example below, the PPTP server always uses the
        <literal>192.168.0.199</literal> address, and PPTP clients receive
        IP addresses from <literal>192.168.0.200</literal> to
        <literal>192.168.0.250</literal>.</para>

        <example id="example.pptpd.conf">
          <title>The <filename>/etc/pptpd.conf</filename> file</title>

          <programlisting>
[..]
# TAG: localip
# TAG: remoteip
#       Specifies the local and remote IP address ranges.
#
#       These options are ignored if delegate option is set.
#
#       Any addresses work as long as the local machine takes care of the
#       routing.  But if you want to use MS-Windows networking, you should
#       use IP addresses out of the LAN address space and use the proxyarp
#       option in the pppd options file, or run bcrelay.
#
#       You can specify single IP addresses seperated by commas or you can
#       specify ranges, or both. For example:
#
#               192.168.0.234,192.168.0.245-249,192.168.0.254
#
#       IMPORTANT RESTRICTIONS:
#
#       1. No spaces are permitted between commas or within addresses.
#
#       2. If you give more IP addresses than the value of connections,
#          it will start at the beginning of the list and go until it
#          gets connections IPs.  Others will be ignored.
#
#       3. No shortcuts in ranges! ie. 234-8 does not mean 234 to 238,
#          you must type 234-238 if you mean this.
#
#       4. If you give a single localIP, that's ok - all local IPs will
#          be set to the given one. You MUST still give at least one remote
#          IP for each simultaneous client.
#
# (Recommended)
#localip 192.168.0.1
#remoteip 192.168.0.234-238,192.168.0.245
# or
#localip 192.168.0.234-238,192.168.0.245
#remoteip 192.168.1.234-238,192.168.1.245
localip 192.168.0.199
remoteip 192.168.0.200-250
</programlisting>
        </example>

        <indexterm><primary><filename>/etc</filename></primary><secondary><filename>/etc/ppp/pptpd-options</filename></secondary></indexterm>

        <para>The PPP configuration used by the PPTP server also requires a
        few changes in <filename>/etc/ppp/pptpd-options</filename>. The
        important parameters are the server name (<literal>pptp</literal>),
        the domain name (<literal>falcot.com</literal>), and the IP
        addresses for DNS and WINS servers.</para>

        <example id="example.ppp-pptpd-options">
          <title>The <filename>/etc/ppp/pptpd-options</filename> file</title>

          <programlisting>
# Enable connection debugging facilities.
# (see your syslog configuration for where pppd sends to)
#debug

# Name of the local system for authentication purposes
# (must match the second field in /etc/ppp/chap-secrets entries)
name pptpd

# Optional: domain name to use for authentication
## change the domainname to your local domain
domain falcot.com

# Authentication
## these are reasonable defaults for WinXXXX clients
## for the security related settings
auth
refuse-pap
refuse-chap
refuse-mschap
# Require the peer to authenticate itself using MS-CHAPv2 [Microsoft
# Challenge Handshake Authentication Protocol, Version 2] authentication.
require-mschap-v2
# Require MPPE 128-bit encryption
# (note that MPPE requires the use of MSCHAP-V2 during authentication)
require-mppe-128

# Network and Routing
## Fill in your addresses
ms-dns 192.168.0.1
ms-wins 192.168.0.1

## Fill in your netmask
netmask 255.255.255.0

## some defaults
nodefaultroute
proxyarp
lock
</programlisting>
        </example>

        <indexterm><primary><filename>/etc</filename></primary><secondary><filename>/etc/ppp/chap-secrets</filename></secondary></indexterm>

        <para>The last step involves registering the <literal>vpn</literal>
        user (and the associated password) in the
        <filename>/etc/ppp/chap-secrets</filename> file. Contrary to other
        instances where an asterisk (<literal>*</literal>) would work, the
        server name must be filled explicitly here. Furthermore, Windows
        PPTP clients identify themselves under the
        <literal><replaceable>DOMAIN</replaceable>\\<replaceable>USER</replaceable></literal>
        form, instead of only providing a user name. This explains why the
        file also mentions the <literal>FALCOT\\vpn</literal> user. It is
        also possible to specify individual IP addresses for users; an
        asterisk in this field specifies that dynamic addressing should be
        used.</para>

        <example id="example.ppp-chap-secrets">
          <title>The <filename>/etc/ppp/chap-secrets</filename> file</title>

          <programlisting>
# Secrets for authentication using CHAP
# client        server  secret      IP addresses
vpn             pptp    f@Lc3au     *
FALCOT\\vpn     pptp    f@Lc3au     *
</programlisting>
        </example>

        <sidebar>
          <title><emphasis>SECURITY</emphasis> PPTP vulnerabilities</title>
          <indexterm><primary>PPTP</primary><secondary>vulnerabilities</secondary></indexterm>

          <para>Microsoft's first PPTP implementation drew severe criticism
          because it had many security vulnerabilities; most have since
          then been fixed in more recent versions. The configuration
          documented in this section uses the latest version of the
          protocol. Be aware though that removing some options (such as
          <literal>require-mppe-128</literal> and
          <literal>require-mschap-v2</literal>) would make the service
          vulnerable again.</para>
        </sidebar>
      </section>
    </section>
  </section>
  <section id="sect.quality-of-service">
    <title>Quality of Service</title>
    <section id="sect.qos-principe">
      <title>Principle and Mechanism</title>
      <indexterm><primary>network</primary><secondary>QoS</secondary></indexterm>
      <indexterm><primary>QoS</primary></indexterm>
      <indexterm><primary>Quality of Service</primary><see>QoS</see></indexterm>
      <indexterm><primary>quality</primary><secondary>of service</secondary><see>QoS</see></indexterm>
      <indexterm><primary>service</primary><secondary>quality</secondary><see>QoS</see></indexterm>

      <para><emphasis>Quality of Service</emphasis> (or
      <emphasis>QoS</emphasis> for short) refers to a set of techniques
      that guarantee or improve the quality of the service provided to
      applications. The most popular such technique involves classifying
      the network traffic into categories, and differentiating the handling
      of traffic according to which category it belongs to. The main
      application of this differentiated services concept is
      <emphasis>traffic shaping</emphasis>, which limits the data
      transmission rates for connections related to some services and/or
      hosts so as not to saturate the available bandwidth and starve
      important other services. Traffic shaping is a particularly good fit
      for TCP traffic, since this protocol automatically adapts to
      available bandwidth.</para>

      <sidebar>
        <title><emphasis>CULTURE</emphasis> Net neutrality and QoS</title>
        <indexterm><primary>network</primary><secondary>neutrality</secondary></indexterm>

        <para>Network neutrality is achieved when Internet service providers treat all Internet
        communications equally, that is, without any access limitation based on content, user,
        website, destination address, etc.</para>

        <para>Quality of service can be implemented in a net neutral Internet, but only
        if Internet service providers can't charge a special fee for a higher-quality
        service.</para>
      </sidebar>

      <para>It is also possible to alter the priorities on traffic, which
      allows prioritizing packets related to interactive services (such as
      <command>ssh</command> and <command>telnet</command>) or to services
      that only deal with small blocks of data.</para>

      <para>The Debian kernels include the features required for QoS along
      with their associated modules. These modules are many, and each of
      them provides a different service, most notably by way of special
      schedulers for the queues of IP packets; the wide range of available
      scheduler behaviors spans the whole range of possible
      requirements.</para>

      <sidebar>
        <title><emphasis>CULTURE</emphasis> LARTC — <emphasis>Linux Advanced Routing &amp; Traffic Control</emphasis></title>
        <indexterm><primary>network</primary><secondary>advanced routing</secondary><seealso>routing</seealso></indexterm>
        <indexterm><primary>routing</primary><secondary>advanced</secondary></indexterm>
        <indexterm><primary>traffic</primary><secondary>control</secondary></indexterm>
        <indexterm><primary>control of traffic</primary></indexterm>

        <para>The <emphasis>Linux Advanced Routing &amp; Traffic
        Control</emphasis> HOWTO is the reference document covering
        everything there is to know about network quality of service.
        <ulink type="block" url="https://www.lartc.org/howto/"/></para>
      </sidebar>
    </section>
    <section id="sect.qos-config">
      <title>Configuring and Implementing</title>
      <indexterm><primary><emphasis>iproute</emphasis></primary></indexterm>
      <indexterm><primary><command>tc</command></primary></indexterm>

      <para>QoS parameters are set through the <command>tc</command>
      command (provided by the <emphasis role="pkg">iproute</emphasis>
      package). Since its interface is quite complex, using higher-level
      tools is recommended.</para>

      <section id="sect.qos-wondershaper">
        <title>Reducing Latencies: <command>wondershaper</command></title>
        <indexterm><primary><command>wondershaper</command></primary></indexterm>
        <indexterm><primary>limitation of traffic</primary></indexterm>
        <indexterm><primary>traffic</primary><secondary>limitation</secondary></indexterm>

        <para>The main purpose of <command>wondershaper</command> (in the
        similarly-named package) is to minimize latencies independent of
        network load. This is achieved by limiting total traffic to a value
        that falls just short of the link saturation value.</para>

        <para>Once a network interface is configured, setting up this
        traffic limitation is achieved by running <command>wondershaper
        <replaceable>interface</replaceable>
        <replaceable>download_rate</replaceable>
        <replaceable>upload_rate</replaceable></command>. The interface can
        be <literal>enp1s0</literal>, <literal>eth0</literal> or <literal>ppp0</literal> for example,
        and both rates are expressed in kilobits per second. The
        <command>wondershaper remove
        <replaceable>interface</replaceable></command> command disables
        traffic control on the specified interface.</para>

        <indexterm><primary><filename>/etc</filename></primary><secondary><filename>/etc/network/interfaces</filename></secondary></indexterm>

        <para>For an Ethernet connection, historically this script would be
        called right after the interface is configured. This is done by adding
        <literal>up</literal> and <literal>down</literal> directives to the
        <filename>/etc/network/interfaces</filename> file allowing declared
        commands to be run, respectively, after the interface is configured and
        before it is deconfigured. Or in the PPP case, creating a script that
        calls <command>wondershaper</command> in
        <filename>/etc/ppp/ip-up.d/</filename> will enable traffic control as
        soon as the connection is up. Below is an example using this first
        method:</para>

        <example id="example.network-interfaces">
          <title>Changes in the <filename>/etc/network/interfaces</filename> file</title>

          <programlisting>
iface eth0 inet dhcp
    up /sbin/wondershaper eth0 500 100
    down /sbin/wondershaper remove eth0
</programlisting>
        </example>

        <sidebar>
          <title><emphasis>GOING FURTHER</emphasis> Optimal configuration</title>

          <para>The
          <filename>/usr/share/doc/wondershaper/README.Debian.gz</filename>
          file describes, in some detail, the configuration method
          recommended by the package maintainer. In particular, it advises
          measuring the download and upload speeds so as to best evaluate
          real limits.</para>
        </sidebar>
      </section>
      <section id="sect.qos-config-standard">
        <title>Standard Configuration</title>
        <indexterm><primary>DSCP</primary></indexterm>
        <indexterm><primary>Differentiated Services Code Point</primary><see>DSCP</see></indexterm>

        <para>Barring a specific QoS configuration, the Linux kernel uses
        the <literal>pfifo_fast</literal> queue scheduler, which provides a
        few interesting features by itself. The priority of each processed
        IP packet is based on the DSCP field (<emphasis>Differentiated
        Services Code Point</emphasis>) of this packet; modifying this
        6-bit field is enough to take advantage of the scheduling features.
        Refer to
        <ulink url="https://en.wikipedia.org/wiki/Differentiated_services#Class_Selector"/>
        for more information.</para>

        <indexterm><primary>IP</primary><secondary>netfilter</secondary></indexterm>

        <para>The DSCP field can be set by applications that generate IP
        packets, or modified on the fly by <emphasis>netfilter</emphasis>.
        The following rules are sufficient to increase responsiveness for a
        server's SSH service, note that the DSCP field must be set in
        hexadecimal:</para>

        <programlisting role="scale">
nft add table ip mangle
nft add rule ip mangle PREROUTING tcp sport 22 counter ip dscp set 0x04
nft add rule ip mangle PREROUTING tcp dport 22 counter ip dscp set 0x04
</programlisting>
      </section>
    </section>
  </section>
  <section id="sect.dynamic-routing">
    <title>Dynamic Routing</title>
    <indexterm><primary>routing</primary><secondary>dynamic</secondary><seealso><command>frr</command></seealso></indexterm>
    <indexterm><primary><command>frr</command></primary></indexterm>
    <indexterm><primary><command>quagga</command></primary><see><command>frr</command></see></indexterm>
    <indexterm><primary><command>zebra</command></primary><see><command>frr</command></see></indexterm>

    <!-- MAY CHANGE: reference package has changed quite some times -->
    <para>The reference tool for dynamic routing is currently
    <command>frr</command> from the similarly-named package; it used to be
    <command>quagga</command>, and before that <command>zebra</command> until
    development of these stopped.  However, <command>frr</command> kept the
    names of the programs for compatibility reasons which explains the
    <command>zebra</command> commands below.</para>

    <sidebar>
      <title><emphasis>BACK TO BASICS</emphasis> Dynamic routing</title>

      <para>Dynamic routing allows routers to adjust, in real time, the
      paths used for transmitting IP packets. Each protocol involves its
      own method of defining routes (shortest path, use routes advertised
      by peers, and so on).</para>

      <indexterm><primary><command>ip</command></primary><secondary><literal>route</literal></secondary></indexterm>
      <indexterm><primary><command>route</command></primary></indexterm>

      <para>In the Linux kernel, a route links a network device to a set of
      machines that can be reached through this device. The
      <command>ip</command> command, when <literal>route</literal> is used
      as the first argument, defines new routes and displays existing ones.
      The <command>route</command> command was used for that purpose, but
      it is deprecated in favor of <command>ip</command>.</para>
    </sidebar>

    <para>FRR (FRRouting) is a set of daemons cooperating to define the routing
    tables to be used by the Linux kernel; each routing protocol (most notably
    BGP, OSPF and RIP) provides its own daemon(s). The <literal>zebra</literal>
    and <literal>staticd</literal> daemons, which are always started, collect
    information from other daemons and handle static routing tables
    accordingly. The other daemons are known as <command>bgpd</command>,
    <command>ospfd</command>, <command>ospf6d</command>,
    <command>ripd</command>, <command>ripngd</command>,
    <command>isisd</command>, etc.</para>

    <indexterm><primary>OSPF</primary></indexterm>
    <indexterm><primary>BGP</primary></indexterm>
    <indexterm><primary>RIP</primary></indexterm>
    <indexterm><primary>IS-IS</primary></indexterm>
    <indexterm><primary><command>bgpd</command></primary></indexterm>
    <indexterm><primary><command>ospfd</command></primary></indexterm>
    <indexterm><primary><command>ospf6d</command></primary></indexterm>
    <indexterm><primary><command>ripd</command></primary></indexterm>
    <indexterm><primary><command>ripngd</command></primary></indexterm>
    <indexterm><primary><command>isisd</command></primary></indexterm>

    <indexterm><primary>service</primary><secondary><filename>frr.service</filename></secondary></indexterm>

    <para>Daemons are enabled by creating the
    <filename>/etc/frr/<replaceable>daemon</replaceable>.conf</filename> config
    file, <replaceable>daemon</replaceable> being the name of the daemon to
    use, and editing the <filename>/etc/frr/daemon</filename> configuration
    file. The daemon config file must belong to the <literal>frr</literal>
    user and group with permissions of <literal>0640</literal> in order for the
    <filename>/etc/init.d/frr</filename> script or the
    <filename>frr.service</filename> systemd service file to invoke the daemon.
    The package <emphasis role="pkg">frr</emphasis> provides configuration
    examples under <filename>/usr/share/doc/frr/examples/</filename>.</para>

    <para>The configuration of each of these daemons requires knowledge of the
    routing protocol in question. These protocols cannot be described in detail
    here, but <emphasis role="pkg">frr-doc</emphasis> provides ample
    explanation in the form of both <command>info</command> and HTML files. The
    same contents may be more browsed on the project's website: <ulink
    type="block" url="http://docs.frrouting.org/en/latest/"/> </para>

    <para>In addition, the
    syntax is very close to a standard router's configuration interface,
    and network administrators will adapt quickly to
    <command>frr</command>.</para>

    <sidebar>
      <title><emphasis>IN PRACTICE</emphasis> OSPF, BGP or RIP?</title>
      <indexterm><primary>OSPF</primary></indexterm>
      <indexterm><primary>BGP</primary></indexterm>
      <indexterm><primary>RIP</primary></indexterm>
      <indexterm><primary>protocol</primary><secondary>BGP</secondary></indexterm>
      <indexterm><primary>protocol</primary><secondary>RIP</secondary></indexterm>

      <para><acronym>OSPF</acronym> (Open Shortest Path First) is
      generally the best protocol to use for dynamic routing
      on private networks, but <acronym>BGP</acronym> (Border Gateway
      Protocol) is more common for Internet-wide
      routing. <acronym>RIP</acronym> (Routing Information Protocol)
      is rather ancient, and hardly used anymore.</para>
    </sidebar>
  </section>
  <section id="sect.ipv6">
    <title>IPv6</title>
    <indexterm><primary>IP</primary><secondary>v4</secondary><seealso>IPv4</seealso></indexterm>
    <indexterm><primary>IP</primary><secondary>v6</secondary><seealso>IPv6</seealso></indexterm>
    <indexterm><primary>IPv4</primary></indexterm>
    <indexterm><primary>IPv6</primary></indexterm>
    <indexterm><primary><emphasis role="pkg">iputils-ping</emphasis></primary></indexterm>
    <indexterm><primary><emphasis role="pkg">iputils-tracepath</emphasis></primary></indexterm>

    <para>IPv6, successor to IPv4, is a newer version of the IP protocol
    designed to fix its flaws, most notably the scarcity of available IP
    addresses. This protocol handles the network layer; its purpose is to
    provide a way to address machines, to convey data to their intended
    destination, and to handle data fragmentation if needed (in other
    words, to split packets into chunks with a size that depends on the
    network links to be used on the path and to reassemble the chunks in
    their proper order on arrival).</para>

    <para>Debian kernels include IPv6 handling in the core kernel (with
    the exception of some architectures that have it compiled as a module
    named <literal>ipv6</literal>). Basic tools such as <command>ping</command> and
    <command>traceroute</command> have their IPv6 equivalents in
    <command>ping6</command> and <command>traceroute6</command>, available
    respectively in the <emphasis role="pkg">iputils-ping</emphasis> and
    <emphasis role="pkg">iputils-tracepath</emphasis> packages.</para>

    <indexterm><primary><filename>/etc</filename></primary><secondary><filename>/etc/network/interfaces</filename></secondary></indexterm>

    <para>The IPv6 network is configured similarly to IPv4, in
    <filename>/etc/network/interfaces</filename>. But if you want that
    network to be globally available, you must ensure that you have an
    IPv6-capable router relaying traffic to the global IPv6 network.</para>

    <example id="example.network-interfaces-ipv6">
      <title>Example of IPv6 configuration</title>

      <programlisting>
iface enp7s0 inet6 static
    address 2001:db8:1234:5::1:1/64
    # Disabling auto-configuration
    # autoconf 0
    # The router is auto-configured and has no fixed address
    # (accept_ra 1). If it had:
    # gateway 2001:db8:1234:5::1
</programlisting>
    </example>

    <indexterm><primary>SLAAC</primary></indexterm>
    <indexterm><primary>Stateless Address Autoconfiguration</primary><see>SLAAC</see></indexterm>

    <para>IPv6 subnets usually have a netmask of 64 bits. This means that
    2<superscript>64</superscript> distinct addresses exist within the
    subnet. This allows Stateless Address Autoconfiguration
    (<acronym>SLAAC</acronym>) to pick an address based on the
    network interface's MAC address. By default, if <acronym>SLAAC</acronym>
    is activated in your network and IPv6 on your computer, the kernel will
    automatically find IPv6 routers and configure the network
    interfaces.</para>

    <indexterm><primary>MAC</primary></indexterm>
    <indexterm><primary>IPv6</primary><secondary>privacy extensions</secondary></indexterm>

    <para>This behavior may have privacy implications. If you switch networks
    frequently, e.g. with a laptop, you might not want your
    <acronym>MAC</acronym> address being a part of your public IPv6 address.
    This makes it easy to identify the same device across networks. A solution
    to this are IPv6 privacy extensions (which Debian enables by default if
    IPv6 connectivity is detected during initial installation), which will
    assign an additional randomly generated address to the interface,
    periodically change them and prefer them for outgoing connections.
    Incoming connections can still use the address generated by SLAAC.  The
    following example, for use in <filename>/etc/network/interfaces</filename>,
    activates these privacy extensions for the interface
    <replaceable>enp7s0</replaceable>.</para>

    <example id="example.network-interface-ipv6-privext">
      <title>IPv6 privacy extensions</title>

      <programlisting>
iface enp7s0 inet6 auto
    # Prefer the randomly assigned addresses for outgoing connections.
    privext 2
</programlisting>
    </example>

    <sidebar>
      <title><emphasis>TIP</emphasis> Programs built with IPv6</title>
      <indexterm><primary>mailing lists</primary><secondary><email>debian-ipv6@lists.debian.org</email></secondary></indexterm>

      <para>Many pieces of software need to be adapted to handle IPv6. Most
      of the packages in Debian have been adapted already, but
      not all. If your favorite package does not work with IPv6
      yet, you can ask for help on the <emphasis>debian-ipv6</emphasis>
      mailing-list. They might know about an IPv6-aware replacement
      and could file a bug to get the issue properly tracked.
      <ulink type="block" url="https://lists.debian.org/debian-ipv6/"/></para>
    </sidebar>

    <indexterm><primary>IPv6</primary><secondary>firewall</secondary></indexterm>
    <indexterm><primary>firewall</primary><secondary>IPv6</secondary></indexterm>
    <indexterm><primary><command>ip6tables</command></primary></indexterm>

    <para>IPv6 connections can be restricted, in the same fashion as for IPv4.
    <command>nft</command> can be used to create firewall rules for IPv4 and
    IPv6 (see <xref linkend="sect.nftables" />).</para>

    <section id="sect.ipv6-tunneling">
      <title>Tunneling</title>
      <indexterm><primary>IPv6</primary><secondary>tunneling</secondary></indexterm>

      <sidebar>
        <title><emphasis>CAUTION</emphasis> IPv6 tunneling and firewalls</title>
        <indexterm><primary>IPv6</primary><secondary>tunnel broker</secondary></indexterm>

        <para>IPv6 tunneling over IPv4 (as opposed to native IPv6) requires the
        firewall to accept the traffic, which uses IPv4 protocol number 41.</para>
      </sidebar>

      <para>If a native IPv6 connection is not available, the fallback method
      is to use a tunnel over IPv4. Hurricane Electric is one (free) provider of such
      tunnels: <ulink type="block" url="https://tunnelbroker.net"/></para>
      <indexterm><primary>Hurricane Electric</primary></indexterm>
      <indexterm><primary>tunnel broker</primary></indexterm>

      <para>To use a Hurricane Electric tunnel, you need to register an
      account, login, select a free tunnel and edit the file
      <filename>/etc/network/interfaces</filename> with the generated code.</para>

      <indexterm><primary><command>radvd</command></primary></indexterm>
      <indexterm><primary><filename>/etc</filename></primary><secondary><filename>/etc/radvd.conf</filename></secondary></indexterm>
      <indexterm><primary>service</primary><secondary><filename>radvd.service</filename></secondary></indexterm>

      <para>You can install and configure the
      <command>radvd</command> daemon (from the similarly-named package) if you
      want to use the configured computer as a router for a local network.
      This IPv6 configuration daemon has a role similar to
      <command>dhcpd</command> in the IPv4 world.</para>

      <indexterm><primary><command>ip</command></primary><secondary><literal>address</literal></secondary></indexterm>

      <para>The <filename>/etc/radvd.conf</filename> configuration file must
      then be created (see
      <filename>/usr/share/doc/radvd/examples/simple-radvd.conf</filename> as
      a starting point). In our case, the only required change is the prefix,
      which needs to be replaced with the one provided by Hurricane Electric; it can be
      found in the output of the <command>ip a</command> command, in the
      block concerning the <literal>he-ipv6</literal> interface.</para>

      <para>Then run <command>systemctl start radvd</command>. The IPv6
      network should now work.</para>
    </section>
  </section>
  <section id="sect.domain-name-servers">
    <title>Domain Name Servers (DNS)</title>
    <indexterm><primary>DNS</primary></indexterm>
    <indexterm><primary>Domain Name Service</primary><see>DNS</see></indexterm>
    <indexterm><primary>server</primary><secondary>name</secondary></indexterm>
    <indexterm><primary>IP</primary><secondary>address mapping</secondary></indexterm>

    <!-- MAY CHANGE: debian.org IP address -->
    <para>The <emphasis>Domain Name Service</emphasis> (DNS) is a fundamental
    component of the Internet: it maps host names to IP addresses (and
    vice-versa), which allows the use of <literal>www.debian.org</literal>
    instead of <literal>130.89.148.77</literal> or
    <literal>2001:67c:2564:a119::77</literal>.</para>

    <para>DNS records are organized in zones; each zone matches either a
    domain (or a subdomain) or an IP address range (since IP addresses
    are generally allocated in consecutive ranges). A primary server is
    authoritative on the contents of a zone; secondary servers, usually
    hosted on separate machines, provide regularly refreshed copies of
    the primary zone.</para>
    <indexterm><primary>zone</primary><secondary>DNS</secondary></indexterm>
    <indexterm><primary>DNS</primary><secondary>zone</secondary></indexterm>
    <indexterm><primary>DNS</primary><secondary>resource record</secondary></indexterm>

    <para>Each zone can contain records of various kinds
    (<emphasis>Resource Records</emphasis>), these are some of the most common:</para>
    <itemizedlist>
      <listitem>
        <para><literal>A</literal> (<emphasis>address record</emphasis>): IPv4
        address. This is the most common form to point a domain to an IPv4
        address.</para>
        <indexterm><primary>DNS</primary><secondary>resource record</secondary><tertiary><literal>A</literal></tertiary></indexterm>
      </listitem>
      <listitem>
        <para><literal>CNAME</literal> (<emphasis>canonical name
        record</emphasis>): alias</para>
        <indexterm><primary>DNS</primary><secondary>resource record</secondary><tertiary><literal>CNAME</literal></tertiary></indexterm>
      </listitem>
      <listitem>
        <para><literal>MX</literal> (<emphasis>mail exchange</emphasis>):
        an email server. This information is used by other email servers
        to find where to send email addressed to a given address. Each MX
        record has a priority. The highest-priority server (with the
        lowest number) is tried first (see sidebar <xref
        linkend="sidebar.smtp"/>); other servers are contacted in order
        of decreasing priority if the first one does not reply.</para>
        <indexterm><primary>DNS</primary><secondary>resource record</secondary><tertiary><literal>MX</literal></tertiary></indexterm>
      </listitem>
      <listitem>
        <para><literal>PTR</literal> (<emphasis>pointer</emphasis>): mapping of
        an IP address to a name.  Such a record is stored in a “reverse DNS”
        zone named after the IP address range. For example,
        <literal>1.168.192.in-addr.arpa</literal> is the zone containing the
        reverse mapping for all addresses in the
        <literal>192.168.1.0/24</literal> range.</para>
        <indexterm><primary>DNS</primary><secondary>resource record</secondary><tertiary><literal>PTR</literal></tertiary></indexterm>
      </listitem>
      <listitem>
        <para><literal>AAAA</literal> (<emphasis>IPv6 address
        record</emphasis>): IPv6 address.</para>
        <indexterm><primary>DNS</primary><secondary>resource record</secondary><tertiary><literal>AAAA</literal></tertiary></indexterm>
      </listitem>
      <listitem>
        <para><literal>NS</literal> (<emphasis>name server</emphasis>): maps a
        name to a name server. Each domain must have at least one NS record.
        These records point at a DNS server that can answer queries concerning
        this domain; they usually point at the primary and secondary servers
        for the domain. These records also allow DNS delegation; for instance,
        the <literal>falcot.com</literal> zone can include an NS record for
        <literal>internal.falcot.com</literal>, which means that the
        <literal>internal.falcot.com</literal> zone is handled by another
        server. Of course, this server must declare an
        <literal>internal.falcot.com</literal> zone.</para>
        <indexterm><primary>DNS</primary><secondary>resource record</secondary><tertiary><literal>NS</literal></tertiary></indexterm>
      </listitem>
    </itemizedlist>

    <section id="sect.dns-software">
      <title>DNS software</title>
      <indexterm><primary>ISC</primary></indexterm>
      <indexterm><primary>Internet Software Consortium</primary><see>ISC</see></indexterm>
      <indexterm><primary><emphasis role="pkg">bind9</emphasis></primary></indexterm>
      <indexterm><primary>DNS</primary><secondary><emphasis role="pkg">bind9</emphasis></secondary><seealso><command>bind</command></seealso></indexterm>

      <para>The reference name server, Bind, was developed and is
      maintained by ISC (the <emphasis>Internet Software
      Consortium</emphasis>). It is provided in Debian by the <emphasis
      role="pkg">bind9</emphasis> package. Version 9 brings two major
      changes compared to previous versions. First, the DNS server can now
      run under an unprivileged user, so that a security vulnerability in
      the server does not grant root privileges to the attacker (as was
      seen repeatedly with versions 8.x).</para>

      <para>Furthermore, Bind supports the DNSSEC standard for signing (and
      therefore authenticating) DNS records, which allows blocking any
      spoofing of this data during man-in-the-middle attacks.</para>

      <sidebar>
        <title><emphasis>CULTURE</emphasis> DNSSEC</title>
        <indexterm><primary>DNSSEC</primary></indexterm>
        <indexterm><primary>Domain Name System Security Extensions</primary><see>DNSSEC</see></indexterm>
        <indexterm><primary>DNS</primary><secondary>security extensions</secondary><see>DNSSEC</see></indexterm>

        <para>The DNSSEC norm is quite complex; this partly explains why
        it is not in widespread usage yet (even if it perfectly coexists
        with DNS servers unaware of DNSSEC). To understand all the ins and
        outs, you should check the following article. <ulink type="block"
        url="https://en.wikipedia.org/wiki/Domain_Name_System_Security_Extensions"/></para>
      </sidebar>
    </section>
    <section id="sect.dns-config">
      <title>Configuring bind</title>
      <indexterm><primary>daemon</primary><secondary>bind</secondary></indexterm>
      <indexterm><primary>server</primary><secondary>DNS</secondary></indexterm>
      <indexterm><primary><command>bind</command></primary><secondary>configuration</secondary></indexterm>

      <para>Configuration files for <command>bind</command>, irrespective
      of version, have the same structure.</para>

      <para>The Falcot administrators created a primary
      <literal>falcot.com</literal> zone to store information related to
      this domain, and a <literal>168.192.in-addr.arpa</literal> zone for
      reverse mapping of IP addresses in the local networks.</para>

      <sidebar>
        <title><emphasis>CAUTION</emphasis> Names of reverse zones</title>
        <indexterm><primary>zone</primary><secondary>reverse</secondary></indexterm>
        <indexterm><primary>reverse zone</primary></indexterm>
        <indexterm><primary>DNS</primary><secondary>reverse zone</secondary></indexterm>
        <indexterm><primary><literal>in-addr.arpa</literal></primary></indexterm>
        <indexterm><primary><literal>ip6.arpa</literal></primary></indexterm>
        <indexterm><primary>nibble format</primary></indexterm>

        <para>Reverse zones have a particular name. The zone covering the
        <literal>192.168.0.0/16</literal> network needs to be named
        <literal>168.192.in-addr.arpa</literal>: the IP address components
        are reversed, and followed by the <literal>in-addr.arpa</literal>
        suffix.</para>

        <para>For IPv6 networks, the suffix is <literal>ip6.arpa</literal> and
        the IP address components which are reversed are each character in the full
        hexadecimal representation of the IP address. As such, the
        <literal>2001:0bc8:31a0::/48</literal> network would use a zone named
        <literal>0.a.1.3.8.c.b.0.1.0.0.2.ip6.arpa</literal>.</para>
      </sidebar>

      <sidebar>
        <title><emphasis>TIP</emphasis> Testing the DNS server</title>
        <indexterm><primary><command>host</command></primary></indexterm>

        <para>The <command>host</command> command (in the <emphasis
        role="pkg">bind9-host</emphasis> package) queries a DNS
        server, and can be used to test the server configuration. For
        example, <command>host machine.falcot.com localhost</command>
        checks the local server's reply for the
        <literal>machine.falcot.com</literal> query. <command>host
        <replaceable>ipaddress</replaceable> localhost</command> tests
        the reverse resolution.</para>
      </sidebar>

      <indexterm><primary><filename>/etc</filename></primary><secondary><filename>/etc/bind/named.conf</filename></secondary></indexterm>

      <para>The following configuration excerpts, taken from the Falcot
      files, can serve as starting points to configure a DNS server:</para>

      <example id="example.bind-named.conf.local">
        <title>Excerpt of <filename>/etc/bind/named.conf.local</filename></title>

        <programlisting>
zone "falcot.com" {
        type master;
        file "/etc/bind/db.falcot.com";
        allow-query { any; };
        allow-transfer {
                195.20.105.149/32 ; // ns0.xname.org
                193.23.158.13/32 ; // ns1.xname.org
        };
};

zone "internal.falcot.com" {
        type master;
        file "/etc/bind/db.internal.falcot.com";
        allow-query { 192.168.0.0/16; };
};

zone "168.192.in-addr.arpa" {
        type master;
        file "/etc/bind/db.192.168";
        allow-query { 192.168.0.0/16; };
};
</programlisting>
      </example>

      <example id="example.bind-db.falcot.com">
        <title>Excerpt of <filename>/etc/bind/db.falcot.com</filename></title>

        <programlisting>; falcot.com Zone 
; admin.falcot.com. =&gt; zone contact: admin@falcot.com
$TTL    604800
@       IN      SOA     falcot.com. admin.falcot.com. (
                        20040121        ; Serial
                         604800         ; Refresh
                          86400         ; Retry
                        2419200         ; Expire
                         604800 )       ; Negative Cache TTL
;
; The @ refers to the zone name ("falcot.com" here)
; or to $ORIGIN if that directive has been used
;
@       IN      NS      ns
@       IN      NS      ns0.xname.org.

internal IN      NS      192.168.0.2

@       IN      A       212.94.201.10
@       IN      MX      5 mail
@       IN      MX      10 mail2

ns      IN      A       212.94.201.10
mail    IN      A       212.94.201.10
mail2   IN      A       212.94.201.11
www     IN      A       212.94.201.11

dns     IN      CNAME   ns
</programlisting>
      </example>

      <sidebar>
        <title><emphasis>CAUTION</emphasis> Syntax of a name</title>

        <para>The syntax of machine names follows strict rules. For
        instance, <literal>machine</literal> implies
        <literal>machine.<replaceable>domain</replaceable></literal>. If
        the domain name should not be appended to a name, said name must be
        written as <literal>machine.</literal> (with a dot as suffix).
        Indicating a DNS name outside the current domain therefore requires
        a syntax such as <literal>machine.otherdomain.com.</literal> (with
        the final dot).</para>
      </sidebar>

      <example id="example.bind-db.192.168">
        <title>Excerpt of <filename>/etc/bind/db.192.168</filename></title>

        <programlisting>; Reverse zone for 192.168.0.0/16
; admin.falcot.com. =&gt; zone contact: admin@falcot.com
$TTL    604800
@       IN      SOA     ns.internal.falcot.com. admin.falcot.com. (
                        20040121        ; Serial
                         604800         ; Refresh
                          86400         ; Retry
                        2419200         ; Expire
                         604800 )       ; Negative Cache TTL

        IN      NS      ns.internal.falcot.com.

; 192.168.0.1 -&gt; arrakis
1.0     IN      PTR     arrakis.internal.falcot.com.
; 192.168.0.2 -&gt; neptune
2.0     IN      PTR     neptune.internal.falcot.com.

; 192.168.3.1 -&gt; pau
1.3     IN      PTR     pau.internal.falcot.com.
</programlisting>
      </example>
    </section>
  </section>
  <section id="sect.dhcp">
    <title>DHCP</title>
    <indexterm><primary>DHCP</primary><seealso>Dynamic Host Configuration Protocol</seealso></indexterm>
    <indexterm><primary>Dynamic Host Configuration Protocol</primary><seealso>DHCP</seealso></indexterm>
    <indexterm><primary>network</primary><secondary>DHCP configuration</secondary></indexterm>
    <indexterm><primary><emphasis role="pkg">isc-dhcp-server</emphasis></primary></indexterm>

    <para>DHCP (for <emphasis>Dynamic Host Configuration
    Protocol</emphasis>) is a protocol by which a machine can
    automatically get its network configuration when it boots. This
    allows centralizing the management of network configurations, and
    ensuring that all desktop machines get similar settings.</para>

    <para>A DHCP server provides many network-related parameters. The
    most common of these is an IP address and the network where the
    machine belongs, but it can also provide other information, such as
    DNS servers, WINS servers, NTP servers, and so on.</para>

    <para>The Internet Software Consortium (also involved in developing
    <command>bind</command>) is the main author of the DHCP server. The
    matching Debian package is <emphasis
    role="pkg">isc-dhcp-server</emphasis>.</para>

    <section id="sect.dhcp-config">
      <title>Configuring</title>
      <indexterm><primary>DHCP</primary><secondary></secondary></indexterm>
      <indexterm><primary>server</primary><secondary>DHCP</secondary></indexterm>
      <indexterm><primary>daemon</primary><secondary>dhcpd</secondary></indexterm>
      <indexterm><primary><filename>/etc</filename></primary><secondary><filename>/etc/dhcp/dhcpd.conf</filename></secondary></indexterm>
      <indexterm><primary><filename>/etc</filename></primary><secondary><filename>/etc/dhcp/dhcpd6.conf</filename></secondary></indexterm>

      <para>The first elements that need to be edited in the DHCP server
      configuration files (<filename>/etc/dhcp/dhcpd.conf</filename>, and
      <filename>/etc/dhcp/dhcpd6.conf</filename> for IPv6) are
      the domain name and the DNS servers. If this server is alone on the
      local network (as defined by the broadcast propagation), the
      <literal>authoritative</literal> directive must also be enabled (or
      uncommented). One also needs to create a <literal>subnet</literal>
      section describing the local network and the configuration
      information to be provided. The following example fits a
      <literal>192.168.0.0/24</literal> local network with a router at
      <literal>192.168.0.1</literal> serving as the gateway. Available IP
      addresses are in the range <literal>192.168.0.128</literal> to
      <literal>192.168.0.254</literal>.</para>

      <example id="example.dhcp-dhcpd.conf">
        <title>Excerpt of <filename>/etc/dhcp/dhcpd.conf</filename></title>

        <programlisting>
#
# Sample configuration file for ISC dhcpd for Debian
#

# The ddns-updates-style parameter controls whether or not the server will
# attempt to do a DNS update when a lease is confirmed. We default to the
# behavior of the version 2 packages ('none', since DHCP v2 didn't
# have support for DDNS.)
ddns-update-style interim;

# option definitions common to all supported networks...
option domain-name "internal.falcot.com";
option domain-name-servers ns.internal.falcot.com;

default-lease-time 600;
max-lease-time 7200;

# If this DHCP server is the official DHCP server for the local
# network, the authoritative directive should be uncommented.
authoritative;

# Use this to send dhcp log messages to a different log file (you also
# have to hack syslog.conf to complete the redirection).
log-facility local7;

# My subnet
subnet 192.168.0.0 netmask 255.255.255.0 {
    option routers 192.168.0.1;
    option broadcast-address 192.168.0.255;
    range 192.168.0.128 192.168.0.254;
    ddns-domainname "internal.falcot.com";
}
</programlisting>
      </example>
    </section>
    <section id="sect.dhcp-dns">
      <title>DHCP and DNS</title>
      <indexterm><primary>DNS</primary><secondary>automated updates</secondary></indexterm>
      <indexterm><primary>DNS</primary><secondary>zone</secondary></indexterm>
      <indexterm><primary>DNS</primary><secondary>reverse zone</secondary></indexterm>
      <indexterm><primary><command>bind</command></primary></indexterm>

      <para>A nice feature is the automated registering of DHCP clients in
      the DNS zone, so that each machine gets a significant name (rather
      than something impersonal such as
      <literal>machine-192-168-0-131.internal.falcot.com</literal>). Using
      this feature requires configuring the DNS server to accept updates to
      the <literal>internal.falcot.com</literal> DNS zone from the DHCP
      server, and configuring the latter to submit updates for each
      registration.</para>

      <para>In the <command>bind</command> case (see
      <xref linkend="sect.dns-software"/>), the
      <literal>allow-update</literal> directive needs to be added to each
      of the zones that the DHCP server is to edit (the one for the
      <literal>internal.falcot.com</literal> domain, and the reverse zone).
      This directive lists the IP addresses allowed to perform these
      updates; it should therefore contain the possible addresses of the
      DHCP server (both the local address and the public address, if
      appropriate).</para>

      <programlisting>
allow-update { 127.0.0.1 192.168.0.1 212.94.201.10 !any };
</programlisting>

      <para>Beware! A zone that can be modified <emphasis>will</emphasis>
      be changed by <command>bind</command>, and the latter will overwrite
      its configuration files at regular intervals. Since this automated
      procedure produces files that are less human-readable than
      manually-written ones, the Falcot administrators handle the
      <literal>internal.falcot.com</literal> domain with a delegated DNS
      server; this means the <literal>falcot.com</literal> zone file stays
      firmly under their manual control.</para>

      <para>The DHCP server configuration excerpt above already includes
      the directives required for DNS zone updates: they are the
      <literal>ddns-update-style interim;</literal> and
      <literal>ddns-domain-name "internal.falcot.com";</literal> lines.</para>
    </section>
  </section>
  <section id="sect.network-diagnosis-tools">
    <title>Network Diagnosis Tools</title>
    <indexterm><primary>network</primary><secondary>diagnosis</secondary></indexterm>

    <para>When a network application does not run as expected, it is
    important to be able to look under the hood. Even when everything seems
    to run smoothly, running a network diagnosis can help ensure everything
    is working as it should. Several diagnosis tools exists for this
    purpose; each one operates on a different level. It would go beyond the
    scope of this book to discuss all tools, so we will focus on the more
    well-known and commonly used tools in the following sections.</para>

    <section id="sect.netstat">
      <title>Local Diagnosis: <command>netstat</command></title>
      <indexterm><primary><command>netstat</command></primary></indexterm>

      <para>Let's first mention the <command>netstat</command> command (in
      the <emphasis role="pkg">net-tools</emphasis> package); it displays
      an instant summary of a machine's network activity. When invoked with
      no argument, this command lists all open connections; this list can
      be very verbose since it includes many Unix-domain sockets (widely
      used by daemons) which do not involve the network at all (for
      example, <literal>dbus</literal> communication,
      <literal>X11</literal> traffic, and communications between virtual
      filesystems and the desktop).</para>

      <para>Common invocations therefore use options that alter
      <command>netstat</command>'s behavior. The most frequently used
      options include:</para>
      <itemizedlist>
        <listitem>
          <para><literal>-t</literal>, which filters the results to only
          include TCP connections;</para>
        </listitem>
        <listitem>
          <para><literal>-u</literal>, which works similarly for UDP
          connections; these options are not mutually exclusive, and one of
          them is enough to stop displaying Unix-domain connections;</para>
        </listitem>
        <listitem>
          <para><literal>-a</literal>, to also list listening sockets
          (waiting for incoming connections);</para>
        </listitem>
        <listitem>
          <indexterm><primary><filename>/etc</filename></primary><secondary><filename>/etc/services</filename></secondary></indexterm>
          <para><literal>-n</literal>, to display the results numerically:
          IP addresses (no DNS resolution), port numbers (no aliases as
          defined in <filename>/etc/services</filename>) and user ids (no
          login names);</para>
        </listitem>
        <listitem>
          <para><literal>-p</literal>, to list the processes involved; this
          option is only useful when <command>netstat</command> is run as
          root, since normal users will only see their own
          processes;</para>
        </listitem>
        <listitem>
          <para><literal>-c</literal>, to continuously refresh the list of
          connections.</para>
        </listitem>
      </itemizedlist>

      <para>Other options, documented in the
      <citerefentry><refentrytitle>netstat</refentrytitle>
      <manvolnum>8</manvolnum></citerefentry> manual page, provide an even
      finer control over the displayed results. In practice, the first five
      options are so often used together that systems and network
      administrators practically acquired <command>netstat -tupan</command>
      as a reflex. Typical results, on a lightly loaded machine, may look
      like the following:</para>

      <screen role="scale">
<computeroutput># </computeroutput><userinput>netstat -tupan</userinput>
<computeroutput>Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      397/rpcbind     
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      431/sshd        
tcp        0      0 0.0.0.0:36568           0.0.0.0:*               LISTEN      407/rpc.statd   
tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      762/exim4       
tcp        0    272 192.168.1.242:22        192.168.1.129:44452     ESTABLISHED 1172/sshd: roland [
tcp6       0      0 :::111                  :::*                    LISTEN      397/rpcbind     
tcp6       0      0 :::22                   :::*                    LISTEN      431/sshd        
tcp6       0      0 ::1:25                  :::*                    LISTEN      762/exim4       
tcp6       0      0 :::35210                :::*                    LISTEN      407/rpc.statd   
udp        0      0 0.0.0.0:39376           0.0.0.0:*                           916/dhclient    
udp        0      0 0.0.0.0:996             0.0.0.0:*                           397/rpcbind     
udp        0      0 127.0.0.1:1007          0.0.0.0:*                           407/rpc.statd   
udp        0      0 0.0.0.0:68              0.0.0.0:*                           916/dhclient    
udp        0      0 0.0.0.0:48720           0.0.0.0:*                           451/avahi-daemon: r
udp        0      0 0.0.0.0:111             0.0.0.0:*                           397/rpcbind     
udp        0      0 192.168.1.242:123       0.0.0.0:*                           539/ntpd        
udp        0      0 127.0.0.1:123           0.0.0.0:*                           539/ntpd        
udp        0      0 0.0.0.0:123             0.0.0.0:*                           539/ntpd        
udp        0      0 0.0.0.0:5353            0.0.0.0:*                           451/avahi-daemon: r
udp        0      0 0.0.0.0:39172           0.0.0.0:*                           407/rpc.statd   
udp6       0      0 :::996                  :::*                                397/rpcbind     
udp6       0      0 :::34277                :::*                                407/rpc.statd   
udp6       0      0 :::54852                :::*                                916/dhclient    
udp6       0      0 :::111                  :::*                                397/rpcbind     
udp6       0      0 :::38007                :::*                                451/avahi-daemon: r
udp6       0      0 fe80::5054:ff:fe99::123 :::*                                539/ntpd        
udp6       0      0 2001:bc8:3a7e:210:a:123 :::*                                539/ntpd        
udp6       0      0 2001:bc8:3a7e:210:5:123 :::*                                539/ntpd        
udp6       0      0 ::1:123                 :::*                                539/ntpd        
udp6       0      0 :::123                  :::*                                539/ntpd        
udp6       0      0 :::5353                 :::*                                451/avahi-daemon: r
</computeroutput></screen>

      <para>As expected, this lists established connections, two SSH
      connections in this case, and applications waiting for incoming
      connections (listed as <literal>LISTEN</literal>), notably the Exim4
      email server listening on port 25.</para>
    </section>
    <section id="sect.nmap">
      <title>Remote Diagnosis: <command>nmap</command></title>
      <indexterm><primary><command>nmap</command></primary></indexterm>

      <para><command>nmap</command> (in the similarly-named package) is, in
      a way, the remote equivalent for <command>netstat</command>. It can
      scan a set of “well-known” ports for one or several remote
      servers, and list the ports where an application is found to answer
      to incoming connections. Furthermore, <command>nmap</command> is able
      to identify some of these applications, sometimes even their version
      number. The counterpart of this tool is that, since it runs remotely,
      it cannot provide information on processes or users; however, it can
      operate on several targets at once.</para>

      <para>A typical <command>nmap</command> invocation only uses the
      <literal>-A</literal> option (so that <command>nmap</command>
      attempts to identify the versions of the server software it finds)
      followed by one or more IP addresses or DNS names of machines to
      scan. Again, many more options exist to finely control the behavior
      of <command>nmap</command>; please refer to the documentation in the
      <citerefentry> <refentrytitle>nmap</refentrytitle>
      <manvolnum>1</manvolnum> </citerefentry> manual page.</para>

      <screen width="80" role="scale">
<computeroutput># </computeroutput><userinput>nmap debian</userinput>
<computeroutput><![CDATA[Starting Nmap 7.80 ( https://nmap.org ) at 2022-02-22 20:58 CET
Nmap scan report for debian (192.168.122.57)
Host is up (0.000087s latency).
Not shown: 996 closed ports
PORT    STATE SERVICE
22/tcp  open  ssh
79/tcp  open  finger
80/tcp  open  http
113/tcp open  ident

Nmap done: 1 IP address (1 host up) scanned in 0.07 seconds
]]># </computeroutput><userinput>nmap -A localhost</userinput>
<computeroutput><![CDATA[nmap -A localhost
Starting Nmap 7.80 ( https://nmap.org ) at 2022-02-22 20:56 CET
Stats: 0:01:16 elapsed; 0 hosts completed (1 up), 1 undergoing Service Scan
Service scan Timing: About 83.33% done; ETC: 20:57 (0:00:15 remaining)
Nmap scan report for localhost (127.0.0.1)
Host is up (0.000086s latency).
Other addresses for localhost (not scanned): ::1
Not shown: 994 closed ports
PORT    STATE SERVICE VERSION
22/tcp  open  ssh     OpenSSH 8.4p1 Debian 5 (protocol 2.0)
|_auth-owners: foobar
25/tcp  open  smtp    Postfix smtpd
|_auth-owners: foobar
|_smtp-commands: debian, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, ENHANCEDSTATUSCODES, 8BITMIME, DSN, SMTPUTF8, CHUNKING, 
| ssl-cert: Subject: commonName=debian
| Subject Alternative Name: DNS:debian
| Not valid before: 2022-02-22T14:48:42
|_Not valid after:  2032-02-20T14:48:42
|_ssl-date: TLS randomness does not represent time
79/tcp  open  finger?
|_auth-owners: foobar
|_finger: ERROR: Script execution failed (use -d to debug)
80/tcp  open  http    Apache httpd 2.4.52 ((Debian))
|_auth-owners: foobar
|_http-server-header: Apache/2.4.52 (Debian)
|_http-title: Apache2 Debian Default Page: It works
113/tcp open  ident   Liedentd (Claimed user: foobar)
|_auth-owners: foobar
631/tcp open  ipp     CUPS 2.3
|_auth-owners: foobar
| http-robots.txt: 1 disallowed entry 
|_/
|_http-server-header: CUPS/2.3 IPP/2.1
|_http-title: Home - CUPS 2.3.3op2
Service Info: Host:  debian; OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 87.91 seconds
]]></computeroutput></screen>

      <para>As expected, e.g. the SSH, Apache and Postfix applications are
      listed. Note that not all applications listen on all IP addresses; since
      Postfix is only accessible on the <literal>lo</literal> loopback
      interface, it only appears during an analysis of
      <literal>localhost</literal> and not when scanning
      <literal>debian</literal> (which maps to the <literal>enp1s0</literal>
      interface on the same machine).</para>

    </section>
    <section id="sect.sniffers">
      <title>Sniffers: <command>tcpdump</command> and <command>wireshark</command></title>
      <indexterm><primary><command>tcpdump</command></primary></indexterm>
      <indexterm><primary><command>wireshark</command></primary></indexterm>

      <para>Sometimes, one needs to look at what actually goes on the wire,
      packet by packet. These cases call for a “frame analyzer”, more
      widely known as a <emphasis>sniffer</emphasis>. Such a tool observes
      all the packets that reach a given network interface, and displays
      them in a user-friendly way.</para>

      <para>The venerable tool in this domain is
      <command>tcpdump</command>, available as a standard tool on a wide
      range of platforms. It allows many kinds of network traffic capture,
      but the representation of this traffic stays rather obscure. We will
      therefore not describe it in further detail.</para>

      <para>A more recent (and more modern) tool,
      <command>wireshark</command> (in the <emphasis
      role="pkg">wireshark</emphasis> package), has become the new
      reference in network traffic analysis due to its many decoding
      modules that allow for a simplified analysis of the captured packets.
      The packets are displayed graphically with an organization based on
      the protocol layers. This allows a user to visualize all protocols
      involved in a packet. For example, given a packet containing an HTTP
      request, <command>wireshark</command> displays, separately, the
      information concerning the physical layer, the Ethernet layer, the IP
      packet information, the TCP connection parameters, and finally the
      HTTP request itself.</para>

      <figure id="figure.wireshark">
        <title>The <command>wireshark</command> network traffic analyzer</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/wireshark.png" scalefit="1" width="75%"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>In our example, the packets traveling over SSH are filtered
      out (with the <literal>!tcp.port == 22</literal> filter). The packet
      currently displayed was developed at the transport layer of the
      SSHv2 protocol.</para>

      <sidebar>
        <title><emphasis>TIP</emphasis> <command>wireshark</command> with no graphical interface: <command>tshark</command></title>
        <indexterm><primary><command>tshark</command></primary></indexterm>

        <para>When one cannot run a graphical interface, or does not wish
        to do so for whatever reason, a text-only version of
        <command>wireshark</command> also exists under the name
        <command>tshark</command> (in a separate <emphasis
        role="pkg">tshark</emphasis> package). Most of the capture and
        decoding features are still available, but the lack of a graphical
        interface necessarily limits the interactions with the program
        (filtering packets after they've been captured, tracking of a given
        TCP connection, and so on). It can still be used as a first
        approach. If further manipulations are intended and require the
        graphical interface, the packets can be saved to a file and this
        file can be loaded into a graphical <command>wireshark</command>
        running on another machine.</para>
      </sidebar>
    </section>
  </section>
</chapter>
<!-- vim: set spell spl=en_us ft=xml tw=79 ts=2 sw=2 ai si et: -->

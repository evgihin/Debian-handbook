msgid ""
msgstr "Project-Id-Version: 0\nPOT-Creation-Date: 2020-07-22 15:37+0200\nPO-Revision-Date: 2021-08-24 10:33+0000\nLast-Translator: Luna Jernberg <droidbittin@gmail.com>\nLanguage-Team: Swedish <https://hosted.weblate.org/projects/debian-handbook/15_debian-packaging/sv/>\nLanguage: sv-SE\nMIME-Version: 1.0\nContent-Type: application/x-publican; charset=UTF-8\nContent-Transfer-Encoding: 8bit\nPlural-Forms: nplurals=2; plural=n != 1;\nX-Generator: Weblate 4.8.1-dev\n"

msgid "Backport"
msgstr "Bakportering"

msgid "Rebuild"
msgstr "Ombyggnation"

msgid "Source package"
msgstr "Källkodspaket"

msgid "Archive"
msgstr "Arkiv"

msgid "Meta-package"
msgstr "Metapaket"

msgid "Debian Developer"
msgstr "Debian-utvecklare"

msgid "Maintainer"
msgstr "Underhållsutvecklare"

msgid "Creating a Debian Package"
msgstr "Skapa ett Debian-paket"

msgid "It is quite common, for an administrator who has been handling Debian packages in a regular fashion, to eventually feel the need to create their own packages, or to modify an existing package. This chapter aims to answer the most common questions in this field, and provide the required elements to take advantage of the Debian infrastructure in the best way. With any luck, after trying your hand for local packages, you may even feel the need to go further than that and join the Debian project itself!"
msgstr "Det är ganska vanligt för en administratör som har hanterat Debian-paket på vanligt sätt att till slut känna behovet av att skapa sina egna paket, eller att modifier att existerande paket. Detta kapitel ämnar att besvara de vanligaste frågorna inom detta område, och tillhandahålla de element som krävs för att dra nytta av Debian-infrastrukturen på bästa möjliga sätt. Med lite tur, efter att ha provat på lokala paket, kan du till och med känna att du måste komma vidare och gå med i Debian-projektet i sig!"

msgid "Rebuilding a Package from its Sources"
msgstr "Bygg om ett paket från dess källkod"

msgid "Rebuilding a binary package is required under several sets of circumstances. In some cases, the administrator needs a software feature that requires the software to be compiled from sources, with a particular compilation option; in others, the software as packaged in the installed version of Debian is not recent enough. In the latter case, the administrator will usually build a more recent package taken from a newer version of Debian — such as <emphasis role=\"distribution\">Testing</emphasis> or even <emphasis role=\"distribution\">Unstable</emphasis> — so that this new package works in their <emphasis role=\"distribution\">Stable</emphasis> distribution; this operation is called “backporting”. As usual, care should be taken, before undertaking such a task, to check whether it has been done already — a quick look on the Debian Package Tracker for that package will reveal that information. <ulink type=\"block\" url=\"https://tracker.debian.org/\" /> <indexterm><primary>backport</primary></indexterm>"
msgstr "Att bygga om ett binärpaket krävs under flera olika omständigheter. I visa fall behöver administratören en programvarufunktion somkräver att programvaran kompileras från källkod, med en viss kompileringsflagga; i andra fall är programvara som paketerats och installerats av Debian inte uppdaterad. I det senare fallet kommer administratören vanligtvis bygga paketet från en senare version av Debian — så som <emphasis role=\"distribution\">Testing</emphasis> eller till och med <emphasis role=\"distribution\">Unstable</emphasis> — så att detta nya paket fungerar i deras distribution <emphasis role=\"distribution\">Stable</emphasis>; denna åtgärd kallas ”bakportering”. Som vanligt ska man innan åtar sig en sådan uppgift kontrollera om det redan har gjorts — en snabb kontroll av i Debian Package Tracker för det paketet kan avslöja den informationen. <ulink type=\"block\" url=\"https://tracker.debian.org/\" /><indexterm><primary>bakportering</primary></indexterm>"

msgid "Getting the Sources"
msgstr "Hämta källkoden"

#, fuzzy
#| msgid "Rebuilding a Debian package starts with getting its source code. The easiest way is to use the <command>apt-get source <replaceable>source-package-name</replaceable></command> command. This command requires a <literal>deb-src</literal> line in the <filename>/etc/apt/sources.list</filename> file, and up-to-date index files (i.e. <command>apt-get update</command>). These conditions should already be met if you followed the instructions from the chapter dealing with APT configuration (see <xref linkend=\"sect.apt-sources.list\" />). Note however, that you will be downloading the source packages from the Debian version mentioned in the <literal>deb-src</literal> line. If you need another version, you may need to download it manually from a Debian mirror or from the web site. This involves fetching two or three files (with extensions <filename>*.dsc</filename> — for <emphasis>Debian Source Control</emphasis> — <filename>*.tar.<replaceable>comp</replaceable></filename>, and sometimes <filename>*.diff.gz</filename> or <filename>*.debian.tar.<replaceable>comp</replaceable></filename> — <replaceable>comp</replaceable> taking one value among <literal>gz</literal>, <literal>bz2</literal> or <literal>xz</literal> depending on the compression tool in use), then run the <command>dpkg-source -x <replaceable>file.dsc</replaceable></command> command. If the <filename>*.dsc</filename> file is directly accessible at a given URL, there is an even simpler way to fetch it all, with the <command>dget <replaceable>URL</replaceable></command> command. This command (which can be found in the <emphasis role=\"pkg\">devscripts</emphasis> package) fetches the <filename>*.dsc</filename> file at the given address, then analyzes its contents, and automatically fetches the file or files referenced within. Once everything has been downloaded, it extracts the source package (unless the <literal>-d</literal> or <literal>--download-only</literal> option is used)."
msgid "Rebuilding a Debian package starts with getting its source code. The easiest way is to use the <command>apt-get source <replaceable>source-package-name</replaceable></command> command. This command requires a <literal>deb-src</literal> line in the <filename>/etc/apt/sources.list</filename> file, and up-to-date index files (i.e. <command>apt-get update</command>). These conditions should already be met if you followed the instructions from the chapter dealing with APT configuration (see <xref linkend=\"sect.apt-sources.list\" />). Note, however, that you will be downloading the source packages from the Debian version mentioned in the <literal>deb-src</literal> line. If you need another version, you may need to download it manually from a Debian mirror or from the web site. This involves fetching two or three files (with extensions <filename>*.dsc</filename> — for <emphasis>Debian Source Control</emphasis> — <filename>*.tar.<replaceable>comp</replaceable></filename>, and sometimes <filename>*.diff.gz</filename> or <filename>*.debian.tar.<replaceable>comp</replaceable></filename> — <replaceable>comp</replaceable> taking one value among <literal>gz</literal>, <literal>bz2</literal> or <literal>xz</literal> depending on the compression tool in use), then run the <command>dpkg-source -x <replaceable>file.dsc</replaceable></command> command. If the <filename>*.dsc</filename> file is directly accessible at a given URL, there is an even simpler way to fetch it all, with the <command>dget <replaceable>URL</replaceable></command> command. This command (which can be found in the <emphasis role=\"pkg\">devscripts</emphasis> package) fetches the <filename>*.dsc</filename> file at the given address, then analyzes its contents, and automatically fetches the file or files referenced within. Once everything has been downloaded, it verifies the integrity of the downloaded source packages using <command>dscverify</command>, and it extracts the source package (unless the <literal>-d</literal> or <literal>--download-only</literal> option is used). The Debian keyring is needed, unless the option <literal>-u</literal> is supplied."
msgstr "Att bygga om ett Debian-paket börjar med att hämta dess källkod. Det enklaste sättet är att använda kommandot <command>apt-get source <replaceable>källkodspaketnamn</replaceable></command>. Detta kommando kräver en <literal>deb-src</literal>-rad i filen <filename>/etc/apt/sources.list</filename>, och uppdaterade indexfiler (t.ex. <command>apt-get update</command>). Dessa villkor borde redan vara uppfyllda om du följt instruktionerna från kapitlet som diskuterar APT-konfiguration (se <xref linkend=\"sect.apt-sources.list\" />). Notera dock att du kämmer att hämta källkodspaketet från Debian-versionen som nämns på <literal>deb-src</literal>-raden. Om du behöver en annan version kan du komma att behöva hämta den manuellt från en Debian-spegel eller från webbplatsen. Detta inbegripet att hämta två eller tre filer (med filändelser <filename>*.dsc</filename> — för <emphasis>Debian Source Control</emphasis> (Debian källkodskontroll)  — <filename>*.tar.<replaceable>comp</replaceable></filename>, och ibland <filename>*.diff.gz</filename> eller <filename>*.debian.tar.<replaceable>comp</replaceable></filename> — <replaceable>comp</replaceable> har endera av värdena <literal>gz</literal>, <literal>bz2</literal> eller <literal>xz</literal> beroende på kompressionsverktyget som använts), kör sedan kommandot <command>dpkg-source -x <replaceable>file.dsc</replaceable></command>. Om filen <filename>*.dsc</filename> går att komma åt direkt på en angiven URL finns det ett ännu enklare sätt att hämta allt på med kommandot <command>dget <replaceable>URL</replaceable></command>. Detta kommando (vilket kan hittas i paketet <emphasis role=\"pkg\">devscripts</emphasis>) hämtar filen <filename>*.dsc</filename> på den angivna adressen, därefter analyseras dess innehåll och filen/filerna som refereras hämtas automatiskt. När allt ha hämtats extraheras källkodspaketet (om in flaggan <literal>-d</literal> eller <literal>--download-only</literal> används)."

msgid "Making Changes"
msgstr "Att göra ändringar"

msgid "Let us use the <emphasis role=\"pkg\">samba</emphasis> package as an example."
msgstr "Låt oss använda <emphasis role=\"pkg\">samba</emphasis> paketet som exempel."

msgid ""
"<computeroutput>$ </computeroutput><userinput>apt source samba\n"
"</userinput><computeroutput>Reading package lists... Done\n"
"NOTICE: 'samba' packaging is maintained in the 'Git' version control system at:\n"
"https://salsa.debian.org/samba-team/samba.git\n"
"Please use:\n"
"git clone https://salsa.debian.org/samba-team/samba.git\n"
"to retrieve the latest (possibly unreleased) updates to the package.\n"
"Need to get 11.7 MB of source archives.\n"
"Get:1 http://security.debian.org/debian-security buster/updates/main samba 2:4.9.5+dfsg-5+deb10u1 (dsc) [4,316 B]\n"
"Get:2 http://security.debian.org/debian-security buster/updates/main samba 2:4.9.5+dfsg-5+deb10u1 (tar) [11.4 MB]\n"
"Get:3 http://security.debian.org/debian-security buster/updates/main samba 2:4.9.5+dfsg-5+deb10u1 (diff) [252 kB]\n"
"Fetched 11.7 MB in 1s (9,505 kB/s)\n"
"dpkg-source: info: extracting samba in samba-4.9.5+dfsg\n"
"dpkg-source: info: unpacking samba_4.9.5+dfsg.orig.tar.xz\n"
"dpkg-source: info: unpacking samba_4.9.5+dfsg-5+deb10u1.debian.tar.xz\n"
"dpkg-source: info: using patch list from debian/patches/series\n"
"dpkg-source: info: applying 07_private_lib\n"
"dpkg-source: info: applying bug_221618_precise-64bit-prototype.patch\n"
"[...]\n"
"</computeroutput>"
msgstr "<computeroutput>$ </computeroutput><userinput>apt source samba\n</userinput><computeroutput>Reading package lists... Done\nNOTICE: 'samba' packaging is maintained in the 'Git' version control system at:\nhttps://salsa.debian.org/samba-team/samba.git\nPlease use:\ngit clone https://salsa.debian.org/samba-team/samba.git\nto retrieve the latest (possibly unreleased) updates to the package.\nNeed to get 11.7 MB of source archives.\nGet:1 http://security.debian.org/debian-security buster/updates/main samba 2:4.9.5+dfsg-5+deb10u1 (dsc) [4,316 B]\nGet:2 http://security.debian.org/debian-security buster/updates/main samba 2:4.9.5+dfsg-5+deb10u1 (tar) [11.4 MB]\nGet:3 http://security.debian.org/debian-security buster/updates/main samba 2:4.9.5+dfsg-5+deb10u1 (diff) [252 kB]\nFetched 11.7 MB in 1s (9,505 kB/s)\ndpkg-source: info: extracting samba in samba-4.9.5+dfsg\ndpkg-source: info: unpacking samba_4.9.5+dfsg.orig.tar.xz\ndpkg-source: info: unpacking samba_4.9.5+dfsg-5+deb10u1.debian.tar.xz\ndpkg-source: info: using patch list from debian/patches/series\ndpkg-source: info: applying 07_private_lib\ndpkg-source: info: applying bug_221618_precise-64bit-prototype.patch\n[...]\n</computeroutput>"

msgid "The source of the package is now available in a directory named after the source package and its version (<emphasis>samba-4.9.5+dfsg</emphasis>); this is where we'll work on our local changes."
msgstr "Källkoden för paketet är nu tillgängligt i en katalog med namnet efter källkodspaketet och dess version ( <emphasis>sambe-4.9.5+dfsg</emphasis>); det är denna plats på vilken vi kommer att arbeta på våra lokala ändringar."

msgid "The first thing to do is to change the package version number, so that the rebuilt packages can be distinguished from the original packages provided by Debian. Assuming the current version is <literal>2:4.9.5+dfsg-5</literal>, we can create version <literal>2:4.9.5+dfsg-5falcot1</literal>, which clearly indicates the origin of the package. This makes the package version number higher than the one provided by Debian, so that the package will easily install as an update to the original package. Such a change is best effected with the <command>dch</command> command (<emphasis>Debian CHangelog</emphasis>) from the <emphasis role=\"pkg\">devscripts</emphasis> package."
msgstr "Det första du ska göra är att ändra paketets versionsnummer så att ombyggda paket kan särskiljas från originalpaketen som tillhandahålls av Debian. Förutsatt att det aktuella versionsnumret är <literal>2:4.9.5+dfsg-2</literal> så kan vi skapa version <literal>2:4.9.5+dfsg-5falcot1</literal> vilket tydligt indikerar var paketet kommer ifrån. Detta får paketets versionsnummer att vara högre än det som tillhandahålls av Debian, så paketet kan med lätthet att installeras som en uppdatering för originalpaketet. En sådan ändring görs bästa med kommandot <command>dch</command> (<emphasis>Debian CHangelog</emphasis> (Debian ändringslogg)) från paketet <emphasis role=\"pkg\">devscripts</emphasis>, med ett kommando så som <command>dch --local falcot</command>. Detta startar en textredigerare (<command>sensible-editor</command> — detta bör vara din favoritredigerare om den nämns i miljövariablerna <varname>VISUAL</varname> eller <varname>EDITOR</varname>, eller i annat fall standardredigeraren) för att tillåta dokumentation av de skillnader som denna ombyggnad inför. Denna redigerare visar oss att <command>dch</command> faktiskt ändrade filen <filename>debian/changelog</filename> file."

msgid ""
"<computeroutput>$ </computeroutput><userinput>cd samba-4.9.5+dfsg\n"
"</userinput><computeroutput>$ </computeroutput><userinput>dch --local falcot</userinput>"
msgstr "<computeroutput>$ </computeroutput><userinput>cd samba-4.9.5+dfsg\n</userinput><computeroutput>$ </computeroutput><userinput>dch --local falcot</userinput>"

msgid "The last command invokes a text editor (<command>sensible-editor</command> — this should be your favorite editor if it is mentioned in the <varname>VISUAL</varname> or <varname>EDITOR</varname> environment variables, and the default editor otherwise) to allow documenting the differences brought by this rebuild. This editor shows us that <command>dch</command> really did change the <filename>debian/changelog</filename> file."
msgstr ""

msgid "When a change in build options is required, the changes need to be made in <filename>debian/rules</filename>, which drives the steps in the package build process. In the simplest cases, the lines concerning the initial configuration (<literal>./configure …</literal>) or the actual build (<literal>$(MAKE) …</literal> or <literal>make …</literal>) are easy to spot. If these commands are not explicitly called, they are probably a side effect of another explicit command, in which case please refer to their documentation to learn more about how to change the default behavior. With packages using <command>dh</command>, you might need to add an override for the <command>dh_auto_configure</command> or <command>dh_auto_build</command> commands (see their respective manual pages for explanations on how to achieve this)."
msgstr "När en ändring av byggflaggorna behövs, måste ändringarna göras i <filename>debian/rules</filename>, vilket driver stegen i paketets byggprocess. I de enklaste fallen är raderna som rör inledande konfiguration (<literal>./configure …</literal>) eller det faktiska bygget (<literal>$(MAKE) …</literal> eller <literal>make …</literal>) lätta att hitta. Om dessa kommandon inte är anropas uttryckligen så de troligtvis sidoeffekter av ett annat kommando som anropas uttryckligen, i vilket fall du bör läsa deras dokumentation för att få reda på hur du ändrar standardbeteendet. Med paket som använder <command>dh</command>, kan du behöva lägga till en åsidosättning för kommandona <command>dh_auto_configure</command> eller <command>dh_auto_build</command> (se deras respektive manualsidor för förklaringar om hur du åstadkommer detta)."

msgid "Depending on the local changes to the packages, an update may also be required in the <filename>debian/control</filename> file, which contains a description of the generated packages. In particular, this file contains <literal>Build-Depends</literal> lines controlling the list of dependencies that must be fulfilled at package build time. These often refer to versions of packages contained in the distribution the source package comes from, but which may not be available in the distribution used for the rebuild. There is no automated way to determine if a dependency is real or only specified to guarantee that the build should only be attempted with the latest version of a library — this is the only available way to force an <emphasis>autobuilder</emphasis> to use a given package version during build, which is why Debian maintainers frequently use strictly versioned build-dependencies."
msgstr "Beroende på de lokala ändringarna till paketen kan en uppdatering också krävas i filen <filename>debian/control</filename>, vilken innehåller en beskrivning av de genererade paketen. I synnerhet innehåller denna filen <literal>Build-Depends</literal>-rade som styr listan av beroenden som måste vara uppfyllda då paketet byggs. Dessa refererar ofta till versioner av paket som finns i distributionen som källkodspaketet kommer från men som kanske inte finns tillgängliga i distributionen som används för ombygget. Det finns inget automatiserat sätt att avgöra om ett beroenden är korrekt eller endast angivet för att garantera att man endast ska försöka sig på bygget med den senaste versionen av ett bibliotek — detta är det enda tillgängliga sättett att tvinga en <emphasis>autobyggare</emphasis> att använda en given paketversion under bygget, vilket är anledningen till att Debian-utvecklarna ofta använda strikt versionerade byggberoenden."

msgid "If you know for sure that these build-dependencies are too strict, you should feel free to relax them locally. Reading the files which document the standard way of building the software — these files are often called <filename>INSTALL</filename> — will help you figure out the appropriate dependencies. Ideally, all dependencies should be satisfiable from the distribution used for the rebuild; if they are not, a recursive process starts, whereby the packages mentioned in the <literal>Build-Depends</literal> field must be backported before the target package can be. Some packages may not need backporting, and can be installed as-is during the build process (a notable example is <emphasis role=\"pkg\">debhelper</emphasis>). Note that the backporting process can quickly become complex if you are not careful. Therefore, backports should be kept to a strict minimum when possible."
msgstr "Om du är säker på att dessa byggberoenden är allt för strikta kan du känna dig fri att lösa upp dem lokalt. Att läsa filerna som dokumenterar standardsättet att bygga programvara — dessa filer kallas ofta <filename>INSTALL</filename> — kommer att hjälpa dig att lista ut lämpliga beroenden. I idealfallet borde alla beroenden kunna gå att tillfredställa från distributionen som används för ombygget; om inte inleds en rekursiv process där paket som nämns i fältet <literal>Build-Depends</literal> måste bakporteras innan målpaketet kan bakporteras. Vissa paket kanske inte kräver bakportering och kan installeras som de är under byggprocessen (ett exempel är <emphasis role=\"pkg\">debhelper</emphasis>). Notera att bakporteringsprocessen snabbt kan bli komplex om du inte är försiktig. Därför bör man försöka sig på bakportering endat då det är nödvändigt."

msgid "<emphasis>TIP</emphasis> Installing <literal>Build-Depends</literal>"
msgstr "<emphasis>TIPS</emphasis> Installera <literal>Build-Depends</literal>"

msgid "<primary><literal>Build-Depends</literal>, control field</primary>"
msgstr "<primary><literal>Build-Depends</literal>, kontrollfält</primary>"

msgid "<command>apt-get</command> allows installing all packages mentioned in the <literal>Build-Depends</literal> fields of a source package available in a distribution mentioned in a <literal>deb-src</literal> line of the <filename>/etc/apt/sources.list</filename> file. This is a simple matter of running the <command>apt-get build-dep <replaceable>source-package</replaceable></command> command."
msgstr "<command>apt-get</command> tillåter installation av alla paket som nämns i fältet <literal>Build-Depends</literal> för ett källkodspaket tillgängliga i en distribution som nämns på en <literal>deb-src</literal>-rad i filen <filename>/etc/apt/sources.list</filename>. Detta görs enkelt genom att köra kommandot <command>apt-get build-dep <replaceable>källkodspaket</replaceable></command>."

msgid "Starting the Rebuild"
msgstr "Starta ombyggnaden"

msgid "When all the needed changes have been applied to the sources, we can start generating the actual binary package (<filename>.deb</filename> file). The whole process is managed by the <command>dpkg-buildpackage</command> command."
msgstr ""

msgid "Rebuilding a package"
msgstr ""

msgid ""
"<computeroutput>$ </computeroutput><userinput>dpkg-buildpackage -us -uc\n"
"</userinput><computeroutput>[...]\n"
"</computeroutput>"
msgstr ""
"<computeroutput>$ </computeroutput><userinput>dpkg-buildpackage -us -uc\n"
"</userinput><computeroutput>[...]\n"
"</computeroutput>"

msgid "The previous command can fail if the <literal>Build-Depends</literal> fields have not been updated, or if the related packages are not installed. In such a case, it is possible to overrule this check by passing the <literal>-d</literal> option to <command>dpkg-buildpackage</command>. However, explicitly ignoring these dependencies runs the risk of the build process failing at a later stage. Worse, the package may seem to build correctly but fail to run properly: some programs automatically disable some of their features when a required library is not available at build time."
msgstr ""

msgid "<emphasis>TOOL</emphasis> <command>fakeroot</command>"
msgstr "<emphasis>VERKTYG</emphasis> <command>fakeroot</command>"

msgid "In essence, the package creation process is a simple matter of gathering in an archive a set of existing (or built) files; most of the files will end up being owned by <emphasis>root</emphasis> in the archive. However, building the whole package under this user would imply increased risks; fortunately, this can be avoided with the <command>fakeroot</command> command. This tool can be used to run a program and give it the impression that it runs as <emphasis>root</emphasis> and creates files with arbitrary ownership and permissions. When the program creates the archive that will become the Debian package, it is tricked into creating an archive containing files marked as belonging to arbitrary owners, including <emphasis>root</emphasis>. This setup is so convenient that <command>dpkg-buildpackage</command> uses <command>fakeroot</command> by default when building packages."
msgstr ""

msgid "Note that the program is only tricked into “believing” that it operates as a privileged account, and the process actually runs as the user running <command>fakeroot <replaceable>program</replaceable></command> (and the files are actually created with that user's permissions). At no time does it actually get root privileges that it could abuse."
msgstr ""

msgid "More often than not, Debian developers use a higher-level program such as <command>debuild</command>; this runs <command>dpkg-buildpackage</command> as usual, but it also adds an invocation of a program that runs many checks to validate the generated package against the Debian policy. This script also cleans up the environment so that local environment variables do not “pollute” the package build. The <command>debuild</command> command is one of the tools in the <emphasis>devscripts</emphasis> suite, which share some consistency and configuration to make the maintainers' task easier."
msgstr ""

msgid "<emphasis>QUICK LOOK</emphasis> Building packages in a <emphasis>chrooted</emphasis> environment"
msgstr ""

msgid "<primary><command>pbuilder</command></primary>"
msgstr "<primary><command>pbuilder</command></primary>"

msgid "<primary><command>schroot</command></primary>"
msgstr "<primary><command>schroot</command></primary>"

msgid "The <command>pbuilder</command> program (in the similarly named package) allows building a Debian package in a <emphasis>chrooted</emphasis> environment. It first creates a temporary directory containing the minimal system required for building the package (including the packages mentioned in the <emphasis>Build-Depends</emphasis> field). This directory is then used as the root directory (<filename>/</filename>), using the <command>chroot</command> command, during the build process."
msgstr ""

msgid "This tool allows the build process to happen in an environment that is not altered by users' manipulations. This also allows for quick detection of the missing build-dependencies (since the build will fail unless the appropriate dependencies are documented). Finally, it allows building a package for a Debian version that is not the one used by the system as a whole: the machine can be using <emphasis role=\"distribution\">Stable</emphasis> for its normal workload, and a <command>pbuilder</command> running on the same machine can be using <emphasis role=\"distribution\">Unstable</emphasis> for package builds."
msgstr ""

msgid "<command>schroot</command> allows running a command or a login shell in a <emphasis>chrooted</emphasis> environment."
msgstr ""

msgid "Building your First Package"
msgstr "Bygg ditt första paket"

msgid "Meta-Packages or Fake Packages"
msgstr "Meta-paket eller falska paket"

msgid "Fake packages and meta-packages are similar, in that they are empty shells that only exist for the effects their meta-data have on the package handling stack."
msgstr ""

msgid "The purpose of a fake package is to trick <command>dpkg</command> and <command>apt</command> into believing that some package is installed even though it is only an empty shell. This allows satisfying dependencies on a package when the corresponding software was installed outside the scope of the packaging system. Such a method works, but it should still be avoided whenever possible, since there is no guarantee that the manually installed software behaves exactly like the corresponding package would and other packages depending on it would not work properly."
msgstr ""

msgid "On the other hand, a meta-package exists mostly as a collection of dependencies, so that installing the meta-package will actually bring in a set of other packages in a single step."
msgstr ""

msgid "Both these kinds of packages can be created by the <command>equivs-control</command> and <command>equivs-build</command> commands (in the <emphasis role=\"pkg\">equivs</emphasis> package). The <command>equivs-control <replaceable>file</replaceable></command> command creates a Debian package header file that should be edited to contain the name of the expected package, its version number, the name of the maintainer, its dependencies, and its description. Other fields without a default value are optional and can be deleted. The <literal>Copyright</literal>, <literal>Changelog</literal>, <literal>Readme</literal> and <literal>Extra-Files</literal> fields are not standard fields in Debian packages; they only make sense within the scope of <command>equivs-build</command>, and they will not be kept in the headers of the generated package."
msgstr ""

msgid "Header file of the <emphasis>libxml-libxml-perl</emphasis> fake package"
msgstr ""

msgid ""
"\n"
"Section: perl\n"
"Priority: optional\n"
"Standards-Version: 4.4.1\n"
"\n"
"Package: libxml-libxml-perl\n"
"Version: 2.0134-1\n"
"Maintainer: Raphael Hertzog &lt;hertzog@debian.org&gt;\n"
"Depends: libxml2 (&gt;= 2.7.4)\n"
"Architecture: all\n"
"Description: Fake package - module manually installed in site_perl\n"
" This is a fake package to let the packaging system\n"
" believe that this Debian package is installed.\n"
" .\n"
" In fact, the package is not installed since a newer version\n"
" of the module has been manually compiled &amp; installed in the\n"
" site_perl directory."
msgstr "\nSection: perl\nPriority: optional\nStandards-Version: 4.4.1\n\nPackage: libxml-libxml-perl\nVersion: 2.0134-1\nMaintainer: Raphael Hertzog &lt;hertzog@debian.org&gt;\nDepends: libxml2 (&gt;= 2.7.4)\nArchitecture: all\nDescription: Fake package - module manually installed in site_perl\n This is a fake package to let the packaging system\n believe that this Debian package is installed.\n .\n In fact, the package is not installed since a newer version\n of the module has been manually compiled &amp; installed in the\n site_perl directory."

msgid "The next step is to generate the Debian package with the <command>equivs-build <replaceable>file</replaceable></command> command. Voilà: the package is created in the current directory and it can be handled like any other Debian package would."
msgstr ""

msgid "Simple File Archive"
msgstr "Simpelt filarkiv"

msgid "The Falcot Corp administrators need to create a Debian package in order to ease deployment of a set of documents on a large number of machines. The administrator in charge of this task first reads the “New Maintainer's Guide”, then starts working on their first package. <ulink type=\"block\" url=\"https://www.debian.org/doc/manuals/maint-guide/\" />"
msgstr ""

msgid "The first step is creating a <filename>falcot-data-1.0</filename> directory to contain the target source package. The package will logically, be named <literal>falcot-data</literal> and bear the <literal>1.0</literal> version number. The administrator then places the document files in a <filename>data</filename> subdirectory. Then they invoke the <command>dh_make</command> command (from the <emphasis role=\"pkg\">dh-make</emphasis> package) to add files required by the package generation process, which will all be stored in a <filename>debian</filename> subdirectory:"
msgstr ""

msgid ""
"\n"
"<computeroutput>$ </computeroutput><userinput>cd falcot-data-1.0</userinput>\n"
"<computeroutput>$ </computeroutput><userinput>dh_make --native</userinput>\n"
"<computeroutput>\n"
"Type of package: (single, indep, library, python)\n"
"[s/i/l/p]? </computeroutput><userinput>i</userinput>\n"
"<computeroutput>\n"
"Maintainer Name     : Raphael Hertzog\n"
"Email-Address       : hertzog@debian.org\n"
"Date                : Fri, 04 Sep 2015 12:09:39 -0400\n"
"Package Name        : falcot-data\n"
"Version             : 1.0\n"
"License             : gpl3\n"
"Package Type        : indep\n"
"Are the details correct? [Y/n/q]\n"
"Currently there is not top level Makefile. This may require additional tuning\n"
"Done. Please edit the files in the debian/ subdirectory now.\n"
"\n"
"$</computeroutput>"
msgstr "\n<computeroutput>$ </computeroutput><userinput>cd falcot-data-1.0</userinput>\n<computeroutput>$ </computeroutput><userinput>dh_make --native</userinput>\n<computeroutput>\nType of package: (single, indep, library, python)\n[s/i/l/p]? </computeroutput><userinput>i</userinput>\n<computeroutput>\nMaintainer Name     : Raphael Hertzog\nEmail-Address       : hertzog@debian.org\nDate                : Fri, 04 Sep 2015 12:09:39 -0400\nPackage Name        : falcot-data\nVersion             : 1.0\nLicense             : gpl3\nPackage Type        : indep\nAre the details correct? [Y/n/q]\nCurrently there is not top level Makefile. This may require additional tuning\nDone. Please edit the files in the debian/ subdirectory now.\n\n$</computeroutput>"

msgid "The selected type of package (<emphasis>indep</emphasis>) indicates that this source package will generate a single binary package that can be shared across all architectures (<literal>Architecture: all</literal>). <emphasis>single</emphasis> acts as a counterpart, and leads to a single binary package that is dependent on the target architecture (<literal>Architecture: any</literal>). In this case, the former choice is more relevant since the package only contains documents and no binary programs, so it can be used similarly on computers of all architectures."
msgstr ""

msgid "<primary>package types</primary>"
msgstr "<primary>pakettyper</primary>"

msgid "<primary>package</primary><secondary>types</secondary>"
msgstr "<primary>paket</primary><secondary>typer</secondary>"

msgid "The <emphasis>library</emphasis> type corresponds to a source package leading to several binary packages. It is useful for shared libraries, since they need to follow strict packaging rules."
msgstr ""

msgid "<emphasis>TIP</emphasis> Maintainer's name and email address"
msgstr "<emphasis>TIPS</emphasis> Underhållarens namn och e-postadress"

msgid "Most of the programs involved in package maintenance will look for your name and email address in the <varname>DEBFULLNAME</varname> and <varname>DEBEMAIL</varname> or <varname>EMAIL</varname> environment variables. Defining them once and for all will avoid you having to type them multiple times. If your usual shell is <command>bash</command>, it is a simple matter of adding the following two lines in your <filename>~/.bashrc</filename> file (you will obviously replace the values with more relevant ones!):"
msgstr ""

msgid ""
"\n"
"export EMAIL=\"hertzog@debian.org\"\n"
"export DEBFULLNAME=\"Raphael Hertzog\""
msgstr ""
"\n"
"export EMAIL=\"hertzog@debian.org\"\n"
"export DEBFULLNAME=\"Raphael Hertzog\""

msgid "The <command>dh_make</command> command created a <filename>debian</filename> subdirectory with many files. Some are required, in particular <filename>rules</filename>, <filename>control</filename>, <filename>changelog</filename> and <filename>copyright</filename>. Files with the <filename>.ex</filename> extension are example files that can be used by modifying them (and removing the extension) when appropriate. When they are not needed, removing them is recommended. The <filename>compat</filename> file should be kept, since it is required for the correct functioning of the <emphasis>debhelper</emphasis> suite of programs (all beginning with the <command>dh_</command> prefix) used at various stages of the package build process."
msgstr ""

msgid "The <filename>copyright</filename> file must contain information about the authors of the documents included in the package, and the related license. In our case, these are internal documents and their use is restricted to within the Falcot Corp company. The default <filename>changelog</filename> file is generally appropriate; replacing the “Initial release” with a more verbose explanation and changing the distribution from <literal>unstable</literal> to <literal>internal</literal> is enough. The <filename>control</filename> file was also updated: the <literal>Section</literal> field has been changed to <emphasis>misc</emphasis> and the <literal>Homepage</literal>, <literal>Vcs-Git</literal> and <literal>Vcs-Browser</literal> fields were removed. The <literal>Depends</literal> fields was completed with <literal>firefox-esr | www-browser</literal> so as to ensure the availability of a web browser able to display the documents in the package."
msgstr ""

msgid "The <filename>control</filename> file"
msgstr "<filename>control</filename> filen"

msgid ""
"\n"
"Source: falcot-data\n"
"Section: misc\n"
"Priority: optional\n"
"Maintainer: Raphael Hertzog &lt;hertzog@debian.org&gt;\n"
"Build-Depends: debhelper (&gt;= 10)\n"
"Standards-Version: 4.4.1\n"
"\n"
"Package: falcot-data\n"
"Architecture: all\n"
"Depends: firefox-esr | www-browser, ${misc:Depends}\n"
"Description: Internal Falcot Corp Documentation\n"
" This package provides several documents describing the internal\n"
" structure at Falcot Corp.  This includes:\n"
"  - organization diagram\n"
"  - contacts for each department.\n"
" .\n"
" These documents MUST NOT leave the company.\n"
" Their use is INTERNAL ONLY."
msgstr "\nSource: falcot-data\nSection: misc\nPriority: optional\nMaintainer: Raphael Hertzog &lt;hertzog@debian.org&gt;\nBuild-Depends: debhelper (&gt;= 10)\nStandards-Version: 4.4.1\n\nPackage: falcot-data\nArchitecture: all\nDepends: firefox-esr | www-browser, ${misc:Depends}\nDescription: Internal Falcot Corp Documentation\n This package provides several documents describing the internal\n structure at Falcot Corp.  This includes:\n  - organization diagram\n  - contacts for each department.\n .\n These documents MUST NOT leave the company.\n Their use is INTERNAL ONLY."

msgid "The <filename>changelog</filename> file"
msgstr ""

msgid ""
"\n"
"falcot-data (1.0) internal; urgency=low\n"
"\n"
"  * Initial Release.\n"
"  * Let's start with few documents:\n"
"    - internal company structure;\n"
"    - contacts for each department.\n"
"\n"
" -- Raphael Hertzog &lt;hertzog@debian.org&gt;  Fri, 04 Sep 2015 12:09:39 -0400"
msgstr ""
"\n"
"falcot-data (1.0) internal; urgency=low\n"
"\n"
"  * Initial Release.\n"
"  * Let's start with few documents:\n"
"    - internal company structure;\n"
"    - contacts for each department.\n"
"\n"
" -- Raphael Hertzog &lt;hertzog@debian.org&gt;  Fri, 04 Sep 2015 12:09:39 -0400"

msgid "The <filename>copyright</filename> file"
msgstr "<filename>copyright</filename> filen"

msgid ""
"\n"
"Format: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/\n"
"Upstream-Name: falcot-data\n"
"\n"
"Files: *\n"
"Copyright: 2004-2019 Falcot Corp\n"
"License:\n"
" All rights reserved."
msgstr "\nFormat: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/\nUpstream-Name: falcot-data\n\nFiles: *\nCopyright: 2004-2019 Falcot Corp\nLicense:\n All rights reserved."

msgid "<emphasis>BACK TO BASICS</emphasis> <filename>Makefile</filename> file"
msgstr "<emphasis>TILLBAKA TILL GRUNDEN</emphasis> <filename>Makefile</filename> fil"

msgid "<primary><filename>Makefile</filename></primary>"
msgstr "<primary><filename>Makefile</filename></primary>"

msgid "A <filename>Makefile</filename> file is a script used by the <command>make</command> program; it describes rules for how to build a set of files from each other in a tree of dependencies (for instance, a program can be built from a set of source files). The <filename>Makefile</filename> file describes these rules in the following format:"
msgstr ""

msgid ""
"\n"
"target: source1 source2 ...\n"
"        command1\n"
"        command2"
msgstr "\nmål: källa1 källa2 ...\n        kommando1\n        kommando2"

msgid "The interpretation of such a rule is as follows: if one of the <literal>source*</literal> files is more recent than the <literal>target</literal> file, then the target needs to be generated, using <command>command1</command> and <command>command2</command>."
msgstr ""

msgid "Note that the command lines must start with a tab character; also note that when a command line starts with a dash character (<literal>-</literal>), failure of the command does not interrupt the whole process."
msgstr ""

msgid "The <filename>rules</filename> file usually contains a set of rules used to configure, build and install the software in a dedicated subdirectory (named after the generated binary package). The contents of this subdirectory is then archived within the Debian package as if it were the root of the filesystem. In our case, files will be installed in the <filename>debian/falcot-data/usr/share/falcot-data/</filename> subdirectory, so that installing the generated package will deploy the files under <filename>/usr/share/falcot-data/</filename>. The <filename>rules</filename> file is used as a <filename>Makefile</filename>, with a few standard targets (including <literal>clean</literal> and <literal>binary</literal>, used respectively to clean the source directory and generate the binary package)."
msgstr ""

msgid "Although this file is the heart of the process, it increasingly contains only the bare minimum for running a standard set of commands provided by the <command>debhelper</command> tool. Such is the case for files generated by <command>dh_make</command>. To install our files, we simply configure the behavior of the <command>dh_install</command> command by creating the following <filename>debian/falcot-data.install</filename> file:"
msgstr ""

msgid ""
"\n"
"data/* usr/share/falcot-data/"
msgstr ""
"\n"
"data/* usr/share/falcot-data/"

msgid "At this point, the package can be created. We will, however, add a lick of paint. Since the administrators want the documents to be easily accessed from the menus of graphical desktop environments, we add a <filename>falcot-data.desktop</filename> file and get it installed in <filename>/usr/share/applications</filename> by adding a second line to <filename>debian/falcot-data.install</filename>."
msgstr ""

msgid "The <filename>falcot-data.desktop</filename> file"
msgstr "<filename>falcot-data.desktop</filename> fil"

msgid ""
"\n"
"[Desktop Entry]\n"
"Name=Internal Falcot Corp Documentation\n"
"Comment=Starts a browser to read the documentation\n"
"Exec=x-www-browser /usr/share/falcot-data/index.html\n"
"Terminal=false\n"
"Type=Application\n"
"Categories=Documentation;"
msgstr ""
"\n"
"[Desktop Entry]\n"
"Name=Internal Falcot Corp Documentation\n"
"Comment=Starts a browser to read the documentation\n"
"Exec=x-www-browser /usr/share/falcot-data/index.html\n"
"Terminal=false\n"
"Type=Application\n"
"Categories=Documentation;"

msgid "The updated <filename>debian/falcot-data.install</filename> looks like this:"
msgstr ""

msgid ""
"\n"
"data/* usr/share/falcot-data/\n"
"falcot-data.desktop usr/share/applications/"
msgstr ""
"\n"
"data/* usr/share/falcot-data/\n"
"falcot-data.desktop usr/share/applications/"

msgid "Our source package is now ready. All that is left to do is to generate the binary package, with the same method we used previously for rebuilding packages: we run the <command>dpkg-buildpackage -us -uc</command> command from within the <filename>falcot-data-1.0</filename> directory."
msgstr ""

msgid "Creating a Package Repository for APT"
msgstr "Skapa ett paketförråd för APT"

msgid "<primary>package archive</primary>"
msgstr "<primary>paket arkiv</primary>"

msgid "<primary>package</primary><secondary>Debian</secondary><tertiary>archive of</tertiary>"
msgstr "<primary>paket</primary><secondary>Debian</secondary><tertiary>arkiv av</tertiary>"

msgid "Falcot Corp gradually started maintaining a number of Debian packages either locally modified from existing packages or created from scratch to distribute internal data and programs."
msgstr ""

msgid "To make deployment easier, they want to integrate these packages in a package archive that can be directly used by APT. For obvious maintenance reasons, they wish to separate internal packages from locally-rebuilt packages. The goal is for the matching entries in a <filename>/etc/apt/sources.list.d/falcot.list</filename> file to be as follows:"
msgstr ""

msgid ""
"\n"
"deb http://packages.falcot.com/ updates/\n"
"deb http://packages.falcot.com/ internal/"
msgstr ""
"\n"
"deb http://packages.falcot.com/ updates/\n"
"deb http://packages.falcot.com/ internal/"

msgid "<primary><command>mini-dinstall</command></primary>"
msgstr "<primary><command>mini-dinstall</command></primary>"

msgid "The administrators therefore configure a virtual host on their internal HTTP server, with <filename>/srv/vhosts/packages/</filename> as the root of the associated web space. The management of the archive itself is delegated to the <command>mini-dinstall</command> command (in the similarly-named package). This tool keeps an eye on an <filename>incoming/</filename> directory (in our case, <filename>/srv/vhosts/packages/mini-dinstall/incoming/</filename>) and waits for new packages there; when a package is uploaded, it is installed into a Debian archive at <filename>/srv/vhosts/packages/</filename>. The <command>mini-dinstall</command> command reads the <filename>*.changes</filename> file created when the Debian package is generated. These files contain a list of all other files associated with the version of the package (<filename>*.deb</filename>, <filename>*.dsc</filename>, <filename>*.diff.gz</filename>/<filename>*.debian.tar.gz</filename>, <filename>*.orig.tar.gz</filename>, or their equivalents with other compression tools), and these allow <command>mini-dinstall</command> to know which files to install. <filename>*.changes</filename> files also contain the name of the target distribution (often <literal>unstable</literal>) mentioned in the latest <filename>debian/changelog</filename> entry, and <command>mini-dinstall</command> uses this information to decide where the package should be installed. This is why administrators must always change this field before building a package, and set it to <literal>internal</literal> or <literal>updates</literal>, depending on the target location. <command>mini-dinstall</command> then generates the files required by APT, such as <filename>Packages.gz</filename>."
msgstr ""

msgid "<emphasis>ALTERNATIVE</emphasis> <command>apt-ftparchive</command> and <command>reprepro</command>"
msgstr "<emphasis>ALTERNATIV</emphasis> <command>apt-ftparchive</command> och <command>reprepro</command>"

msgid "<primary><command>apt-ftparchive</command></primary>"
msgstr "<primary><command>apt-ftparchive</command></primary>"

msgid "If <command>mini-dinstall</command> seems too complex for your Debian archive needs, you can also use the <command>apt-ftparchive</command> command. This tool scans the contents of a directory and displays (on its standard output) a matching <filename>Packages</filename> file. In the Falcot Corp case, administrators could upload the packages directly into <filename>/srv/vhosts/packages/updates/</filename> or <filename>/srv/vhosts/packages/internal/</filename>, then run the following commands to create the <filename>Packages.gz</filename> files:"
msgstr ""

msgid ""
"\n"
"<computeroutput>$ </computeroutput><userinput>cd /srv/vhosts/packages</userinput>\n"
"<computeroutput>$ </computeroutput><userinput>apt-ftparchive packages updates &gt;updates/Packages</userinput>\n"
"<computeroutput>$ </computeroutput><userinput>gzip updates/Packages</userinput>\n"
"<computeroutput>$ </computeroutput><userinput>apt-ftparchive packages internal &gt;internal/Packages</userinput>\n"
"<computeroutput>$ </computeroutput><userinput>gzip internal/Packages</userinput>"
msgstr ""
"\n"
"<computeroutput>$ </computeroutput><userinput>cd /srv/vhosts/packages</userinput>\n"
"<computeroutput>$ </computeroutput><userinput>apt-ftparchive packages updates &gt;updates/Packages</userinput>\n"
"<computeroutput>$ </computeroutput><userinput>gzip updates/Packages</userinput>\n"
"<computeroutput>$ </computeroutput><userinput>apt-ftparchive packages internal &gt;internal/Packages</userinput>\n"
"<computeroutput>$ </computeroutput><userinput>gzip internal/Packages</userinput>"

msgid "The <command>apt-ftparchive sources</command> command allows creating <filename>Sources.gz</filename> files in a similar fashion."
msgstr "Kommandot <command>apt-ftparchive sources</command> gör det möjligt att skapa <filename>Sources.gz</filename>-filer på ett liknande sätt."

msgid "<command>reprepro</command> is a more advanced tool for the same purpose. It can produce, manage and synchronize a local repository of packages. It stores packages and checksums in a Berkeley DB database file, so no database server is needed. With <command>reprepro</command> you can check signatures of mirrored repositories and create signatures of the generated package indices."
msgstr ""

msgid "Configuring <command>mini-dinstall</command> requires setting up a <filename>~/.mini-dinstall.conf</filename> file; in the Falcot Corp case, the contents are as follows:"
msgstr ""

msgid ""
"\n"
"[DEFAULT]\n"
"archive_style = flat\n"
"archivedir = /srv/vhosts/packages\n"
"\n"
"verify_sigs = 0\n"
"mail_to = admin@falcot.com\n"
"\n"
"generate_release = 1\n"
"release_origin = Falcot Corp\n"
"release_codename = stable\n"
"\n"
"[updates]\n"
"release_label = Recompiled Debian Packages\n"
"\n"
"[internal]\n"
"release_label = Internal Packages"
msgstr ""
"\n"
"[DEFAULT]\n"
"archive_style = flat\n"
"archivedir = /srv/vhosts/packages\n"
"\n"
"verify_sigs = 0\n"
"mail_to = admin@falcot.com\n"
"\n"
"generate_release = 1\n"
"release_origin = Falcot Corp\n"
"release_codename = stable\n"
"\n"
"[updates]\n"
"release_label = Recompiled Debian Packages\n"
"\n"
"[internal]\n"
"release_label = Internal Packages"

msgid "One decision worth noting is the generation of <filename>Release</filename> files for each archive. This can help manage package installation priorities using the <filename>/etc/apt/preferences</filename> configuration file (see <xref linkend=\"sect.apt.priorities\" /> for details)."
msgstr ""

msgid "<emphasis>SECURITY</emphasis> <command>mini-dinstall</command> and permissions"
msgstr "<emphasis>SÄKERHET</emphasis> <command>mini-dinstall</command> och behörigheter"

msgid "Since <command>mini-dinstall</command> has been designed to run as a regular user, there is no need to run it as root. The easiest way is to configure everything within the user account belonging to the administrator in charge of creating the Debian packages. Since only this administrator has the required permissions to put files in the <filename>incoming/</filename> directory, we can deduce that the administrator authenticated the origin of each package prior to deployment and <command>mini-dinstall</command> does not need to do it again. This explains the <literal>verify_sigs = 0</literal> parameter (which means that signatures need not be verified). However, if the contents of packages are sensitive, we can reverse the setting and elect to authenticate with a keyring containing the public keys of persons allowed to create packages (configured with the <literal>extra_keyrings</literal> parameter); <command>mini-dinstall</command> will then check the origin of each incoming package by analyzing the signature integrated to the <filename>*.changes</filename> file."
msgstr ""

msgid "Invoking <command>mini-dinstall</command> actually starts a daemon in the background. As long as this daemon runs, it will check for new packages in the <filename>incoming/</filename> directory every half-hour; when a new package arrives, it will be moved to the archive and the appropriate <filename>Packages.gz</filename> and <filename>Sources.gz</filename> files will be regenerated. If running a daemon is a problem, <command>mini-dinstall</command> can also be manually invoked in batch mode (with the <literal>-b</literal> option) every time a package is uploaded into the <filename>incoming/</filename> directory. Other possibilities provided by <command>mini-dinstall</command> are documented in its <citerefentry><refentrytitle>mini-dinstall</refentrytitle> <manvolnum>1</manvolnum></citerefentry> manual page."
msgstr ""

msgid "<emphasis>EXTRA</emphasis> Generating a signed archive"
msgstr "<emphasis>EXTRA</emphasis> Generera ett signerat arkiv"

msgid "The APT suite checks a chain of cryptographic signatures on the packages it handles before installing them, in order to ensure their authenticity (see <xref linkend=\"sect.package-authentication\" />). Private APT archives can then be a problem, since the machines using them will keep displaying warnings about unsigned packages. A diligent administrator will therefore integrate private archives with the secure APT mechanism."
msgstr ""

msgid "To help with this process, <command>mini-dinstall</command> includes a <literal>release_signscript</literal> configuration option that allows specifying a script to use for generating the signature. A good starting point is the <filename>sign-release.sh</filename> script provided by the <emphasis role=\"pkg\">mini-dinstall</emphasis> package in <filename>/usr/share/doc/mini-dinstall/examples/</filename>; local changes may be relevant."
msgstr ""

msgid "Becoming a Package Maintainer"
msgstr "Att bli paketansvarig"

msgid "Learning to Make Packages"
msgstr "Lär dig att göra paket"

msgid "Creating a quality Debian package is not always a simple task, and becoming a package maintainer takes some learning, both with theory and practice. It is not a simple matter of building and installing software; rather, the bulk of the complexity comes from understanding the problems and conflicts, and more generally the interactions, with the myriad of other packages available."
msgstr ""

msgid "Rules"
msgstr "Regler"

msgid "A Debian package must comply with the precise rules compiled in the Debian policy, and each package maintainer must know them. There is no requirement to know them by heart, but rather to know they exist and to refer to them whenever a choice presents a non-trivial alternative. Every Debian maintainer has made mistakes by not knowing about a rule, but this is not a huge problem as long as the error gets fixed when a user reports it as a bug report (which tends to happen fairly soon thanks to advanced users). The <literal>Standards-Version</literal> field in <filename>debian/control</filename> specifies the version of the Debian policy with which a package complies. Maintainers should comply to the latest version of the Debian policy. <ulink type=\"block\" url=\"https://www.debian.org/doc/debian-policy/\" />"
msgstr ""

msgid "Procedures"
msgstr "Procedurer"

msgid "<primary>Debian Developer's Reference</primary>"
msgstr "<primary>Debians utvecklarreferens</primary>"

msgid "Debian is not a simple collection of individual packages. Everyone's packaging work is part of a collective project; being a Debian developer involves knowing how the Debian project operates as a whole. Every developer will, sooner or later, interact with others. The Debian Developer's Reference (in the <emphasis role=\"pkg\">developers-reference</emphasis> package) summarizes what every developer must know in order to interact as smoothly as possible with the various teams within the project, and to take the best possible advantages of the available resources. This document also enumerates a number of duties a developer is expected to fulfill. <ulink type=\"block\" url=\"https://www.debian.org/doc/manuals/developers-reference/\" />"
msgstr ""

msgid "Tools"
msgstr "Verktyg"

msgid "Many tools help package maintainers in their work. This section describes them quickly, but does not give the full details, since they all have comprehensive documentation of their own."
msgstr ""

msgid "The <command>lintian</command> Program"
msgstr ""

msgid "<primary><command>lintian</command></primary>"
msgstr "<primary><command>lintian</command></primary>"

msgid "This tool is one of the most important: it is the Debian package checker. It is based on a large array of tests created from the Debian policy, and detects quickly and automatically many errors that can then be fixed before packages are released."
msgstr ""

msgid "This tool is only a helper, and it sometimes gets it wrong (for instance, since the Debian policy changes over time, <command>lintian</command> is sometimes outdated). It is also not exhaustive: not getting any Lintian error should not be interpreted as a proof that the package is perfect; at most, it avoids the most common errors."
msgstr ""

msgid "The <command>piuparts</command> Program"
msgstr ""

msgid "<primary><command>piuparts</command></primary>"
msgstr "<primary><command>piuparts</command></primary>"

msgid "This is another important tool: it automates the installation, upgrade, removal and purge of a package (in an isolated environment), and checks that none of these operations leads to an error. It can help in detecting missing dependencies, and it also detects when files are incorrectly left over after the package got purged."
msgstr ""

msgid "devscripts"
msgstr ""

msgid "<primary><emphasis role=\"pkg\">devscripts</emphasis></primary>"
msgstr "<primary><emphasis role=\"pkg\">devscripts</emphasis></primary>"

msgid "<primary><command>debuild</command></primary>"
msgstr "<primary><command>debuild</command></primary>"

msgid "<primary><command>dch</command></primary>"
msgstr "<primary><command>dch</command></primary>"

msgid "<primary><command>uscan</command></primary>"
msgstr "<primary><command>uscan</command></primary>"

msgid "<primary><command>debi</command></primary>"
msgstr "<primary><command>debi</command></primary>"

msgid "<primary><command>debc</command></primary>"
msgstr "<primary><command>debc</command></primary>"

msgid "The <emphasis role=\"pkg\">devscripts</emphasis> package contains many programs helping with a wide array of a Debian developer's job:"
msgstr ""

msgid "<command>debuild</command> allows generating a package (with <command>dpkg-buildpackage</command>) and running <command>lintian</command> to check its compliance with the Debian policy afterwards."
msgstr ""

msgid "<command>debclean</command> cleans a source package after a binary package has been generated."
msgstr "<command>debclean</command> rensar ett källpaket efter att ett binärt paket har genererats."

msgid "<command>dch</command> allows quick and easy editing of a <filename>debian/changelog</filename> file in a source package."
msgstr ""

msgid "<command>uscan</command> checks whether a new version of a software has been released by the upstream author; this requires a <filename>debian/watch</filename> file with a description of the location of such releases."
msgstr ""

msgid "<command>debi</command> allows installing (with <command>dpkg -i</command>) the Debian package that was just generated without the need to type its full name and path."
msgstr ""

msgid "In a similar fashion, <command>debc</command> allows scanning the contents of the recently-generated package (with <command>dpkg -c</command>), without needing to type its full name and path."
msgstr ""

msgid "<command>bts</command> controls the bug tracking system from the command line; this program automatically generates the appropriate emails."
msgstr ""

msgid "<command>debrelease</command> uploads a recently-generated package to a remote server, without needing to type the full name and path of the related <filename>.changes</filename> file."
msgstr ""

msgid "<command>debsign</command> signs the <filename>*.dsc</filename> and <filename>*.changes</filename> files."
msgstr "<command>debsign</command> signerar <filename>*.dsc</filename> och <filename>*.changes</filename> filerna."

msgid "<command>uupdate</command> automates the creation of a new revision of a package when a new upstream version has been released."
msgstr ""

msgid "<emphasis role=\"pkg\">debhelper</emphasis> and <emphasis role=\"pkg\">dh-make</emphasis>"
msgstr "<emphasis role=\"pkg\">debhelper</emphasis> och <emphasis role=\"pkg\">dh-make</emphasis>"

msgid "<primary><emphasis>debhelper</emphasis></primary>"
msgstr "<primary><emphasis>debhelper</emphasis></primary>"

msgid "<primary><emphasis>dh-make</emphasis></primary>"
msgstr "<primary><emphasis>dh-make</emphasis></primary>"

msgid "Debhelper is a set of scripts easing the creation of policy-compliant packages; these scripts are invoked from <filename>debian/rules</filename>. Debhelper has been widely adopted within Debian, as evidenced by the fact that it is used by the majority of official Debian packages. All the commands it contains have a <command>dh_</command> prefix."
msgstr ""

msgid "The <command>dh_make</command> script (in the <emphasis>dh-make</emphasis> package) creates files required for generating a Debian package in a directory initially containing the sources for a piece of software. As can be guessed from the name of the program, the generated files use debhelper by default."
msgstr ""

msgid "<emphasis role=\"pkg\">autopkgtest</emphasis>"
msgstr "<emphasis role=\"pkg\">autopkgtest</emphasis>"

msgid "<primary><emphasis>autopkgtest</emphasis></primary>"
msgstr "<primary><emphasis>autopkgtest</emphasis></primary>"

msgid "<command>autopkgtest</command> runs tests on binary packages, using the tests supplied in the source package."
msgstr "<command>autopkgtest</command> kör tester på binära paket med hjälp av de tester som finns i källkodspaketet."

msgid "<emphasis role=\"pkg\">reprotest</emphasis>"
msgstr "<emphasis role=\"pkg\">reprotest</emphasis>"

msgid "<primary><emphasis>reprotest</emphasis></primary>"
msgstr "<primary><emphasis>reprotest</emphasis></primary>"

msgid "<command>reprotest</command> builds the same source code twice in different environments, and then checks the binaries produced by each build for differences. If any are found, then <command>diffoscope</command> (if unavailable, <command>diff</command>) is used to display them in detail for later analysis."
msgstr ""

msgid "<command>dupload</command> and <command>dput</command>"
msgstr "<command>dupload</command> och <command>dput</command>"

msgid "<primary><command>dupload</command></primary>"
msgstr "<primary><command>dupload</command></primary>"

msgid "<primary><command>dput</command></primary>"
msgstr "<primary><command>dput</command></primary>"

msgid "The <command>dupload</command> and <command>dput</command> commands allow uploading a Debian package to a (possibly remote) server. This allows developers to publish their package on the main Debian server (<literal>ftp-master.debian.org</literal>) so that it can be integrated to the archive and distributed by mirrors. These commands take a <filename>*.changes</filename> file as a parameter, and deduce the other relevant files from its contents."
msgstr ""

msgid "Acceptance Process"
msgstr "Godkännandeprocess"

msgid "Becoming a “Debian developer” is not a simple administrative matter. The process comprises several steps, and is as much an initiation as it is a selection process. In any case, it is formalized and well-documented, so anyone can track their progression on the website dedicated to the new member process. <ulink type=\"block\" url=\"https://nm.debian.org/\" />"
msgstr ""

msgid "<emphasis>EXTRA</emphasis> Lightweight process for “Debian Maintainers”"
msgstr ""

msgid "“Debian Maintainer” is another status that gives less privileges than “Debian developer” but whose associated process is quicker. With this status, the contributors can maintain their own packages only. A Debian developer only needs to perform a check on an initial upload, and issue a statement to the effect that they trust the prospective maintainer with the ability to maintain the package on their own."
msgstr ""

msgid "<primary>Debian Maintainer</primary>"
msgstr ""

msgid "Prerequisites"
msgstr ""

msgid "All candidates are expected to have at least a working knowledge of the English language. This is required at all levels: for the initial communications with the examiner, of course, but also later, since English is the preferred language for most of the documentation; also, package users will be communicating in English when reporting bugs, and they will expect replies in English."
msgstr ""

msgid "The other prerequisite deals with motivation. Becoming a Debian developer is a process that only makes sense if the candidate knows that their interest in Debian will last for many months. The acceptance process itself may last for several months, and Debian needs developers for the long haul; each package needs permanent maintenance, and not just an initial upload."
msgstr ""

msgid "Registration"
msgstr "Registrering"

msgid "The first (real) step consists in finding a sponsor or advocate; this means an official developer willing to state that they believe that accepting <emphasis>X</emphasis> would be a good thing for Debian. This usually implies that the candidate has already been active within the community, and that their work has been appreciated. If the candidate is shy and their work is not publicly touted, they can try to convince a Debian developer to advocate them by showing their work in a private way."
msgstr ""

msgid "<primary>key pair</primary>"
msgstr "<primary>nyckel par</primary>"

msgid "At the same time, the candidate must generate a public/private RSA key pair with GnuPG, which should be signed by at least two official Debian developers. The signature authenticates the name on the key. Effectively, during a key signing party, each participant must show an official identification (usually an ID card or passport) together with their key identifiers. This step confirms the link between the human and the keys. This signature thus requires meeting in real life. If you have not yet met any Debian developers in a public free software conference, you can explicitly seek developers living nearby using the list on the following webpage as a starting point. <ulink type=\"block\" url=\"https://wiki.debian.org/Keysigning\" />"
msgstr ""

msgid "Once the registration on <literal>nm.debian.org</literal> has been validated by the advocate, an <emphasis>Application Manager</emphasis> is assigned to the candidate. The application manager will then drive the process through multiple pre-defined steps and checks."
msgstr ""

msgid "The first verification is an identity check. If you already have a key signed by two Debian developers, this step is easy; otherwise, the application manager will try and guide you in your search for Debian developers close by to organize a meet-up and a key signing."
msgstr ""

msgid "Accepting the Principles"
msgstr "Godkännande av principerna"

msgid "These administrative formalities are followed by philosophical considerations. The point is to make sure that the candidate understands and accepts the social contract and the principles behind Free Software. Joining Debian is only possible if one shares the values that unite the current developers, as expressed in the founding texts (and summarized in <xref linkend=\"the-debian-project\" />)."
msgstr ""

msgid "In addition, each candidate wishing to join the Debian ranks is expected to know the workings of the project, and how to interact appropriately to solve the problems they will doubtless encounter as time passes. All of this information is generally documented in manuals targeting the new maintainers, and in the Debian developer's reference. An attentive reading of this document should be enough to answer the examiner's questions. If the answers are not satisfactory, the candidate will be informed. They will then have to read (again) the relevant documentation before trying again. In the cases where the existing documentation does not contain the appropriate answer for the question, the candidate can usually reach an answer with some practical experience within Debian, or potentially by discussing with other Debian developers. This mechanism ensures that candidates get involved somewhat in Debian before becoming a full part of it. It is a deliberate policy, by which candidates who eventually join the project are integrated as another piece of an infinitely extensible jigsaw puzzle."
msgstr ""

msgid "<primary><emphasis>Philosophy &amp; Procedures</emphasis></primary>"
msgstr ""

msgid "This step is usually known as the <emphasis>Philosophy &amp; Procedures</emphasis> (P&amp;P for short) in the lingo of the developers involved in the new member process."
msgstr ""

msgid "Checking Skills"
msgstr "Kontroll av färdigheter"

msgid "Each application to become an official Debian developer must be justified. Becoming a project member requires showing that this status is legitimate, and that it facilitates the candidate's job in helping Debian. The most common justification is that being granted Debian developer status eases maintenance of a Debian package, but it is not the only one. Some developers join the project to contribute to porting to a specific architecture, others want to improve documentation, and so on."
msgstr ""

msgid "This step represents the opportunity for the candidate to state what they intend to do within the Debian project and to show what they have already done towards that end. Debian is a pragmatic project and saying something is not enough, if the actions do not match what is announced. Generally, when the intended role within the project is related to package maintenance, a first version of the prospective package will have to be validated technically and uploaded to the Debian servers by a sponsor among the existing Debian developers."
msgstr ""

msgid "<emphasis>COMMUNITY</emphasis> Sponsoring"
msgstr "<emphasis>GEMENSKAP</emphasis> Sponsring"

msgid "<primary>sponsoring</primary>"
msgstr "<primary>sponsring</primary>"

msgid "Debian developers can “sponsor” packages prepared by someone else, meaning that they publish them in the official Debian repositories after having performed a careful review. This mechanism enables external persons, who have not yet gone through the new member process, to contribute occasionally to the project. At the same time, it ensures that all packages included in Debian have always been checked by an official member."
msgstr ""

msgid "Finally, the examiner checks the candidate's technical (packaging) skills with a detailed questionnaire. Bad answers are not permitted, but the answer time is not limited. All the documentation is available and several tries are allowed if the first answers are not satisfactory. This step does not intend to discriminate, but to ensure at least a modicum of knowledge common to new contributors."
msgstr ""

msgid "<primary><emphasis>Tasks &amp; Skills</emphasis></primary>"
msgstr "<primary><emphasis>Uppgifter &amp; Färdigheter</emphasis></primary>"

msgid "This step is known as the <emphasis>Tasks &amp; Skills</emphasis> step (T&amp;S for short) in the examiners' jargon."
msgstr ""

msgid "Final Approval"
msgstr "Slutgiltigt godkännande"

msgid "At the very last step, the whole process is reviewed by a DAM (<emphasis>Debian Account Manager</emphasis>). The DAM will review all the information about the candidate that the examiner collected, and makes the decision on whether or not to create an account on the Debian servers. In cases where extra information is required, the account creation may be delayed. Refusals are rather rare if the examiner does a good job of following the process, but they sometimes happen. They are never permanent, and the candidate is free to try again at a later time."
msgstr ""

msgid "The DAM's decision is authoritative and (almost) without appeal, which explains why the people in that seat have often been criticized in the past."
msgstr ""

#~ msgid "<emphasis>QUICK LOOK</emphasis> <command>pbuilder</command>"
#~ msgstr "<emphasis>SNABB TITT</emphasis> <command>pbuilder</command>"

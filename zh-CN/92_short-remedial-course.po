#
# Helight Xu <helight.xu@gmail.com>, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: 0\n"
"POT-Creation-Date: 2022-07-30 18:23+0200\n"
"PO-Revision-Date: 2021-07-22 04:32+0000\n"
"Last-Translator: xiao sheng wen(肖盛文) <atzlinux@sina.com>\n"
"Language-Team: Chinese (Simplified) <https://hosted.weblate.org/projects/debian-handbook/92_short-remedial-course/zh_Hans/>\n"
"Language: zh-CN\n"
"MIME-Version: 1.0\n"
"Content-Type: application/x-publican; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.7.2-dev\n"

msgid "BIOS"
msgstr "BIOS"

msgid "Kernel"
msgstr "内核"

msgid "Unix"
msgstr "Unix"

msgid "Process"
msgstr "进程"

msgid "Hierarchy"
msgstr "层级结构"

msgid "Basic Commands"
msgstr "基本命令"

msgid "Short Remedial Course"
msgstr "简短辅导课程"

msgid "Even though this book primarily targets administrators and “power-users”, we wouldn't like to exclude motivated beginners. This appendix will therefore be a crash-course describing the fundamental concepts involved in handling a Unix computer."
msgstr "尽管这本书的主要目标用户是管理员和高级用户，但是我们也不想忽视初学者。这篇附录是一篇讲述操作Unix 计算机基础内容。"

msgid "Shell and Basic Commands"
msgstr "Shell 和基本命令"

msgid "In the Unix world, every administrator has to use the command line sooner or later; for example, when the system fails to start properly and only provides a command-line rescue mode. Being able to handle such an interface, therefore, is a basic survival skill for these circumstances."
msgstr "在Uinx 世界中，每一个管理员迟早都要使用命令行；例如，当系统可能启动失败后只给了一个命令行恢复模式。所以在这样的环境种能够使用命令行是一种基本的生存技能。"

msgid "<emphasis>QUICK LOOK</emphasis> Starting the command interpreter"
msgstr "<emphasis>速览</emphasis>启动命令解释器"

#, fuzzy
#| msgid "A command-line environment can be run from the graphical desktop, by an application known as a “terminal”. In GNOME, you can start it from the “Activities” overview (that you get when you move the mouse in the top-left corner of the screen) by typing the first letters of the application name. In Plasma, you will find it in the <menuchoice><guimenu>K</guimenu> <guisubmenu>Applications</guisubmenu> <guisubmenu>System</guisubmenu></menuchoice> menu."
msgid "A command-line environment can be run from the graphical desktop, by an application known as a “terminal”. In GNOME, you can start it from the “Activities” overview (that you get when you move the mouse in the top-left corner of the screen) by typing the first letters of the application name. In Plasma (and many other desktop variants), you will find it in the applications menu <menuchoice><guisubmenu>Applications</guisubmenu> <guisubmenu>System</guisubmenu></menuchoice> menu."
msgstr "一个命令行环境可以从图形桌面开始运行，使用被称为“终端”的应用程序。在GNOME中，你可以从“活动”概览（即你将鼠标光标移动到屏幕左上角所得到的环境）中启动它，只需要键入应用程序名的前几个字符即可。在 Plasma 桌面环境中，你可以在<menuchoice><guimenu>K</guimenu><guisubmenu>应用程序</guisubmenu><guisubmenu>系统</guisubmenu></menuchoice>菜单中找到。"

msgid "This section only gives a quick peek at the commands. They all have many options not described here, so please refer to the abundant documentation in their respective manual pages."
msgstr "这一部分只会展示各个命令的简单用法，它们还有许多此处尚未描述的可用选项。请阅读它们对应的手册页，其中详细的文档可供你参考。"

msgid "Browsing the Directory Tree and Managing Files"
msgstr "浏览目录与管理文件"

#, fuzzy
#| msgid "<primary><command>mkfs</command></primary>"
msgid "<primary><command>pwd</command></primary>"
msgstr "<primary><command>mkfs</command></primary>"

#, fuzzy
#| msgid "<primary><command>mkfs</command></primary>"
msgid "<primary><command>cd</command></primary>"
msgstr "<primary><command>mkfs</command></primary>"

#, fuzzy
#| msgid "<primary><filename>/bin</filename></primary>"
msgid "<primary><literal>.</literal></primary>"
msgstr "<primary><filename>/bin</filename></primary>"

#, fuzzy
#| msgid "<primary><filename>/bin</filename></primary>"
msgid "<primary><literal>..</literal></primary>"
msgstr "<primary><filename>/bin</filename></primary>"

msgid "Once a session is open, the <command>pwd</command> command (which stands for <emphasis>print working directory</emphasis>) displays the current location in the filesystem. The current directory is changed with the <command>cd <replaceable>directory</replaceable></command> command (<command>cd</command> is for <emphasis>change directory</emphasis>). The parent directory is always called <literal>..</literal> (two dots), whereas the current directory is also known as <literal>.</literal> (one dot). The <command>ls</command> command allows <emphasis>listing</emphasis> the contents of a directory. If no parameters are given, it operates on the current directory."
msgstr "打开会话之后，<command>pwd</command> 命令（<emphasis>print working directory</emphasis>）会显示当前位置。当前目录可以通过 <command>cd <replaceable>目录</replaceable></command>命令（<command>cd</command>即<emphasis>change directory</emphasis>）。上级目录叫<literal>..</literal>（两个点），当前目录为<literal>.</literal>（一个点）。<command>ls</command> 命令会<emphasis>列举</emphasis>目录中的内容，若没有参数，则其将对当前目录进行操作。"

#, fuzzy
#| msgid ""
#| "\n"
#| "<computeroutput>$ </computeroutput><userinput>pwd</userinput>\n"
#| "<computeroutput>/home/rhertzog\n"
#| "$ </computeroutput><userinput>cd Desktop</userinput>\n"
#| "<computeroutput>$ </computeroutput><userinput>pwd</userinput>\n"
#| "<computeroutput>/home/rhertzog/Desktop\n"
#| "$ </computeroutput><userinput>cd .</userinput>\n"
#| "<computeroutput>$ </computeroutput><userinput>pwd</userinput>\n"
#| "<computeroutput>/home/rhertzog/Desktop\n"
#| "$ </computeroutput><userinput>cd ..</userinput>\n"
#| "<computeroutput>$ </computeroutput><userinput>pwd</userinput>\n"
#| "<computeroutput>/home/rhertzog\n"
#| "$ </computeroutput><userinput>ls</userinput>\n"
#| "<computeroutput>Desktop    Downloads  Pictures  Templates\n"
#| "Documents  Music      Public    Videos</computeroutput>\n"
#| "      "
msgid ""
"\n"
"<computeroutput>$ </computeroutput><userinput>pwd\n"
"</userinput><computeroutput>/home/rhertzog\n"
"$ </computeroutput><userinput>cd Desktop\n"
"</userinput><computeroutput>$ </computeroutput><userinput>pwd\n"
"</userinput><computeroutput>/home/rhertzog/Desktop\n"
"$ </computeroutput><userinput>cd .\n"
"</userinput><computeroutput>$ </computeroutput><userinput>pwd\n"
"</userinput><computeroutput>/home/rhertzog/Desktop\n"
"$ </computeroutput><userinput>cd ..</userinput>\n"
"<computeroutput>$ </computeroutput><userinput>pwd\n"
"</userinput><computeroutput>/home/rhertzog\n"
"$ </computeroutput><userinput>ls\n"
"</userinput><computeroutput>Desktop    Downloads  Pictures  Templates\n"
"Documents  Music      Public    Videos\n"
"</computeroutput>"
msgstr ""
"\n"
"<computeroutput>$ </computeroutput><userinput>pwd</userinput>\n"
"<computeroutput>/home/rhertzog\n"
"$ </computeroutput><userinput>cd 桌面</userinput>\n"
"<computeroutput>$ </computeroutput><userinput>pwd</userinput>\n"
"<computeroutput>/home/rhertzog/桌面\n"
"$ </computeroutput><userinput>cd .</userinput>\n"
"<computeroutput>$ </computeroutput><userinput>pwd</userinput>\n"
"<computeroutput>/home/rhertzog/桌面\n"
"$ </computeroutput><userinput>cd ..</userinput>\n"
"<computeroutput>$ </computeroutput><userinput>pwd</userinput>\n"
"<computeroutput>/home/rhertzog\n"
"$ </computeroutput><userinput>ls</userinput>\n"
"<computeroutput>桌面  下载  图片  模板  \n"
"文档  音乐  公共  视频</computeroutput>\n"
"      "

#, fuzzy
#| msgid "<primary><command>mkfs</command></primary>"
msgid "<primary><command>mkdir</command></primary>"
msgstr "<primary><command>mkfs</command></primary>"

#, fuzzy
#| msgid "<primary><command>mkfs</command></primary>"
msgid "<primary><command>rmdir</command></primary>"
msgstr "<primary><command>mkfs</command></primary>"

#, fuzzy
#| msgid "<primary><command>mkfs</command></primary>"
msgid "<primary><command>mv</command></primary>"
msgstr "<primary><command>mkfs</command></primary>"

#, fuzzy
#| msgid "<primary><command>mkfs</command></primary>"
msgid "<primary><command>rm</command></primary>"
msgstr "<primary><command>mkfs</command></primary>"

msgid "A new directory can be created with <command>mkdir <replaceable>directory</replaceable></command>, and an existing (empty) directory can be removed with <command>rmdir <replaceable>directory</replaceable></command>. The <command>mv</command> command allows <emphasis>moving</emphasis> and/or renaming files and directories; <emphasis>removing</emphasis> a file is achieved with <command>rm <replaceable>file</replaceable></command>."
msgstr "您可以使用 <command>mkdir <replaceable>目录名</replaceable></command> 命令创建一个新的目录，且可以使用 <command>rmdir <replaceable>目录名</replaceable></command> 命令删除一个已存在的（空的）目录。<command>mv</command> 命令可以<emphasis>移动</emphasis>和/或重命名文件和目录；<emphasis>删除</emphasis>一个文件可以使用 <command>rm <replaceable>文件名</replaceable></command> 命令来完成。"

#, fuzzy
#| msgid ""
#| "\n"
#| "<computeroutput>$ </computeroutput><userinput>mkdir test</userinput>\n"
#| "<computeroutput>$ </computeroutput><userinput>ls</userinput>\n"
#| "<computeroutput>Desktop    Downloads  Pictures  Templates  Videos\n"
#| "Documents  Music      Public    test\n"
#| "$ </computeroutput><userinput>mv test new</userinput>\n"
#| "<computeroutput>$ </computeroutput><userinput>ls</userinput>\n"
#| "<computeroutput>Desktop    Downloads  new       Public     Videos\n"
#| "Documents  Music      Pictures  Templates\n"
#| "$ </computeroutput><userinput>rmdir new</userinput>\n"
#| "<computeroutput>$ </computeroutput><userinput>ls</userinput>\n"
#| "<computeroutput>Desktop    Downloads  Pictures  Templates  Videos\n"
#| "Documents  Music      Public</computeroutput>\n"
#| "      "
msgid ""
"\n"
"<computeroutput>$ </computeroutput><userinput>mkdir test\n"
"</userinput><computeroutput>$ </computeroutput><userinput>ls\n"
"</userinput><computeroutput>Desktop    Downloads  Pictures  Templates  Videos\n"
"Documents  Music      Public    test\n"
"$ </computeroutput><userinput>mv test new\n"
"</userinput><computeroutput>$ </computeroutput><userinput>ls\n"
"</userinput><computeroutput>Desktop    Downloads  new       Public     Videos\n"
"Documents  Music      Pictures  Templates\n"
"$ </computeroutput><userinput>rmdir new\n"
"</userinput><computeroutput>$ </computeroutput><userinput>ls\n"
"</userinput><computeroutput>Desktop    Downloads  Pictures  Templates  Videos\n"
"Documents  Music      Public</computeroutput>\n"
"      "
msgstr ""
"\n"
"<computeroutput>$ </computeroutput><userinput>mkdir test</userinput>\n"
"<computeroutput>$ </computeroutput><userinput>ls</userinput>\n"
"<computeroutput>桌面    下载  图片  模板  视频\n"
"文档  音乐      公共    test\n"
"$ </computeroutput><userinput>mv test new</userinput>\n"
"<computeroutput>$ </computeroutput><userinput>ls</userinput>\n"
"<computeroutput>桌面   下载  new       公共     视频\n"
"文档  音乐      图片  模板\n"
"$ </computeroutput><userinput>rmdir new</userinput>\n"
"<computeroutput>$ </computeroutput><userinput>ls</userinput>\n"
"<computeroutput>桌面    下载  图片  模板  视频\n"
"文档  音乐      公共</computeroutput>\n"
"      "

msgid "Displaying and Modifying Text Files"
msgstr "显示和修改文本文件"

#, fuzzy
#| msgid "<primary><command>init</command></primary>"
msgid "<primary><command>cat</command></primary>"
msgstr "<primary><command>init</command></primary>"

#, fuzzy
#| msgid "<primary><command>mkfs</command></primary>"
msgid "<primary><command>less</command></primary>"
msgstr "<primary><command>mkfs</command></primary>"

#, fuzzy
#| msgid "<primary><command>mkfs</command></primary>"
msgid "<primary><command>more</command></primary>"
msgstr "<primary><command>mkfs</command></primary>"

#, fuzzy
#| msgid "<primary>daemon</primary>"
msgid "<primary>pager</primary>"
msgstr "<primary>后台守护进程（daemon）</primary>"

msgid "The <command>cat <replaceable>file</replaceable></command> command (intended to <emphasis>concatenate</emphasis> files to the standard output device) reads a file and displays its contents on the terminal. If the file is too big to fit on a screen, use a pager such as <command>less</command> (or <command>more</command>) to display it page by page."
msgstr "<command>cat <replaceable>文件名</replaceable></command>命令（用于<emphasis>连接（concatenate）</emphasis>文件并将内容送至标准输出设备）读取文件并将其内容显示在终端上。如果文件过大而不适合屏幕显示的话，可以使用一个分页器进行辅助，例如<command>less</command>（或者<command>more</command>）以按页在屏幕上显示内容。"

#, fuzzy
#| msgid "<primary><command>init</command></primary>"
msgid "<primary><command>editor</command></primary>"
msgstr "<primary><command>init</command></primary>"

#, fuzzy
#| msgid "<primary><command>init</command></primary>"
msgid "<primary><command>vi</command></primary>"
msgstr "<primary><command>init</command></primary>"

#, fuzzy
#| msgid "<primary><command>init</command></primary>"
msgid "<primary><command>nano</command></primary>"
msgstr "<primary><command>init</command></primary>"

#, fuzzy
#| msgid "<primary><command>mkfs</command></primary>"
msgid "<primary><command>echo</command></primary>"
msgstr "<primary><command>mkfs</command></primary>"

#, fuzzy
#| msgid "<primary>daemon</primary>"
msgid "<primary>redirection</primary>"
msgstr "<primary>后台守护进程（daemon）</primary>"

msgid "<primary><literal>&gt;</literal></primary><see>redirection</see>"
msgstr ""

msgid "The <command>editor</command> command starts a text editor (such as <command>vi</command> or <command>nano</command>) and allows creating, modifying and reading text files. The simplest files can sometimes be created directly from the command interpreter thanks to redirection: <command>echo \"<replaceable>text</replaceable>\" &gt;<replaceable>file</replaceable></command> creates a file named <replaceable>file</replaceable> with “<replaceable>text</replaceable>” as its contents. Adding a line at the end of this file is possible too, with a command such as <command>echo \"<replaceable>moretext</replaceable>\" &gt;&gt;<replaceable>file</replaceable></command>. Note the <literal>&gt;&gt;</literal> in this example."
msgstr "命令 <command>editor</command> 会启动一个文本编辑器 (比如 <command>vi</command> 或者 <command>nano</command>)，并允许创建、修改 和读取文本文本。通过重定向，普通的文件可以直接被这些命令创建： <command>echo \"<replaceable>text</replaceable>\" &gt; <replaceable>file</replaceable></command> 会创建一个名为 <replaceable>file</replaceable> 的文件，内容为 “<replaceable>text</replaceable>”。也可以通过 <command>echo \"<replaceable>更多内容</replaceable>\" &gt;&gt; <replaceable>file</replaceable></command> 在该文件末尾追加一行。注意本例中的 <literal>&gt;&gt;</literal>。"

msgid "Searching for Files and within Files"
msgstr "搜索文件和在文件中搜索"

#, fuzzy
#| msgid "<primary><command>init</command></primary>"
msgid "<primary><command>find</command></primary>"
msgstr "<primary><command>init</command></primary>"

#, fuzzy
#| msgid "<primary><command>mkfs</command></primary>"
msgid "<primary><command>grep</command></primary>"
msgstr "<primary><command>mkfs</command></primary>"

msgid "The <command>find <replaceable>directory</replaceable> <replaceable>criteria</replaceable></command> command looks for files in the hierarchy under <replaceable>directory</replaceable> according to several criteria. The most commonly used criterion is <literal>-name <replaceable>name</replaceable></literal>: that allows looking for a file by its name."
msgstr "<command>find <replaceable>directory</replaceable> <replaceable>条件</replaceable></command> 命令用于在 <replaceable>directory</replaceable> 目录下根据给定的 “条件” 搜索文件。最常用的条件是: <literal>-name <replaceable>文件名</replaceable></literal>，将设定 find 以文件名作为条件查找文件。"

msgid "The <command>grep <replaceable>expression</replaceable> <replaceable>files</replaceable></command> command searches the contents of the files and extracts the lines matching the regular expression (see sidebar <xref linkend=\"sidebar.regexp\" />). Adding the <literal>-r</literal> option enables a recursive search on all files contained in the directory passed as a parameter. This allows looking for a file when only a part of the contents are known."
msgstr ""

msgid "Managing Processes"
msgstr "管理进程"

#, fuzzy
#| msgid "<primary><command>mkfs</command></primary>"
msgid "<primary><command>ps</command></primary>"
msgstr "<primary><command>mkfs</command></primary>"

msgid "<primary>process</primary><secondary>ID</secondary><see><emphasis>pid</emphasis></see>"
msgstr ""

msgid "<primary><emphasis>pid</emphasis></primary>"
msgstr "<primary><emphasis>pid</emphasis></primary>"

#, fuzzy
#| msgid "<primary><command>mkfs</command></primary>"
msgid "<primary><command>kill</command></primary>"
msgstr "<primary><command>mkfs</command></primary>"

#, fuzzy
#| msgid "<primary>Serial ATA</primary>"
msgid "<primary>signal</primary>"
msgstr "<primary>串行 ATA</primary>"

#, fuzzy
#| msgid "<primary><filename>/bin</filename></primary>"
msgid "<primary><literal>TERM</literal></primary>"
msgstr "<primary><filename>/bin</filename></primary>"

#, fuzzy
#| msgid "<primary><filename>/bin</filename></primary>"
msgid "<primary><literal>KILL</literal></primary>"
msgstr "<primary><filename>/bin</filename></primary>"

msgid "The <command>ps aux</command> command lists the processes currently running and helps identifying them by showing their <emphasis>pid</emphasis> (process id). Once the <emphasis>pid</emphasis> of a process is known, the <command>kill -<replaceable>signal</replaceable> <replaceable>pid</replaceable></command> command allows sending it a signal (if the process belongs to the current user). Several signals exist; most commonly used are <literal>TERM</literal> (a request to terminate gracefully) and <literal>KILL</literal> (a forced kill)."
msgstr ""

#, fuzzy
#| msgid "<primary>daemon</primary>"
msgid "<primary>background task</primary>"
msgstr "<primary>后台守护进程（daemon）</primary>"

#, fuzzy
#| msgid "<primary><command>mkfs</command></primary>"
msgid "<primary><command>jobs</command></primary>"
msgstr "<primary><command>mkfs</command></primary>"

#, fuzzy
#| msgid "<primary><command>mkfs</command></primary>"
msgid "<primary><command>fg</command></primary>"
msgstr "<primary><command>mkfs</command></primary>"

#, fuzzy
#| msgid "<primary><command>mkfs</command></primary>"
msgid "<primary><command>bg</command></primary>"
msgstr "<primary><command>mkfs</command></primary>"

msgid "The command interpreter can also run programs in the background if the command is followed by a “&amp;”. By using the ampersand, the user resumes control of the shell immediately even though the command is still running (hidden from the user; as a background process). The <command>jobs</command> command lists the processes running in the background; running <command>fg %<replaceable>job-number</replaceable></command> (for <emphasis>foreground</emphasis>) restores a job to the foreground. When a command is running in the foreground (either because it was started normally, or brought back to the foreground with <command>fg</command>), the <keycombo action=\"simul\"><keycap>Control</keycap><keycap>Z</keycap></keycombo> key combination pauses the process and resumes control of the command-line. The process can then be restarted in the background with <command>bg %<replaceable>job-number</replaceable></command> (for <foreignphrase>background</foreignphrase>)."
msgstr ""

msgid "System Information: Memory, Disk Space, Identity"
msgstr "系统信息：内存、磁盘空间、身份信息"

#, fuzzy
#| msgid "<primary><command>mkfs</command></primary>"
msgid "<primary><command>free</command></primary>"
msgstr "<primary><command>mkfs</command></primary>"

#, fuzzy
#| msgid "<primary><command>mkfs</command></primary>"
msgid "<primary><command>df</command></primary>"
msgstr "<primary><command>mkfs</command></primary>"

#, fuzzy
#| msgid "<primary>daemon</primary>"
msgid "<primary>human readable</primary>"
msgstr "<primary>后台守护进程（daemon）</primary>"

msgid "The <command>free</command> command displays information on memory; <command>df</command> (<emphasis>disk free</emphasis>) reports on the available disk space on each of the disks mounted in the filesystem. Its <literal>-h</literal> option (for <emphasis>human readable</emphasis>) converts the sizes into a more legible unit (usually mebibytes or gibibytes). In a similar fashion, the <command>free</command> command supports the <literal>-m</literal> and <literal>-g</literal> options, and displays its data either in mebibytes or in gibibytes, respectively."
msgstr ""

msgid ""
"\n"
"<computeroutput>$ </computeroutput><userinput>free</userinput>\n"
"<computeroutput>              total        used        free      shared  buff/cache   available\n"
"Mem:       16279260     5910248      523432      871036     9845580     9128964\n"
"Swap:      16601084      240640    16360444\n"
"$ </computeroutput><userinput>df</userinput><computeroutput>\n"
"Filesystem                1K-blocks      Used Available Use% Mounted on\n"
"udev                        8108516         0   8108516   0% /dev\n"
"tmpfs                       1627928    161800   1466128  10% /run\n"
"/dev/mapper/vg_main-root  466644576 451332520  12919912  98% /\n"
"tmpfs                       8139628    146796   7992832   2% /dev/shm\n"
"tmpfs                          5120         4      5116   1% /run/lock\n"
"tmpfs                       8139628         0   8139628   0% /sys/fs/cgroup\n"
"/dev/sda1                    523248      1676    521572   1% /boot/efi\n"
"tmpfs                       1627924        88   1627836   1% /run/user/1000\n"
"</computeroutput>"
msgstr ""

#, fuzzy
#| msgid "<primary><command>init</command></primary>"
msgid "<primary><command>id</command></primary>"
msgstr "<primary><command>init</command></primary>"

msgid "The <command>id</command> command displays the identity of the user running the session, along with the list of groups they belong to. Since access to some files or devices may be limited to group members, checking available group membership may be useful."
msgstr ""

msgid ""
"\n"
"<computeroutput>$ </computeroutput><userinput>id</userinput>\n"
"<computeroutput>uid=1000(rhertzog) gid=1000(rhertzog) groups=1000(rhertzog),24(cdrom),25(floppy),27(sudo),29(audio),30(dip),44(video),46(plugdev),108(netdev),109(bluetooth),115(scanner)</computeroutput>\n"
"      "
msgstr ""
"\n"
"<computeroutput>$ </computeroutput><userinput>id</userinput>\n"
"<computeroutput>uid=1000(rhertzog) gid=1000(rhertzog) groups=1000(rhertzog),24(cdrom),25(floppy),27(sudo),29(audio),30(dip),44(video),46(plugdev),108(netdev),109(bluetooth),115(scanner)</computeroutput>\n"
"      "

msgid "Organization of the Filesystem Hierarchy"
msgstr "文件系统层次结构的组织"

msgid "<primary>Filesystem Hierarchy</primary>"
msgstr "<primary>文件系统层次结构</primary>"

msgid "The Root Directory"
msgstr "根目录"

msgid "<primary><filename>/bin</filename></primary>"
msgstr "<primary><filename>/bin</filename></primary>"

msgid "<primary><filename>/boot</filename></primary>"
msgstr "<primary><filename>/boot</filename></primary>"

msgid "<primary><filename>/dev</filename></primary>"
msgstr "<primary><filename>/dev</filename></primary>"

msgid "<primary><filename>/etc</filename></primary>"
msgstr "<primary><filename>/etc</filename></primary>"

msgid "<primary><filename>/home</filename></primary>"
msgstr "<primary><filename>/home</filename></primary>"

msgid "<primary><filename>/lib</filename></primary>"
msgstr "<primary><filename>/lib</filename></primary>"

msgid "<primary><filename>/media</filename></primary>"
msgstr "<primary><filename>/media</filename></primary>"

msgid "<primary><filename>/mnt</filename></primary>"
msgstr "<primary><filename>/mnt</filename></primary>"

msgid "<primary><filename>/opt</filename></primary>"
msgstr "<primary><filename>/opt</filename></primary>"

msgid "<primary><filename>/root</filename></primary>"
msgstr "<primary><filename>/root</filename></primary>"

msgid "<primary><filename>/run</filename></primary>"
msgstr "<primary><filename>/run</filename></primary>"

msgid "<primary><filename>/sbin</filename></primary>"
msgstr "<primary><filename>/sbin</filename></primary>"

msgid "<primary><filename>/srv</filename></primary>"
msgstr "<primary><filename>/srv</filename></primary>"

msgid "<primary><filename>/tmp</filename></primary>"
msgstr "<primary><filename>/tmp</filename></primary>"

msgid "<primary><filename>/usr</filename></primary>"
msgstr "<primary><filename>/usr</filename></primary>"

msgid "<primary><filename>/var</filename></primary>"
msgstr "<primary><filename>/var</filename></primary>"

msgid "<primary><filename>/proc</filename></primary>"
msgstr "<primary><filename>/proc</filename></primary>"

msgid "<primary><filename>/sys</filename></primary>"
msgstr "<primary><filename>/sys</filename></primary>"

msgid "A Debian system is organized along the <emphasis>Filesystem Hierarchy Standard</emphasis> (FHS). This standard defines the purpose of each directory. For instance, the top-level directories are described as follows:"
msgstr ""

msgid "<filename>/bin/</filename>: basic programs;"
msgstr "<filename>/bin/</filename>：基本程序;"

msgid "<filename>/boot/</filename>: Linux kernel and other files required for its early boot process;"
msgstr "<filename>/boot/</filename>: Linux 内核和在早期启动流程中需要的其它文件;"

msgid "<filename>/dev/</filename>: device files;"
msgstr "<filename>/dev/</filename>: 设备文件;"

msgid "<filename>/etc/</filename>: configuration files;"
msgstr "<filename>/etc/</filename>: 配置文件;"

msgid "<primary>account</primary><secondary>home directory</secondary>"
msgstr ""

msgid "<filename>/home/</filename>: user's personal files;"
msgstr "<filename>/home/</filename>: 用户个人文件;"

msgid "<filename>/lib/</filename>: basic libraries;"
msgstr "<filename>/lib/</filename>:基础库;"

msgid "<filename>/media/*</filename>: mount points for removable devices (CD-ROM, USB keys and so on);"
msgstr "<filename>/media/*</filename>: 可移动设备挂载点 (CD-ROM, U 盘等等);"

msgid "<filename>/mnt/</filename>: temporary mount point;"
msgstr "<filename>/mnt/</filename>: 临时挂载点;"

msgid "<filename>/opt/</filename>: extra applications provided by third parties;"
msgstr "<filename>/opt/</filename>: 有第三方提供的额外应用程序;"

#, fuzzy
#| msgid "<primary>Secure Boot</primary>"
msgid "<primary>root</primary>"
msgstr "<primary>安全启动</primary>"

msgid "<filename>/root/</filename>: administrator's (root's) personal files;"
msgstr "<filename>/root/</filename>: 管理员（root）的个人文件;"

msgid "<filename>/run/</filename>: volatile runtime data that does not persist across reboots;"
msgstr "<filename>/run/</filename>: 易失性数据，在重启后不会存在;"

msgid "<filename>/sbin/</filename>: system programs;"
msgstr "<filename>/sbin/</filename>: 系统程序;"

msgid "<filename>/srv/</filename>: data used by servers hosted on this system;"
msgstr "<filename>/srv/</filename>: 在这个系统上的服务使用的数据 ;"

msgid "<filename>/tmp/</filename>: temporary files; this directory is often emptied at boot;"
msgstr "<filename>/tmp/</filename>: 临时文件；这个目录在启动的时候经常被清空;"

msgid "<filename>/usr/</filename>: applications; this directory is further subdivided into <filename>bin</filename>, <filename>sbin</filename>, <filename>lib</filename> (according to the same logic as in the root directory). Furthermore, <filename>/usr/share/</filename> contains architecture-independent data. <filename>/usr/local/</filename> is meant to be used by the administrator for installing applications manually without overwriting files handled by the packaging system (<command>dpkg</command>)."
msgstr ""

msgid "<primary>daemon</primary>"
msgstr "<primary>后台守护进程（daemon）</primary>"

msgid "<filename>/var/</filename>: variable data handled by daemons. This includes log files, queues, spools, caches and so on."
msgstr ""

msgid "<primary>user</primary><secondary>user space</secondary>"
msgstr ""

msgid "<filename>/proc/</filename> and <filename>/sys/</filename> are specific to the Linux kernel (and not part of the FHS). They are used by the kernel for exporting data to user space (see <xref linkend=\"sect.userspace-presentation\" /> and <xref linkend=\"sect.user-space\" /> for explanations about this concept)."
msgstr ""

msgid "<primary>merged <filename>/usr</filename></primary>"
msgstr "<primary>合并<filename>/usr</filename></primary>"

msgid "Note that many modern distributions, Debian included, are shipping <filename>/bin</filename>, <filename>/sbin</filename> and <filename>/lib</filename> as symlinks to the corresponding directories below <filename>/usr</filename> so that all programs and libraries are available in a single tree. It makes it easier to protect the integrity of the system files, and to share those system files among multiple containers, etc."
msgstr ""

msgid "The User's Home Directory"
msgstr "用户主目录"

#, fuzzy
#| msgid "<primary><filename>/bin</filename></primary>"
msgid "<primary><literal>~</literal></primary>"
msgstr "<primary><filename>/bin</filename></primary>"

msgid "The contents of a user's home directory is not standardized, but there are still a few noteworthy conventions. One is that a user's home directory is often referred to by a tilde (“~”). That is useful to know because command interpreters automatically replace a tilde with the correct directory (usually <filename>/home/<replaceable>user</replaceable>/</filename>)."
msgstr ""

msgid "<primary>file</primary><secondary>hidden</secondary>"
msgstr ""

#, fuzzy
#| msgid "<primary>daemon</primary>"
msgid "<primary>directory, hidden</primary>"
msgstr "<primary>后台守护进程（daemon）</primary>"

msgid "Traditionally, application configuration files are often stored directly under the user's home directory, but their names usually start with a dot (for instance, the <command>mutt</command> email client stores its configuration in <filename>~/.muttrc</filename>). Note that filenames that start with a dot are hidden by default; and <command>ls</command> only lists them when the <literal>-a</literal> option is used, and graphical file managers need to be told to display hidden files."
msgstr ""

msgid "Some programs also use multiple configuration files organized in one directory (for instance, <filename>~/.ssh/</filename>). Some applications also use their directory to store a cache of downloaded data. This means that those directories can end up using a lot of disk space."
msgstr ""

msgid "<primary>file</primary><secondary>dotfile</secondary>"
msgstr ""

msgid "These configuration files stored directly in a user's home directory, often collectively referred to as <emphasis>dotfiles</emphasis>, have long proliferated to the point that these directories can be quite cluttered with them. Fortunately, an effort led collectively under the FreeDesktop.org umbrella has resulted in the “XDG Base Directory Specification”, a convention that aims at cleaning up these files and directories. This specification states that configuration files should be stored under <filename>~/.config/</filename>, cache files under <filename>~/.cache/</filename>, and application data files under <filename>~/.local/</filename> (or subdirectories thereof). This convention is slowly gaining traction, and several applications (especially graphical ones) have started following it."
msgstr ""

msgid "Graphical desktops usually display the contents of the <filename>~/Desktop/</filename> directory (or whatever the appropriate translation is for systems not configured in English) on the desktop (i.e. what is visible on screen once all applications are closed or iconized)."
msgstr ""

msgid "Finally, the email system sometimes stores incoming emails into a <filename>~/Mail/</filename> directory."
msgstr ""

msgid "Inner Workings of a Computer: the Different Layers Involved"
msgstr ""

msgid "A computer is often considered as something rather abstract, and the externally visible interface is much simpler than its internal complexity. Such complexity comes in part from the number of pieces involved. However, these pieces can be viewed in layers, where a layer only interacts with those immediately above or below."
msgstr ""

msgid "An end-user can get by without knowing these details… as long as everything works. When confronting a problem such as, “The internet doesn't work!”, the first thing to do is to identify in which layer the problem originates. Is the network card (hardware) working? Is it recognized by the computer? Does the Linux kernel see it? Are the network parameters properly configured? All these questions isolate an appropriate layer and focus on a potential source of the problem."
msgstr ""

msgid "The Deepest Layer: the Hardware"
msgstr ""

#, fuzzy
#| msgid "<primary>daemon</primary>"
msgid "<primary>hardware</primary>"
msgstr "<primary>后台守护进程（daemon）</primary>"

msgid "<primary>IDE</primary>"
msgstr "<primary>IDE</primary>"

msgid "<primary>SCSI</primary>"
msgstr "<primary>SCSI</primary>"

#, fuzzy
#| msgid "<primary>Serial ATA</primary>"
msgid "<primary>Serial ATA</primary><see>SATA</see>"
msgstr "<primary>串行 ATA</primary>"

#, fuzzy
#| msgid "<primary>ATA</primary>"
msgid "<primary>SATA</primary>"
msgstr "<primary>ATA</primary>"

#, fuzzy
#| msgid "<primary>Parallel ATA</primary>"
msgid "<primary>Parallel ATA</primary><see>PATA</see>"
msgstr "<primary>并行 ATA</primary>"

#, fuzzy
#| msgid "<primary>ATA</primary>"
msgid "<primary>PATA</primary>"
msgstr "<primary>ATA</primary>"

msgid "<primary>ATA</primary>"
msgstr "<primary>ATA</primary>"

msgid "<primary>IEEE 1394</primary>"
msgstr "<primary>IEEE 1394</primary>"

msgid "<primary>Firewire</primary>"
msgstr ""

msgid "<primary>USB</primary>"
msgstr "<primary>USB</primary>"

msgid "Let us start with a basic reminder that a computer is, first and foremost, a set of hardware elements. There is generally a main board (known as the <emphasis>motherboard</emphasis>), with one (or more) processor(s), some RAM, device controllers, and extension slots for option boards (for other device controllers). Most noteworthy among these controllers are IDE (Parallel ATA), SCSI and Serial ATA, for connecting to storage devices such as hard disks. Other controllers include USB, which is able to host a great variety of devices (ranging from webcams to thermometers, from keyboards to home automation systems) and IEEE 1394 (Firewire). These controllers often allow connecting several devices so the complete subsystem handled by a controller is therefore usually known as a “bus”. Option boards include graphics cards (into which monitor screens will be plugged), sound cards, network interface cards, and so on. Some main boards are pre-built with these features, and don't need option boards."
msgstr ""

msgid "<emphasis>IN PRACTICE</emphasis> Checking that the hardware works"
msgstr ""

msgid "Checking that a piece of hardware works can be tricky. On the other hand, proving that it doesn't work is sometimes quite simple."
msgstr ""

msgid "A hard disk drive is made of spinning platters and moving magnetic heads. When a hard disk is powered up, the platter motor makes a characteristic whir. It also dissipates energy as heat. Consequently, a hard disk drive that stays cold and silent when powered up is broken."
msgstr ""

msgid "Network cards often include LEDs displaying the state of the link. If a cable is plugged in and leads to a working network hub or switch, at least one LED will be on. If no LED lights up, either the card itself, the network device, or the cable between them, is faulty. The next step is therefore testing each component individually."
msgstr ""

msgid "Some option boards — especially 3D video cards — include cooling devices, such as heat sinks and/or fans. If the fan does not spin even though the card is powered up, a plausible explanation is the card overheated. This also applies to the main processor(s) located on the main board."
msgstr ""

msgid "The Starter: the BIOS or UEFI"
msgstr "启动器：BIOS 或 UEFI"

msgid "<primary>BIOS</primary>"
msgstr "<primary>BIOS</primary>"

msgid "<primary>UEFI</primary>"
msgstr "<primary>UEFI</primary>"

#, fuzzy
#| msgid "<primary>Master Boot Record (MBR)</primary>"
msgid "<primary>Master Boot Record</primary><see>MBR</see>"
msgstr "<primary>主引导记录 Master Boot Record (MBR)</primary>"

#, fuzzy
#| msgid "<primary>USB</primary>"
msgid "<primary>MBR</primary>"
msgstr "<primary>USB</primary>"

msgid "Hardware, on its own, is unable to perform useful tasks without a corresponding piece of software driving it. Controlling and interacting with the hardware is the purpose of the operating system and applications. These, in turn, require functional hardware to run."
msgstr ""

msgid "This symbiosis between hardware and software does not happen on its own. When the computer is first powered up, some initial setup is required. This role is assumed by the BIOS or UEFI, a piece of software embedded into the main board that runs automatically upon power-up. Its primary task is searching for software it can hand over control to. Usually, as you may have learned in <xref linkend=\"sect.system-boot\" />, in the BIOS case, this involves looking for the first hard disk with a boot sector (also known as the <emphasis>master boot record</emphasis> or <acronym>MBR</acronym>), loading that boot sector, and running it. From then on, the BIOS is usually not involved (until the next boot). In the case of UEFI, the process involves scanning disks to find a dedicated EFI partition containing further EFI applications to execute."
msgstr ""

msgid "<emphasis>TOOL</emphasis> Setup, the BIOS/UEFI configuration tool"
msgstr "<emphasis>工具</emphasis> 设置，BIOS/UEFI 配置工具"

msgid "<primary><emphasis>Setup</emphasis></primary>"
msgstr "<primary><emphasis>设置</emphasis></primary>"

msgid "The BIOS/UEFI also contains a piece of software called Setup, designed to allow configuring aspects of the computer. In particular, it allows choosing which boot device is preferred (for instance, you can select a USB key or a CD-ROM drive instead of the default harddisk), setting the system clock, and so on. Starting Setup usually involves pressing a key very soon after the computer is powered on. This key is often <keycap>Del</keycap> or <keycap>Esc</keycap>, sometimes <keycap>F2</keycap>, <keycap>F5</keycap>, <keycap>F8</keycap>, or <keycap>F10</keycap>. Most of the time, the choice is flashed on screen while booting. If not, you best check the manual of your mainboard or your computer."
msgstr ""

msgid "The boot sector (or the EFI partition), in turn, contains another piece of software, called the bootloader, whose purpose is to find and run an operating system. Since this bootloader is not embedded in the main board but loaded from disk, it can be smarter than the BIOS, which explains why the BIOS does not load the operating system by itself. For instance, the bootloader (often GRUB on Linux systems) can list the available operating systems and ask the user to choose one. Usually, a time-out and default choice is provided. Sometimes the user can also choose to add parameters to pass to the kernel, and so on. Eventually, a kernel is found, loaded into memory, and executed."
msgstr ""

msgid "<emphasis>NOTE</emphasis> UEFI, a modern replacement to the BIOS"
msgstr "<emphasis>笔记</emphasis> UEFI，一个 BIOS 的现代替代品"

msgid "<primary>Basic Input/Output System</primary><see>BIOS</see>"
msgstr ""

msgid "<primary>Unified Extensible Firmware Interface</primary><see>UEFI</see>"
msgstr ""

msgid "<primary>Secure Boot</primary>"
msgstr "<primary>安全启动</primary>"

#, fuzzy
#| msgid "<primary>SCSI</primary>"
msgid "<primary>CSM</primary>"
msgstr "<primary>SCSI</primary>"

msgid "<primary>Compatibility Support Mode</primary><see>CSM</see>"
msgstr ""

msgid "BIOS (which stands for Basic Input/Output System) is a software that is included in the motherboard - the electronic board connecting all peripherals - and executed when the computer is booted, in order to load an operating system (via an adapted bootloader). It stays in the background to provide an interface between the hardware and the software (in our case, the Linux kernel)."
msgstr ""

msgid "In 2005/2006 its successor, the UEFI (Unified Extensible Firmware Interface) specification, has been published. This specification defines an interface that has the same purpose as the BIOS, but tries to provide more usability, extensibility, and flexibility, a graphical user interface, and true 64bit support. And it got rid of some of the limitations of BIOS booting: with the usage of a dedicated partition, the bootloaders no longer need special tricks to fit in a tiny <emphasis>master boot record</emphasis> and then discover the kernel to boot. Even better, with a suitably built Linux kernel, UEFI can directly boot the kernel without any intermediary bootloader. UEFI is also the basic foundation used to deliver <emphasis>Secure Boot</emphasis>, a technology ensuring that you run only software validated by your operating system vendor."
msgstr ""

msgid "Nowadays, most new computers will boot in UEFI mode by default, but usually they also support BIOS booting alongside for backwards compatibility with operating systems that are not ready to exploit UEFI. This is called the <emphasis>Compatibility Support Mode/Module</emphasis> (CSM). But, several manufacturers have either announced to cease support for the legacy BIOS mode in their UEFI implementation, or they already did. This transition, however, has not been without discussion nor without criticism."
msgstr ""

msgid "The BIOS/UEFI is also in charge of detecting and initializing a number of devices. Obviously, this includes the IDE/SATA devices (usually hard disk(s) and CD/DVD-ROM drives), but also PCI devices. Detected devices are often listed on screen during the boot process. If this list goes by too fast, use the <keycap>Pause</keycap> key to freeze it for long enough to read. Installed PCI devices that don't appear are a bad omen. At worst, the device is faulty. At best, it is merely incompatible with the current version of the BIOS or main board. PCI specifications evolve, and old main boards are not guaranteed to handle newer PCI devices."
msgstr ""

msgid "The Kernel"
msgstr "内核"

#, fuzzy
#| msgid "<primary>kernel space</primary>"
msgid "<primary>kernel</primary>"
msgstr "<primary>内核空间</primary>"

msgid "Both the BIOS/UEFI and the bootloader only run for a few seconds each; now we are getting to the first piece of software that runs for a longer time, the operating system kernel. This kernel assumes the role of a conductor in an orchestra, and ensures coordination between hardware and software. This role involves several tasks including: driving hardware, managing processes, users and permissions, the filesystem, and so on. The kernel provides a common base to all other programs on the system."
msgstr ""

msgid "The User Space"
msgstr "用户空间"

msgid "Although everything that happens outside of the kernel can be lumped together under “user space”, we can still separate it into software layers. However, their interactions are more complex than before, and the classifications may not be as simple. An application commonly uses libraries, which in turn involve the kernel, but the communications can also involve other programs, or even many libraries calling each other."
msgstr ""

msgid "Some Tasks Handled by the Kernel"
msgstr "由内核处理的一些任务"

msgid "Driving the Hardware"
msgstr "驱动硬件"

#, fuzzy
#| msgid "<primary>daemon</primary>"
msgid "<primary>Video for Linux</primary><see>V4L</see>"
msgstr "<primary>后台守护进程（daemon）</primary>"

#, fuzzy
#| msgid "<primary>IDE</primary>"
msgid "<primary>V4L</primary>"
msgstr "<primary>IDE</primary>"

msgid "The kernel is, first and foremost, tasked with controlling the hardware parts, detecting them, switching them on when the computer is powered on, and so on. It also makes them available to higher-level software with a simplified programming interface, so applications can take advantage of devices without having to worry about details such as which extension slot the option board is plugged into. The programming interface also provides an abstraction layer; this allows video-conferencing software, for example, to use a webcam independently of its make and model. The software can just use the <emphasis>Video for Linux</emphasis> (V4L) interface, and the kernel translates the function calls of this interface into the actual hardware commands needed by the specific webcam in use."
msgstr ""

#, fuzzy
#| msgid "<primary><command>mkfs</command></primary>"
msgid "<primary><command>lspci</command></primary>"
msgstr "<primary><command>mkfs</command></primary>"

#, fuzzy
#| msgid "<primary><command>mkfs</command></primary>"
msgid "<primary><command>lsusb</command></primary>"
msgstr "<primary><command>mkfs</command></primary>"

#, fuzzy
#| msgid "<primary><command>mkfs</command></primary>"
msgid "<primary><command>lsdev</command></primary>"
msgstr "<primary><command>mkfs</command></primary>"

#, fuzzy
#| msgid "<primary><command>mkfs</command></primary>"
msgid "<primary><command>lspcmcia</command></primary>"
msgstr "<primary><command>mkfs</command></primary>"

msgid "The kernel exports many details about detected hardware through the <filename>/proc/</filename> and <filename>/sys/</filename> virtual filesystems. Several tools summarize those details. Among them, <command>lspci</command> (in the <emphasis role=\"pkg\">pciutils</emphasis> package) lists PCI devices, <command>lsusb</command> (in the <emphasis role=\"pkg\">usbutils</emphasis> package) lists USB devices, and <command>lspcmcia</command> (in the <emphasis role=\"pkg\">pcmciautils</emphasis> package) lists PCMCIA cards. These tools are very useful for identifying the exact model of a device. This identification also allows more precise searches on the web, which in turn, lead to more relevant documents."
msgstr ""

msgid "Example of information provided by <command>lspci</command> and <command>lsusb</command>"
msgstr "由 <command>lspci</command> 和 <command>lsusb</command> 提供的信息示例"

msgid ""
"\n"
"<computeroutput>$ </computeroutput><userinput>lspci\n"
"</userinput><computeroutput>[...]\n"
"00:00.0 Host bridge: Intel Corporation Xeon E3-1200 v6/7th Gen Core Processor Host Bridge/DRAM Registers (rev 05)\n"
"00:01.0 PCI bridge: Intel Corporation 6th-9th Gen Core Processor PCIe Controller (x16) (rev 05)\n"
"00:02.0 VGA compatible controller: Intel Corporation HD Graphics 630 (rev 04)\n"
"00:14.0 USB controller: Intel Corporation 100 Series/C230 Series Chipset Family USB 3.0 xHCI Controller (rev 31)\n"
"00:14.2 Signal processing controller: Intel Corporation 100 Series/C230 Series Chipset Family Thermal Subsystem (rev 31)\n"
"[...]\n"
"02:00.0 Network controller: Qualcomm Atheros QCA6174 802.11ac Wireless Network Adapter (rev 32)\n"
"03:00.0 Unassigned class [ff00]: Realtek Semiconductor Co., Ltd. RTL8411B PCI Express Card Reader (rev 01)\n"
"03:00.1 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ethernet Controller (rev 12)\n"
"04:00.0 Non-Volatile memory controller: Samsung Electronics Co Ltd NVMe SSD Controller SM981/PM981/PM983\n"
"$ </computeroutput><userinput>lsusb\n"
"</userinput><computeroutput>Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub\n"
"Bus 001 Device 003: ID 0bda:5621 Realtek Semiconductor Corp. HD WebCam\n"
"Bus 001 Device 002: ID 04ca:3016 Lite-On Technology Corp. \n"
"Bus 001 Device 018: ID 145f:01bc Trust GXT 155 Gaming Mouse\n"
"Bus 001 Device 004: ID 04f3:0c03 Elan Microelectronics Corp. ELAN:Fingerprint\n"
"Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\n"
"</computeroutput>"
msgstr ""

msgid "These programs have a <literal>-v</literal> option that lists much more detailed (but usually not necessary) information. Finally, the <command>lsdev</command> command (in the <emphasis role=\"pkg\">procinfo</emphasis> package) lists communication resources used by devices."
msgstr ""

msgid "<primary>device</primary><secondary>files</secondary>"
msgstr ""

msgid "<primary>device</primary><secondary>block</secondary>"
msgstr ""

msgid "Applications often access devices by way of special files created within <filename>/dev/</filename> (see sidebar <xref linkend=\"sidebar.special-files\" />). These are special files that represent disk drives (for instance, <filename>/dev/hda</filename> and <filename>/dev/sdc</filename>), partitions (<filename>/dev/hda1</filename> or <filename>/dev/sdc3</filename>), mice (<filename>/dev/input/mouse0</filename>), keyboards (<filename>/dev/input/event0</filename>), soundcards (<filename>/dev/snd/*</filename>), serial ports (<filename>/dev/ttyS*</filename>), and so on."
msgstr ""

msgid "Filesystems"
msgstr "文件系统"

msgid "<primary>filesystem</primary>"
msgstr "<primary>文件系统</primary>"

#, fuzzy
#| msgid "<primary>system, filesystem</primary>"
msgid "<primary>system</primary><secondary>filesystem</secondary>"
msgstr "<primary>系统，文件系统</primary>"

msgid "Filesystems are one of the most prominent aspects of the kernel. Unix systems merge all the file stores into a single hierarchy, which allows users (and applications) to access data simply by knowing its location within that hierarchy."
msgstr ""

msgid "The starting point of this hierarchical tree is called the root, <filename>/</filename>. This directory can contain named subdirectories. For instance, the <literal>home</literal> subdirectory of <filename>/</filename> is called <filename>/home/</filename>. This subdirectory can, in turn, contain other subdirectories, and so on. Each directory can also contain files, where the actual data will be stored. Thus, the <filename>/home/rmas/Desktop/hello.txt</filename> name refers to a file named <literal>hello.txt</literal> stored in the <literal>Desktop</literal> subdirectory of the <literal>rmas</literal> subdirectory of the <literal>home</literal> directory present in the root. The kernel translates between this naming system and the actual, physical storage on a disk."
msgstr ""

#, fuzzy
#| msgid "<primary><command>init</command></primary>"
msgid "<primary><command>mount</command></primary>"
msgstr "<primary><command>init</command></primary>"

msgid "Unlike other systems, there is only one such hierarchy, and it can integrate data from several disks. One of these disks is used as the root, and the others are “mounted” on directories in the hierarchy (the Unix command is called <command>mount</command>); these other disks are then available under these “mount points”. This allows storing users' home directories (traditionally stored within <filename>/home/</filename>) on a second hard disk, which will contain the <literal>rhertzog</literal> and <literal>rmas</literal> directories. Once the disk is mounted on <filename>/home/</filename>, these directories become accessible at their usual locations, and paths such as <filename>/home/rmas/Desktop/hello.txt</filename> keep working."
msgstr ""

msgid "<primary><command>mkfs</command></primary>"
msgstr "<primary><command>mkfs</command></primary>"

msgid "There are many filesystem formats, corresponding to many ways of physically storing data on disks. The most widely known are <emphasis>ext3</emphasis> and <emphasis>ext4</emphasis>, but others exist. For instance, <emphasis>vfat</emphasis> is the system that was historically used by DOS and Windows operating systems, which allows using hard disks under Debian as well as under Windows. In any case, a filesystem must be prepared on a disk before it can be mounted and this operation is known as “formatting”. Commands such as <command>mkfs.ext3</command> (where <command>mkfs</command> stands for <emphasis>MaKe FileSystem</emphasis>) handle formatting. These commands require, as a parameter, a device file representing the partition to be formatted (for instance, <filename>/dev/sda1</filename>). This operation is destructive and should only be run once, except if one deliberately wishes to wipe a filesystem and start afresh."
msgstr ""

msgid "There are also network filesystems, such as <acronym>NFS</acronym>, where data is not stored on a local disk. Instead, data is transmitted through the network to a server that stores and retrieves them on demand. The filesystem abstraction shields users from having to care: files remain accessible in their usual hierarchical way."
msgstr ""

msgid "Shared Functions"
msgstr "共享功能"

msgid "Since a number of the same functions are used by all software, it makes sense to centralize them in the kernel. For instance, shared filesystem handling allows any application to simply open a file by name, without needing to worry where the file is stored physically. The file can be stored in several different slices on a hard disk, or split across several hard disks, or even stored on a remote file server. Shared communication functions are used by applications to exchange data independently of the way the data is transported. For instance, transport could be over any combination of local or wireless networks, or over a telephone landline."
msgstr ""

msgid "A process is a running instance of a program. This requires memory to store both the program itself and its operating data. The kernel is in charge of creating and tracking them. When a program runs, the kernel first sets aside some memory, then loads the executable code from the filesystem into it, and then starts the code running. It keeps information about this process, the most visible of which is an identification number known as <emphasis>pid</emphasis> (<emphasis>process identifier</emphasis>)."
msgstr ""

msgid "Unix-like kernels (including Linux), like most other modern operating systems, are capable of “multi-tasking”. In other words, they allow running many processes “at the same time”. There is actually only one running process at any one time, but the kernel cuts time into small slices and runs each process in turn. Since these time slices are very short (in the millisecond range), they create the illusion of processes running in parallel, although they are actually only active during some time intervals and idle the rest of the time. The kernel's job is to adjust its scheduling mechanisms to keep that illusion, while maximizing the global system performance. If the time slices are too long, the application may not appear as responsive as desired. Too short, and the system loses time switching tasks too frequently. These decisions can be tweaked with process priorities. High-priority processes will run for longer and with more frequent time slices than low-priority processes."
msgstr ""

msgid "<emphasis>NOTE</emphasis> Multi-processor systems (and variants)"
msgstr "<emphasis>注解</emphasis> 多处理器系统（和变体）"

msgid "The limitation described above of only one process being able to run at a time, doesn't always apply. The actual restriction is that there can only be one running process <emphasis>per processor core</emphasis> at a time. Multi-processor, multi-core or “hyper-threaded” systems allow several processes to run in parallel. The same time-slicing system is still used, though, so as to handle cases where there are more active processes than available processor cores. This is far from unusual: a basic system, even a mostly idle one, almost always has tens of running processes."
msgstr ""

msgid "Of course, the kernel allows running several independent instances of the same program. But each can only access its own time slices and memory. Their data thus remain independent."
msgstr ""

msgid "Rights Management"
msgstr "管理权限"

#, fuzzy
#| msgid "<primary>daemon</primary>"
msgid "<primary>permissions</primary>"
msgstr "<primary>后台守护进程（daemon）</primary>"

msgid "Unix-like systems are also multi-user. They provide a rights management system that supports separate users and groups; it also allows control over actions based on permissions. The kernel manages data for each process, allowing it to control permissions. Most of the time, a process is identified by the user who started it. That process is only permitted to take those actions available to its owner. For instance, trying to open a file requires the kernel to check the process identity against access permissions (for more details on this particular example, see <xref linkend=\"sect.rights-management\" />)."
msgstr ""

msgid "<primary>kernel space</primary>"
msgstr "<primary>内核空间</primary>"

msgid "“User space” refers to the runtime environment of normal (as opposed to kernel) processes. This does not necessarily mean these processes are actually started by users because a standard system normally has several “daemon” (or background) processes running before the user even opens a session. Daemon processes are also considered user-space processes."
msgstr ""

msgid "<primary><command>init</command></primary>"
msgstr "<primary><command>init</command></primary>"

msgid "When the kernel gets past its initialization phase, it starts the very first process, <command>init</command>. Process #1 alone is very rarely useful by itself, and Unix-like systems run with many additional processes."
msgstr ""

msgid "<primary><emphasis>fork</emphasis></primary>"
msgstr "<primary><emphasis>派生</emphasis></primary>"

msgid "First of all, a process can clone itself (this is known as a <emphasis>fork</emphasis>). The kernel allocates a new (but identical) process memory space, and another process to use it. At this time, the only difference between these two processes is their <emphasis>pid</emphasis>. The new process is usually called a child process, and the original process whose <emphasis>pid</emphasis> doesn't change, is called the parent process."
msgstr ""

msgid "Sometimes, the child process continues to lead its own life independently from its parent, with its own data copied from the parent process. In many cases, though, this child process executes another program. With a few exceptions, its memory is simply replaced by that of the new program, and execution of this new program begins. This is the mechanism used by the init process (with process number 1) to start additional services and execute the whole startup sequence. At some point, one process among <command>init</command>'s offspring starts a graphical interface for users to log in to (the actual sequence of events is described in more details in <xref linkend=\"sect.system-boot\" />)."
msgstr ""

#, fuzzy
#| msgid "<primary>IDE</primary>"
msgid "<primary>shell</primary>"
msgstr "<primary>IDE</primary>"

msgid "<primary><literal>&amp;</literal></primary><see>background task</see>"
msgstr ""

msgid "When a process finishes the task for which it was started, it terminates. The kernel then recovers the memory assigned to this process, and stops giving it slices of running time. The parent process is told about its child process being terminated, which allows a process to wait for the completion of a task it delegated to a child process. This behavior is plainly visible in command-line interpreters (known as <emphasis>shells</emphasis>). When a command is typed into a shell, the prompt only comes back when the execution of the command is over. Most shells allow for running the command in the background, it is a simple matter of adding an <userinput>&amp;</userinput> to the end of the command. The prompt is displayed again right away, which can lead to problems if the command needs to display data of its own."
msgstr ""

msgid "Daemons"
msgstr "后台守护进程（daemon）"

msgid "<primary>daemon</primary><seealso>background task</seealso>"
msgstr ""

msgid "A “daemon” is a process started automatically by the boot sequence. It keeps running (in the background) to perform maintenance tasks or provide services to other processes. This “background task” is actually arbitrary, and does not match anything particular from the system's point of view. They are simply processes, quite similar to other processes, which run in turn when their time slice comes. The distinction is only in the human language: a process that runs with no interaction with a user (in particular, without any graphical interface) is said to be running “in the background” or “as a daemon”."
msgstr ""

msgid "<emphasis>VOCABULARY</emphasis> Daemon, demon, a derogatory term?"
msgstr ""

msgid "Although <emphasis>daemon</emphasis> term shares its Greek etymology with <emphasis>demon</emphasis>, the former does not imply diabolical evil, instead, it should be understood as a kind of helper spirit. This distinction is subtle enough in English; it is even worse in other languages where the same word is used for both meanings."
msgstr ""

msgid "Several such daemons are described in detail in <xref linkend=\"unix-services\" />."
msgstr ""

msgid "Inter-Process Communications"
msgstr "进程间通信"

msgid "<primary>IPC</primary>"
msgstr "<primary>IPC</primary>"

#, fuzzy
#| msgid "<primary>Inter-Process Communications</primary>"
msgid "<primary>Inter-Process Communications</primary><see>IPC</see>"
msgstr "<primary>进程间通信</primary>"

msgid "An isolated process, whether a daemon or an interactive application, is rarely useful on its own, which is why there are several methods allowing separate processes to communicate together, either to exchange data or to control one another. The generic term referring to this is <emphasis>inter-process communication</emphasis>, or IPC for short."
msgstr ""

msgid "The simplest IPC system is to use files. The process that wishes to send data writes it into a file (with a name known in advance), while the recipient only has to open the file and read its contents."
msgstr ""

msgid "<primary><emphasis>pipe</emphasis></primary>"
msgstr "<primary><emphasis>管道</emphasis></primary>"

msgid "In the case where you do not wish to store data on disk, you can use a <emphasis>pipe</emphasis>, which is simply an object with two ends; bytes written in one end are readable at the other. If the ends are controlled by separate processes, this leads to a simple and convenient inter-process communication channel. Pipes can be classified into two categories: named pipes, and anonymous pipes. A named pipe is represented by an entry on the filesystem (although the transmitted data is not stored there), so both processes can open it independently if the location of the named pipe is known beforehand. In cases where the communicating processes are related (for instance, a parent and its child process), the parent process can also create an anonymous pipe before forking, and the child inherits it. Both processes will then be able to exchange data through the pipe without needing the filesystem."
msgstr ""

msgid "<emphasis>IN PRACTICE</emphasis> A concrete example"
msgstr ""

msgid "Let's describe in some detail what happens when a complex command (a <emphasis>pipeline</emphasis>) is run from a shell. We assume we have a <command>bash</command> process (the standard user shell on Debian), with <emphasis>pid</emphasis> 4374; into this shell, we type the command: <command>ls | sort</command> ."
msgstr ""

msgid "The shell first interprets the command typed in. In our case, it understands there are two programs (<command>ls</command> and <command>sort</command>), with a data stream flowing from one to the other (denoted by the <userinput>|</userinput> character, known as <emphasis>pipe</emphasis>). <command>bash</command> first creates an unnamed pipe (which initially exists only within the <command>bash</command> process itself)."
msgstr ""

msgid "Then the shell clones itself; this leads to a new <command>bash</command> process, with <emphasis>pid</emphasis> #4521 (<emphasis>pids</emphasis> are abstract numbers, and generally have no particular meaning). Process #4521 inherits the pipe, which means it is able to write in its “input” side; <command>bash</command> redirects its standard output stream to this pipe's input. Then it executes (and replaces itself with) the <command>ls</command> program, which lists the contents of the current directory. Since <command>ls</command> writes on its standard output, and this output has previously been redirected, the results are effectively sent into the pipe."
msgstr ""

msgid "A similar operation happens for the second command: <command>bash</command> clones itself again, leading to a new <command>bash</command> process with pid #4522. Since it is also a child process of #4374, it also inherits the pipe; <command>bash</command> then connects its standard input to the pipe output, then executes (and replaces itself with) the <command>sort</command> command, which sorts its input and displays the results."
msgstr ""

msgid "All the pieces of the puzzle are now set up: <command>ls</command> reads the current directory and writes the list of files into the pipe; <command>sort</command> reads this list, sorts it alphabetically, and displays the results. Processes numbers #4521 and #4522 then terminate, and #4374 (which was waiting for them during the operation), resumes control and displays the prompt to allow the user to type in a new command."
msgstr ""

msgid "Not all inter-process communications are used to move data around, though. In many situations, the only information that needs to be transmitted are control messages such as “pause execution” or “resume execution”. Unix (and Linux) provides a mechanism known as <emphasis>signals</emphasis>, through which a process can simply send a specific signal (chosen from a predefined list of signals) to another process. The only requirement is to know the <emphasis>pid</emphasis> of the target."
msgstr ""

msgid "For more complex communications, there are also mechanisms allowing a process to open access, or share, part of its allocated memory to other processes. Memory now shared between them can be used to move data between the processes."
msgstr ""

msgid "Finally, network connections can also help processes communicate; these processes can even be running on different computers, possibly thousands of kilometers apart."
msgstr ""

msgid "It is quite standard for a typical Unix-like system to make use of all these mechanisms to various degrees."
msgstr ""

msgid "Libraries"
msgstr "库"

msgid "<primary>library (of functions)</primary>"
msgstr "<primary>（函数）库</primary>"

msgid "Function libraries play a crucial role in a Unix-like operating system. They are not proper programs, since they cannot be executed on their own, but collections of code fragments that can be used by standard programs. Among the common libraries, you can find:"
msgstr ""

msgid "the standard C library (<emphasis>glibc</emphasis>), which contains basic functions such as ones to open files or network connections, and others facilitating interactions with the kernel;"
msgstr ""

msgid "graphical toolkits, such as Gtk+ and Qt, allowing many programs to reuse the graphical objects they provide;"
msgstr "图形工具箱，如 Gtk+ 和 Qt，能够让许多程序复用它们提供的图形对象;"

msgid "the <emphasis>libpng</emphasis> library, which allows loading, interpreting and saving images in the PNG format."
msgstr "<emphasis>libpng</emphasis> 库，它能加载、解析和保存 PNG 格式的图像。"

msgid "Thanks to those libraries, applications can reuse existing code. Application development is simplified since many applications can reuse the same functions. With libraries often developed by different persons, the global development of the system is closer to Unix's historical philosophy."
msgstr ""

msgid "<emphasis>CULTURE</emphasis> The Unix Way: one thing at a time"
msgstr "<emphasis>CULTURE</emphasis> Unix 之路：一次一件事"

msgid "One of the fundamental concepts that underlies the Unix family of operating systems is that each tool should only do one thing, and do it well; applications can then reuse these tools to build more advanced logic on top. This philosophy can be seen in many incarnations. Shell scripts may be the best example: they assemble complex sequences of very simple tools (such as <command>grep</command>, <command>wc</command>, <command>sort</command>, <command>uniq</command> and so on). Another implementation of this philosophy can be seen in code libraries: the <emphasis>libpng</emphasis> library allows reading and writing PNG images, with different options and in different ways, but it does only that; no question of including functions that display or edit images."
msgstr ""

msgid "Moreover, these libraries are often referred to as “shared libraries”, since the kernel is able to only load them into memory once, even if several processes use the same library at the same time. This allows saving memory, when compared with the opposite (hypothetical) situation where the code for a library would be loaded as many times as there are processes using it."
msgstr ""

#, fuzzy
#| msgid "<primary>Filesystem Hierarchy</primary>"
msgid "<primary>shared library</primary>"
msgstr "<primary>文件系统层次结构</primary>"

#~ msgid ""
#~ "\n"
#~ "<computeroutput>$ </computeroutput><userinput>lspci</userinput>\n"
#~ "<computeroutput>[...]\n"
#~ "00:02.1 Display controller: Intel Corporation Mobile 915GM/GMS/910GML Express Graphics Controller (rev 03)\n"
#~ "00:1c.0 PCI bridge: Intel Corporation 82801FB/FBM/FR/FW/FRW (ICH6 Family) PCI Express Port 1 (rev 03)\n"
#~ "00:1d.0 USB Controller: Intel Corporation 82801FB/FBM/FR/FW/FRW (ICH6 Family) USB UHCI #1 (rev 03)\n"
#~ "[...]\n"
#~ "01:00.0 Ethernet controller: Broadcom Corporation NetXtreme BCM5751 Gigabit Ethernet PCI Express (rev 01)\n"
#~ "02:03.0 Network controller: Intel Corporation PRO/Wireless 2200BG Network Connection (rev 05)\n"
#~ "$ </computeroutput><userinput>lsusb</userinput>\n"
#~ "<computeroutput>Bus 005 Device 004: ID 413c:a005 Dell Computer Corp.\n"
#~ "Bus 005 Device 008: ID 413c:9001 Dell Computer Corp.\n"
#~ "Bus 005 Device 007: ID 045e:00dd Microsoft Corp.\n"
#~ "Bus 005 Device 006: ID 046d:c03d Logitech, Inc.\n"
#~ "[...]\n"
#~ "Bus 002 Device 004: ID 413c:8103 Dell Computer Corp. Wireless 350 Bluetooth\n"
#~ "</computeroutput>"
#~ msgstr ""
#~ "\n"
#~ "<computeroutput>$ </computeroutput><userinput>lspci</userinput>\n"
#~ "<computeroutput>[...]\n"
#~ "00:02.1 Display controller: Intel Corporation Mobile 915GM/GMS/910GML Express Graphics Controller (rev 03)\n"
#~ "00:1c.0 PCI bridge: Intel Corporation 82801FB/FBM/FR/FW/FRW (ICH6 Family) PCI Express Port 1 (rev 03)\n"
#~ "00:1d.0 USB Controller: Intel Corporation 82801FB/FBM/FR/FW/FRW (ICH6 Family) USB UHCI #1 (rev 03)\n"
#~ "[...]\n"
#~ "01:00.0 Ethernet controller: Broadcom Corporation NetXtreme BCM5751 Gigabit Ethernet PCI Express (rev 01)\n"
#~ "02:03.0 Network controller: Intel Corporation PRO/Wireless 2200BG Network Connection (rev 05)\n"
#~ "$ </computeroutput><userinput>lsusb</userinput>\n"
#~ "<computeroutput>Bus 005 Device 004: ID 413c:a005 Dell Computer Corp.\n"
#~ "Bus 005 Device 008: ID 413c:9001 Dell Computer Corp.\n"
#~ "Bus 005 Device 007: ID 045e:00dd Microsoft Corp.\n"
#~ "Bus 005 Device 006: ID 046d:c03d Logitech, Inc.\n"
#~ "[...]\n"
#~ "Bus 002 Device 004: ID 413c:8103 Dell Computer Corp. Wireless 350 Bluetooth\n"
#~ "</computeroutput>"

#~ msgid "<primary>user space</primary>"
#~ msgstr "<primary>用户空间</primary>"
